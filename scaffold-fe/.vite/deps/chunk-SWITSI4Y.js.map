{
  "version": 3,
  "sources": ["../../node_modules/proxy-deep/index.js", "../../node_modules/mobx/src/errors.ts", "../../node_modules/mobx/src/utils/global.ts", "../../node_modules/mobx/src/utils/utils.ts", "../../node_modules/mobx/src/api/decorators.ts", "../../node_modules/mobx/src/core/atom.ts", "../../node_modules/mobx/src/utils/comparer.ts", "../../node_modules/mobx/src/types/modifiers.ts", "../../node_modules/mobx/src/types/overrideannotation.ts", "../../node_modules/mobx/src/types/actionannotation.ts", "../../node_modules/mobx/src/types/flowannotation.ts", "../../node_modules/mobx/src/types/computedannotation.ts", "../../node_modules/mobx/src/types/observableannotation.ts", "../../node_modules/mobx/src/types/autoannotation.ts", "../../node_modules/mobx/src/api/observable.ts", "../../node_modules/mobx/src/api/computed.ts", "../../node_modules/mobx/src/core/action.ts", "../../node_modules/mobx/src/types/observablevalue.ts", "../../node_modules/mobx/src/core/computedvalue.ts", "../../node_modules/mobx/src/core/derivation.ts", "../../node_modules/mobx/src/core/globalstate.ts", "../../node_modules/mobx/src/core/observable.ts", "../../node_modules/mobx/src/core/reaction.ts", "../../node_modules/mobx/src/core/spy.ts", "../../node_modules/mobx/src/api/action.ts", "../../node_modules/mobx/src/api/autorun.ts", "../../node_modules/mobx/src/api/become-observed.ts", "../../node_modules/mobx/src/api/configure.ts", "../../node_modules/mobx/src/api/extendobservable.ts", "../../node_modules/mobx/src/api/extras.ts", "../../node_modules/mobx/src/api/flow.ts", "../../node_modules/mobx/src/api/intercept-read.ts", "../../node_modules/mobx/src/api/intercept.ts", "../../node_modules/mobx/src/api/iscomputed.ts", "../../node_modules/mobx/src/api/isobservable.ts", "../../node_modules/mobx/src/api/object-api.ts", "../../node_modules/mobx/src/api/observe.ts", "../../node_modules/mobx/src/api/tojs.ts", "../../node_modules/mobx/src/api/trace.ts", "../../node_modules/mobx/src/api/transaction.ts", "../../node_modules/mobx/src/api/when.ts", "../../node_modules/mobx/src/types/dynamicobject.ts", "../../node_modules/mobx/src/types/intercept-utils.ts", "../../node_modules/mobx/src/types/listen-utils.ts", "../../node_modules/mobx/src/api/makeObservable.ts", "../../node_modules/mobx/src/types/observablearray.ts", "../../node_modules/mobx/src/types/observablemap.ts", "../../node_modules/mobx/src/types/observableset.ts", "../../node_modules/mobx/src/types/observableobject.ts", "../../node_modules/mobx/src/types/legacyobservablearray.ts", "../../node_modules/mobx/src/types/type-utils.ts", "../../node_modules/mobx/src/utils/eq.ts", "../../node_modules/mobx/src/utils/iterable.ts", "../../node_modules/mobx/src/api/annotation.ts", "../../node_modules/mobx/src/mobx.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/arrays.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/deferred.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/mobx.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/guards.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/proxy.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/enums.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/objects.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/random.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/rx.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/uuid.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/sleep.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/promise.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/iterable.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/area.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/worker.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/pack.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/CoordMap.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/VoxelCoordMap.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/eth.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/cubic.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/console.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/distance.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/math.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/v2/arrayToHex.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/v2/bytesToString.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/v2/isHex.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/v2/hexToArray.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/v2/stringToBytes.ts", "../../node_modules/@dojoengine/recs/node_modules/@latticexyz/utils/src/bytes.ts", "../../node_modules/tslib/tslib.es6.mjs", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isFunction.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/createErrorClass.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/UnsubscriptionError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/arrRemove.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/Subscription.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/config.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/reportUnhandledError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/noop.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/NotificationFactories.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/errorContext.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/Subscriber.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/symbol/observable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/identity.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/pipe.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/Observable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/lift.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/refCount.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/ConnectableObservable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/performanceTimestampProvider.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/animationFrameProvider.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/dom/animationFrames.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/Subject.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/BehaviorSubject.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/dateTimestampProvider.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/ReplaySubject.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/AsyncSubject.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/Action.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/intervalProvider.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/AsyncAction.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/Immediate.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/immediateProvider.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/AsapAction.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/Scheduler.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/asap.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/async.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/QueueAction.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/queue.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/animationFrame.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/empty.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isScheduler.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/args.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isArrayLike.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isPromise.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isInteropObservable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isAsyncIterable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/throwUnobservableError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/symbol/iterator.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isIterable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/isReadableStreamLike.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/innerFrom.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/executeSchedule.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/observeOn.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/subscribeOn.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduled/schedulePromise.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduled/scheduleArray.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/scheduled/scheduled.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/from.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/of.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/throwError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/Notification.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/EmptyError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/NotFoundError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/SequenceError.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/timeout.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/map.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/argsArgArrayOrObject.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/mergeInternals.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/mergeMap.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/mergeAll.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/concatAll.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/concat.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/merge.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/observable/never.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/util/argsOrArgArray.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/filter.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/concatMap.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/take.ts", "../../node_modules/@dojoengine/recs/node_modules/rxjs/src/internal/operators/share.ts", "../../node_modules/@dojoengine/recs/src/constants.ts", "../../node_modules/@dojoengine/recs/src/Component.ts", "../../node_modules/@dojoengine/recs/src/Indexer.ts", "../../node_modules/@dojoengine/recs/src/utils.ts", "../../node_modules/@dojoengine/recs/src/Entity.ts", "../../node_modules/@dojoengine/recs/src/System.ts", "../../node_modules/@dojoengine/recs/src/Query.ts", "../../node_modules/@dojoengine/recs/src/types.ts", "../../node_modules/@dojoengine/recs/src/World.ts"],
  "sourcesContent": ["'use strict';\n\nfunction parsePath(text) {\n  return text.split('.')\n}\n\nfunction push(arr, el) {\n  const newArr = arr.slice();\n  newArr.push(el);\n  return newArr;\n}\n\n// names of the traps that can be registered with ES6's Proxy object\nconst trapNames = [\n  'apply',\n  'construct',\n  'defineProperty',\n  'deleteProperty',\n  'enumerate',\n  'get',\n  'getOwnPropertyDescriptor',\n  'getPrototypeOf',\n  'has',\n  'isExtensible',\n  'ownKeys',\n  'preventExtensions',\n  'set',\n  'setPrototypeOf',\n]\n\n// a list of paramer indexes that indicate that the a recieves a key at that parameter\n// this information will be used to update the path accordingly\nconst keys = {\n  get: 1,\n  set: 1,\n  deleteProperty: 1,\n  has: 1,\n  defineProperty: 1,\n  getOwnPropertyDescriptor: 1,\n}\n\nfunction DeepProxy(rootTarget, traps, options) {\n\n  let path = [];\n  let userData = {};\n\n  if (options !== undefined && typeof options.path !== 'undefined') {\n    path = parsePath(options.path)\n  }\n  if (options !== undefined && typeof options.userData !== 'undefined') {\n    userData = options.userData\n  }\n\n  function createProxy(target, path) {\n\n    // avoid creating a new object between two traps\n    const context = { rootTarget, path };\n    Object.assign(context, userData);\n\n    const realTraps = {};\n\n    for (const trapName of trapNames) {\n      const keyParamIdx = keys[trapName]\n          , trap = traps[trapName];\n\n      if (typeof trap !== 'undefined') {\n\n        if (typeof keyParamIdx !== 'undefined') {\n\n          realTraps[trapName] = function () {\n\n            const key = arguments[keyParamIdx];\n\n            // update context for this trap\n            context.nest = function (nestedTarget) {\n              if (nestedTarget === undefined)\n                nestedTarget = rootTarget;\n              return createProxy(nestedTarget, push(path, key)); \n            }\n\n            return trap.apply(context, arguments);\n          }\n        } else {\n\n          realTraps[trapName] = function () {\n\n            // update context for this trap\n            context.nest = function (nestedTarget) {\n              if (nestedTarget === undefined)\n                nestedTarget = {};\n              return createProxy(nestedTarget, path);\n            }\n\n            return trap.apply(context, arguments);\n          }\n        }\n      }\n    }\n\n    return new Proxy(target, realTraps);\n  }\n\n  return createProxy(rootTarget, path);\n\n}\n\nmodule.exports = DeepProxy;\n", "const niceErrors = {\n    0: `Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'`,\n    1(annotationType, key: PropertyKey) {\n        return `Cannot apply '${annotationType}' to '${key.toString()}': Field not found.`\n    },\n    /*\n    2(prop) {\n        return `invalid decorator for '${prop.toString()}'`\n    },\n    3(prop) {\n        return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`\n    },\n    4(prop) {\n        return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`\n    },\n    */\n    5: \"'keys()' can only be used on observable objects, arrays, sets and maps\",\n    6: \"'values()' can only be used on observable objects, arrays, sets and maps\",\n    7: \"'entries()' can only be used on observable objects, arrays and maps\",\n    8: \"'set()' can only be used on observable objects, arrays and maps\",\n    9: \"'remove()' can only be used on observable objects, arrays and maps\",\n    10: \"'has()' can only be used on observable objects, arrays and maps\",\n    11: \"'get()' can only be used on observable objects, arrays and maps\",\n    12: `Invalid annotation`,\n    13: `Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)`,\n    14: \"Intercept handlers should return nothing or a change object\",\n    15: `Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)`,\n    16: `Modification exception: the internal structure of an observable array was changed.`,\n    17(index, length) {\n        return `[mobx.array] Index out of bounds, ${index} is larger than ${length}`\n    },\n    18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\",\n    19(other) {\n        return \"Cannot initialize from classes that inherit from Map: \" + other.constructor.name\n    },\n    20(other) {\n        return \"Cannot initialize map from \" + other\n    },\n    21(dataStructure) {\n        return `Cannot convert to map from '${dataStructure}'`\n    },\n    22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\",\n    23: \"It is not possible to get index atoms from arrays\",\n    24(thing) {\n        return \"Cannot obtain administration from \" + thing\n    },\n    25(property, name) {\n        return `the entry '${property}' does not exist in the observable map '${name}'`\n    },\n    26: \"please specify a property\",\n    27(property, name) {\n        return `no observable property '${property.toString()}' found on the observable object '${name}'`\n    },\n    28(thing) {\n        return \"Cannot obtain atom from \" + thing\n    },\n    29: \"Expecting some object\",\n    30: \"invalid action stack. did you forget to finish an action?\",\n    31: \"missing option for computed: get\",\n    32(name, derivation) {\n        return `Cycle detected in computation ${name}: ${derivation}`\n    },\n    33(name) {\n        return `The setter of computed value '${name}' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?`\n    },\n    34(name) {\n        return `[ComputedValue '${name}'] It is not possible to assign a new value to a computed value.`\n    },\n    35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\",\n    36: \"isolateGlobalState should be called before MobX is running any reactions\",\n    37(method) {\n        return `[mobx] \\`observableArray.${method}()\\` mutates the array in-place, which is not allowed inside a derivation. Use \\`array.slice().${method}()\\` instead`\n    },\n    38: \"'ownKeys()' can only be used on observable objects\",\n    39: \"'defineProperty()' can only be used on observable objects\"\n} as const\n\nconst errors: typeof niceErrors = __DEV__ ? niceErrors : ({} as any)\n\nexport function die(error: string | keyof typeof errors, ...args: any[]): never {\n    if (__DEV__) {\n        let e: any = typeof error === \"string\" ? error : errors[error]\n        if (typeof e === \"function\") e = e.apply(null, args as any)\n        throw new Error(`[MobX] ${e}`)\n    }\n    throw new Error(\n        typeof error === \"number\"\n            ? `[MobX] minified error nr: ${error}${\n                  args.length ? \" \" + args.map(String).join(\",\") : \"\"\n              }. Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts`\n            : `[MobX] ${error}`\n    )\n}\n", "declare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis\n    }\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n", "import { globalState, die } from \"../internal\"\n\n// We shorten anything used > 5 times\nexport const assign = Object.assign\nexport const getDescriptor = Object.getOwnPropertyDescriptor\nexport const defineProperty = Object.defineProperty\nexport const objectPrototype = Object.prototype\n\nexport const EMPTY_ARRAY = []\nObject.freeze(EMPTY_ARRAY)\n\nexport const EMPTY_OBJECT = {}\nObject.freeze(EMPTY_OBJECT)\n\nexport interface Lambda {\n    (): void\n    name?: string\n}\n\nconst hasProxy = typeof Proxy !== \"undefined\"\nconst plainObjectString = Object.toString()\n\nexport function assertProxies() {\n    if (!hasProxy) {\n        die(\n            __DEV__\n                ? \"`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`\"\n                : \"Proxy not available\"\n        )\n    }\n}\n\nexport function warnAboutProxyRequirement(msg: string) {\n    if (__DEV__ && globalState.verifyProxies) {\n        die(\n            \"MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to \" +\n                msg\n        )\n    }\n}\n\nexport function getNextId() {\n    return ++globalState.mobxGuid\n}\n\n/**\n * Makes sure that the provided function is invoked at most once.\n */\nexport function once(func: Lambda): Lambda {\n    let invoked = false\n    return function () {\n        if (invoked) {\n            return\n        }\n        invoked = true\n        return (func as any).apply(this, arguments)\n    }\n}\n\nexport const noop = () => {}\n\nexport function isFunction(fn: any): fn is Function {\n    return typeof fn === \"function\"\n}\n\nexport function isString(value: any): value is string {\n    return typeof value === \"string\"\n}\n\nexport function isStringish(value: any): value is string | number | symbol {\n    const t = typeof value\n    switch (t) {\n        case \"string\":\n        case \"symbol\":\n        case \"number\":\n            return true\n    }\n    return false\n}\n\nexport function isObject(value: any): value is Object {\n    return value !== null && typeof value === \"object\"\n}\n\nexport function isPlainObject(value: any) {\n    if (!isObject(value)) {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    if (proto == null) {\n        return true\n    }\n    const protoConstructor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n    return (\n        typeof protoConstructor === \"function\" && protoConstructor.toString() === plainObjectString\n    )\n}\n\n// https://stackoverflow.com/a/37865170\nexport function isGenerator(obj: any): boolean {\n    const constructor = obj?.constructor\n    if (!constructor) {\n        return false\n    }\n    if (\n        \"GeneratorFunction\" === constructor.name ||\n        \"GeneratorFunction\" === constructor.displayName\n    ) {\n        return true\n    }\n    return false\n}\n\nexport function addHiddenProp(object: any, propName: PropertyKey, value: any) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value\n    })\n}\n\nexport function addHiddenFinalProp(object: any, propName: PropertyKey, value: any) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value\n    })\n}\n\nexport function createInstanceofPredicate<T>(\n    name: string,\n    theClass: new (...args: any[]) => T\n): (x: any) => x is T {\n    const propName = \"isMobX\" + name\n    theClass.prototype[propName] = true\n    return function (x) {\n        return isObject(x) && x[propName] === true\n    } as any\n}\n\nexport function isES6Map(thing: any): thing is Map<any, any> {\n    return thing != null && Object.prototype.toString.call(thing) === \"[object Map]\"\n}\n\nexport function isPlainES6Map(thing: Map<any, any>): boolean {\n    const mapProto = Object.getPrototypeOf(thing)\n    const objectProto = Object.getPrototypeOf(mapProto)\n    const nullProto = Object.getPrototypeOf(objectProto)\n    return nullProto === null\n}\n\nexport function isES6Set(thing: any): thing is Set<any> {\n    return thing != null && Object.prototype.toString.call(thing) === \"[object Set]\"\n}\n\nconst hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== \"undefined\"\n\n/**\n * Returns the following: own enumerable keys and symbols.\n */\nexport function getPlainObjectKeys(object: any) {\n    const keys = Object.keys(object)\n    // Not supported in IE, so there are not going to be symbol props anyway...\n    if (!hasGetOwnPropertySymbols) {\n        return keys\n    }\n    const symbols = Object.getOwnPropertySymbols(object)\n    if (!symbols.length) {\n        return keys\n    }\n    return [...keys, ...symbols.filter(s => objectPrototype.propertyIsEnumerable.call(object, s))]\n}\n\n// From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\nexport const ownKeys: (target: any) => Array<string | symbol> =\n    typeof Reflect !== \"undefined\" && Reflect.ownKeys\n        ? Reflect.ownKeys\n        : hasGetOwnPropertySymbols\n        ? obj => Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj) as any)\n        : /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport function stringifyKey(key: any): string {\n    if (typeof key === \"string\") {\n        return key\n    }\n    if (typeof key === \"symbol\") {\n        return key.toString()\n    }\n    return new String(key).toString()\n}\n\nexport function toPrimitive(value: any) {\n    return value === null ? null : typeof value === \"object\" ? \"\" + value : value\n}\n\nexport function hasProp(target: Object, prop: PropertyKey): boolean {\n    return objectPrototype.hasOwnProperty.call(target, prop)\n}\n\n// From Immer utils\nexport const getOwnPropertyDescriptors =\n    Object.getOwnPropertyDescriptors ||\n    function getOwnPropertyDescriptors(target: any) {\n        // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n        const res: any = {}\n        // Note: without polyfill for ownKeys, symbols won't be picked up\n        ownKeys(target).forEach(key => {\n            res[key] = getDescriptor(target, key)\n        })\n        return res\n    }\n\nexport function getFlag(flags: number, mask: number) {\n    return !!(flags & mask)\n}\n\nexport function setFlag(flags: number, mask: number, newValue: boolean): number {\n    if (newValue) {\n        flags |= mask\n    } else {\n        flags &= ~mask\n    }\n    return flags\n}\n", "import { Annotation, addHiddenProp, AnnotationsMap, hasProp, die, isOverride } from \"../internal\"\n\nimport type { Decorator } from \"../types/decorator_fills\"\n\nexport const storedAnnotationsSymbol = Symbol(\"mobx-stored-annotations\")\n\n/**\n * Creates a function that acts as\n * - decorator\n * - annotation object\n */\nexport function createDecoratorAnnotation<D extends Decorator = Decorator>(\n    annotation: Annotation\n): PropertyDecorator & Annotation & D {\n    function decorator(target, property) {\n        if (is20223Decorator(property)) {\n            return annotation.decorate_20223_(target, property)\n        } else {\n            storeAnnotation(target, property, annotation)\n        }\n    }\n    return Object.assign(decorator, annotation) as any\n}\n\n/**\n * Stores annotation to prototype,\n * so it can be inspected later by `makeObservable` called from constructor\n */\nexport function storeAnnotation(prototype: any, key: PropertyKey, annotation: Annotation) {\n    if (!hasProp(prototype, storedAnnotationsSymbol)) {\n        addHiddenProp(prototype, storedAnnotationsSymbol, {\n            // Inherit annotations\n            ...prototype[storedAnnotationsSymbol]\n        })\n    }\n    // @override must override something\n    if (__DEV__ && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {\n        const fieldName = `${prototype.constructor.name}.prototype.${key.toString()}`\n        die(\n            `'${fieldName}' is decorated with 'override', ` +\n                `but no such decorated member was found on prototype.`\n        )\n    }\n    // Cannot re-decorate\n    assertNotDecorated(prototype, annotation, key)\n\n    // Ignore override\n    if (!isOverride(annotation)) {\n        prototype[storedAnnotationsSymbol][key] = annotation\n    }\n}\n\nfunction assertNotDecorated(prototype: object, annotation: Annotation, key: PropertyKey) {\n    if (__DEV__ && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {\n        const fieldName = `${prototype.constructor.name}.prototype.${key.toString()}`\n        const currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_\n        const requestedAnnotationType = annotation.annotationType_\n        die(\n            `Cannot apply '@${requestedAnnotationType}' to '${fieldName}':` +\n                `\\nThe field is already decorated with '@${currentAnnotationType}'.` +\n                `\\nRe-decorating fields is not allowed.` +\n                `\\nUse '@override' decorator for methods overridden by subclass.`\n        )\n    }\n}\n\n/**\n * Collects annotations from prototypes and stores them on target (instance)\n */\nexport function collectStoredAnnotations(target): AnnotationsMap<any, any> {\n    if (!hasProp(target, storedAnnotationsSymbol)) {\n        // if (__DEV__ && !target[storedAnnotationsSymbol]) {\n        //     die(\n        //         `No annotations were passed to makeObservable, but no decorated members have been found either`\n        //     )\n        // }\n        // We need a copy as we will remove annotation from the list once it's applied.\n        addHiddenProp(target, storedAnnotationsSymbol, { ...target[storedAnnotationsSymbol] })\n    }\n    return target[storedAnnotationsSymbol]\n}\n\nexport function is20223Decorator(context): context is DecoratorContext {\n    return typeof context == \"object\" && typeof context[\"kind\"] == \"string\"\n}\n\nexport function assert20223DecoratorType(\n    context: DecoratorContext,\n    types: DecoratorContext[\"kind\"][]\n) {\n    if (__DEV__ && !types.includes(context.kind)) {\n        die(\n            `The decorator applied to '${String(context.name)}' cannot be used on a ${\n                context.kind\n            } element`\n        )\n    }\n}\n", "import {\n    IDerivationState_,\n    IObservable,\n    IDerivation,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    noop,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    propagateChanged,\n    reportObserved,\n    startBatch,\n    Lambda\n} from \"../internal\"\n\nimport { getFlag, setFlag } from \"../utils/utils\"\n\nexport const $mobx = Symbol(\"mobx administration\")\n\nexport interface IAtom extends IObservable {\n    reportObserved(): boolean\n    reportChanged(): void\n}\n\nexport class Atom implements IAtom {\n    private static readonly isBeingObservedMask_ = 0b001\n    private static readonly isPendingUnobservationMask_ = 0b010\n    private static readonly diffValueMask_ = 0b100\n    private flags_ = 0b000\n\n    observers_ = new Set<IDerivation>()\n\n    lastAccessedBy_ = 0\n    lowestObserverState_ = IDerivationState_.NOT_TRACKING_\n    /**\n     * Create a new atom. For debugging purposes it is recommended to give it a name.\n     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n     */\n    constructor(public name_ = __DEV__ ? \"Atom@\" + getNextId() : \"Atom\") {}\n\n    // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n    get isBeingObserved(): boolean {\n        return getFlag(this.flags_, Atom.isBeingObservedMask_)\n    }\n    set isBeingObserved(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Atom.isBeingObservedMask_, newValue)\n    }\n\n    get isPendingUnobservation(): boolean {\n        return getFlag(this.flags_, Atom.isPendingUnobservationMask_)\n    }\n    set isPendingUnobservation(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Atom.isPendingUnobservationMask_, newValue)\n    }\n\n    get diffValue(): 0 | 1 {\n        return getFlag(this.flags_, Atom.diffValueMask_) ? 1 : 0\n    }\n    set diffValue(newValue: 0 | 1) {\n        this.flags_ = setFlag(this.flags_, Atom.diffValueMask_, newValue === 1 ? true : false)\n    }\n\n    // onBecomeObservedListeners\n    public onBOL: Set<Lambda> | undefined\n    // onBecomeUnobservedListeners\n    public onBUOL: Set<Lambda> | undefined\n\n    public onBO() {\n        if (this.onBOL) {\n            this.onBOL.forEach(listener => listener())\n        }\n    }\n\n    public onBUO() {\n        if (this.onBUOL) {\n            this.onBUOL.forEach(listener => listener())\n        }\n    }\n\n    /**\n     * Invoke this method to notify mobx that your atom has been used somehow.\n     * Returns true if there is currently a reactive context.\n     */\n    public reportObserved(): boolean {\n        return reportObserved(this)\n    }\n\n    /**\n     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\n     */\n    public reportChanged() {\n        startBatch()\n        propagateChanged(this)\n        endBatch()\n    }\n\n    toString() {\n        return this.name_\n    }\n}\n\nexport const isAtom = createInstanceofPredicate(\"Atom\", Atom)\n\nexport function createAtom(\n    name: string,\n    onBecomeObservedHandler: () => void = noop,\n    onBecomeUnobservedHandler: () => void = noop\n): IAtom {\n    const atom = new Atom(name)\n    // default `noop` listener will not initialize the hook Set\n    if (onBecomeObservedHandler !== noop) {\n        onBecomeObserved(atom, onBecomeObservedHandler)\n    }\n\n    if (onBecomeUnobservedHandler !== noop) {\n        onBecomeUnobserved(atom, onBecomeUnobservedHandler)\n    }\n    return atom\n}\n", "import { deepEqual } from \"../internal\"\n\nexport interface IEqualsComparer<T> {\n    (a: T, b: T): boolean\n}\n\nfunction identityComparer(a: any, b: any): boolean {\n    return a === b\n}\n\nfunction structuralComparer(a: any, b: any): boolean {\n    return deepEqual(a, b)\n}\n\nfunction shallowComparer(a: any, b: any): boolean {\n    return deepEqual(a, b, 1)\n}\n\nfunction defaultComparer(a: any, b: any): boolean {\n    if (Object.is) {\n        return Object.is(a, b)\n    }\n\n    return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b\n}\n\nexport const comparer = {\n    identity: identityComparer,\n    structural: structuralComparer,\n    default: defaultComparer,\n    shallow: shallowComparer\n}\n", "import {\n    deepEqual,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    isPlainObject,\n    observable,\n    die,\n    isAction,\n    autoAction,\n    flow,\n    isFlow,\n    isGenerator\n} from \"../internal\"\n\nexport interface IEnhancer<T> {\n    (newValue: T, oldValue: T | undefined, name: string): T\n}\n\nexport function deepEnhancer(v, _, name) {\n    // it is an observable already, done\n    if (isObservable(v)) {\n        return v\n    }\n\n    // something that can be converted and mutated?\n    if (Array.isArray(v)) {\n        return observable.array(v, { name })\n    }\n    if (isPlainObject(v)) {\n        return observable.object(v, undefined, { name })\n    }\n    if (isES6Map(v)) {\n        return observable.map(v, { name })\n    }\n    if (isES6Set(v)) {\n        return observable.set(v, { name })\n    }\n    if (typeof v === \"function\" && !isAction(v) && !isFlow(v)) {\n        if (isGenerator(v)) {\n            return flow(v)\n        } else {\n            return autoAction(name, v)\n        }\n    }\n    return v\n}\n\nexport function shallowEnhancer(v, _, name): any {\n    if (v === undefined || v === null) {\n        return v\n    }\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {\n        return v\n    }\n    if (Array.isArray(v)) {\n        return observable.array(v, { name, deep: false })\n    }\n    if (isPlainObject(v)) {\n        return observable.object(v, undefined, { name, deep: false })\n    }\n    if (isES6Map(v)) {\n        return observable.map(v, { name, deep: false })\n    }\n    if (isES6Set(v)) {\n        return observable.set(v, { name, deep: false })\n    }\n\n    if (__DEV__) {\n        die(\n            \"The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets\"\n        )\n    }\n}\n\nexport function referenceEnhancer(newValue?) {\n    // never turn into an observable\n    return newValue\n}\n\nexport function refStructEnhancer(v, oldValue): any {\n    if (__DEV__ && isObservable(v)) {\n        die(`observable.struct should not be used with observable values`)\n    }\n    if (deepEqual(v, oldValue)) {\n        return oldValue\n    }\n    return v\n}\n", "import {\n    die,\n    Annotation,\n    hasProp,\n    createDecoratorAnnotation,\n    ObservableObjectAdministration,\n    MakeResult\n} from \"../internal\"\n\nimport type { ClassMethodDecorator } from \"./decorator_fills\"\n\nconst OVERRIDE = \"override\"\n\nexport const override: Annotation & PropertyDecorator & ClassMethodDecorator =\n    createDecoratorAnnotation({\n        annotationType_: OVERRIDE,\n        make_,\n        extend_,\n        decorate_20223_\n    })\n\nexport function isOverride(annotation: Annotation): boolean {\n    return annotation.annotationType_ === OVERRIDE\n}\n\nfunction make_(this: Annotation, adm: ObservableObjectAdministration, key): MakeResult {\n    // Must not be plain object\n    if (__DEV__ && adm.isPlainObject_) {\n        die(\n            `Cannot apply '${this.annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${this.annotationType_}' cannot be used on plain objects.`\n        )\n    }\n    // Must override something\n    if (__DEV__ && !hasProp(adm.appliedAnnotations_!, key)) {\n        die(\n            `'${adm.name_}.${key.toString()}' is annotated with '${this.annotationType_}', ` +\n                `but no such annotated member was found on prototype.`\n        )\n    }\n    return MakeResult.Cancel\n}\n\nfunction extend_(this: Annotation, adm, key, descriptor, proxyTrap): boolean {\n    die(`'${this.annotationType_}' can only be used with 'makeObservable'`)\n}\n\nfunction decorate_20223_(this: Annotation, desc, context: DecoratorContext) {\n    console.warn(`'${this.annotationType_}' cannot be used with decorators - this is a no-op`)\n}\n", "import {\n    ObservableObjectAdministration,\n    createAction,\n    isAction,\n    defineProperty,\n    die,\n    isFunction,\n    Annotation,\n    globalState,\n    MakeResult,\n    assert20223DecoratorType,\n    storeAnnotation\n} from \"../internal\"\n\nexport function createActionAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // bound\n    if (this.options_?.bound) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Break\n    }\n    // own\n    if (source === adm.target_) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Continue\n    }\n    // prototype\n    if (isAction(descriptor.value)) {\n        // A prototype could have been annotated already by other constructor,\n        // rest of the proto chain must be annotated already\n        return MakeResult.Break\n    }\n    const actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false)\n    defineProperty(source, key, actionDescriptor)\n    return MakeResult.Continue\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    const actionDescriptor = createActionDescriptor(adm, this, key, descriptor)\n    return adm.defineProperty_(key, actionDescriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, mthd, context: DecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"method\", \"field\"])\n    }\n    const { kind, name, addInitializer } = context\n    const ann = this\n\n    const _createAction = m =>\n        createAction(ann.options_?.name ?? name!.toString(), m, ann.options_?.autoAction ?? false)\n\n    // Backwards/Legacy behavior, expects makeObservable(this)\n    if (kind == \"field\") {\n        addInitializer(function () {\n            storeAnnotation(this, name, ann)\n        })\n        return\n    }\n\n    if (kind == \"method\") {\n        if (!isAction(mthd)) {\n            mthd = _createAction(mthd)\n        }\n\n        if (this.options_?.bound) {\n            addInitializer(function () {\n                const self = this as any\n                const bound = self[name].bind(self)\n                bound.isMobxAction = true\n                self[name] = bound\n            })\n        }\n\n        return mthd\n    }\n\n    die(\n        `Cannot apply '${ann.annotationType_}' to '${String(name)}' (kind: ${kind}):` +\n            `\\n'${ann.annotationType_}' can only be used on properties with a function value.`\n    )\n}\n\nfunction assertActionDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { value }: PropertyDescriptor\n) {\n    if (__DEV__ && !isFunction(value)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on properties with a function value.`\n        )\n    }\n}\n\nexport function createActionDescriptor(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    // provides ability to disable safeDescriptors for prototypes\n    safeDescriptors: boolean = globalState.safeDescriptors\n) {\n    assertActionDescriptor(adm, annotation, key, descriptor)\n    let { value } = descriptor\n    if (annotation.options_?.bound) {\n        value = value.bind(adm.proxy_ ?? adm.target_)\n    }\n    return {\n        value: createAction(\n            annotation.options_?.name ?? key.toString(),\n            value,\n            annotation.options_?.autoAction ?? false,\n            // https://github.com/mobxjs/mobx/discussions/3140\n            annotation.options_?.bound ? adm.proxy_ ?? adm.target_ : undefined\n        ),\n        // Non-configurable for classes\n        // prevents accidental field redefinition in subclass\n        configurable: safeDescriptors ? adm.isPlainObject_ : true,\n        // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n        enumerable: false,\n        // Non-obsevable, therefore non-writable\n        // Also prevents rewriting in subclass constructor\n        writable: safeDescriptors ? false : true\n    }\n}\n", "import {\n    ObservableObjectAdministration,\n    Annotation,\n    defineProperty,\n    die,\n    flow,\n    isFlow,\n    isFunction,\n    globalState,\n    MakeResult,\n    hasProp,\n    assert20223DecoratorType\n} from \"../internal\"\n\nexport function createFlowAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // own\n    if (source === adm.target_) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Continue\n    }\n    // prototype\n    // bound - must annotate protos to support super.flow()\n    if (this.options_?.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {\n        if (this.extend_(adm, key, descriptor, false) === null) {\n            return MakeResult.Cancel\n        }\n    }\n    if (isFlow(descriptor.value)) {\n        // A prototype could have been annotated already by other constructor,\n        // rest of the proto chain must be annotated already\n        return MakeResult.Break\n    }\n    const flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false)\n    defineProperty(source, key, flowDescriptor)\n    return MakeResult.Continue\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    const flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, this.options_?.bound)\n    return adm.defineProperty_(key, flowDescriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, mthd, context: ClassMethodDecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"method\"])\n    }\n    const { name, addInitializer } = context\n\n    if (!isFlow(mthd)) {\n        mthd = flow(mthd)\n    }\n\n    if (this.options_?.bound) {\n        addInitializer(function () {\n            const self = this as any\n            const bound = self[name].bind(self)\n            bound.isMobXFlow = true\n            self[name] = bound\n        })\n    }\n\n    return mthd\n}\n\nfunction assertFlowDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { value }: PropertyDescriptor\n) {\n    if (__DEV__ && !isFunction(value)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on properties with a generator function value.`\n        )\n    }\n}\n\nfunction createFlowDescriptor(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    bound: boolean,\n    // provides ability to disable safeDescriptors for prototypes\n    safeDescriptors: boolean = globalState.safeDescriptors\n): PropertyDescriptor {\n    assertFlowDescriptor(adm, annotation, key, descriptor)\n    let { value } = descriptor\n    // In case of flow.bound, the descriptor can be from already annotated prototype\n    if (!isFlow(value)) {\n        value = flow(value)\n    }\n    if (bound) {\n        // We do not keep original function around, so we bind the existing flow\n        value = value.bind(adm.proxy_ ?? adm.target_)\n        // This is normally set by `flow`, but `bind` returns new function...\n        value.isMobXFlow = true\n    }\n    return {\n        value,\n        // Non-configurable for classes\n        // prevents accidental field redefinition in subclass\n        configurable: safeDescriptors ? adm.isPlainObject_ : true,\n        // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n        enumerable: false,\n        // Non-obsevable, therefore non-writable\n        // Also prevents rewriting in subclass constructor\n        writable: safeDescriptors ? false : true\n    }\n}\n", "import {\n    ObservableObjectAdministration,\n    die,\n    Annotation,\n    MakeResult,\n    assert20223DecoratorType,\n    $mobx,\n    asObservableObject,\n    ComputedValue\n} from \"../internal\"\n\nexport function createComputedAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n): MakeResult {\n    return this.extend_(adm, key, descriptor, false) === null ? MakeResult.Cancel : MakeResult.Break\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    assertComputedDescriptor(adm, this, key, descriptor)\n    return adm.defineComputedProperty_(\n        key,\n        {\n            ...this.options_,\n            get: descriptor.get,\n            set: descriptor.set\n        },\n        proxyTrap\n    )\n}\n\nfunction decorate_20223_(this: Annotation, get, context: ClassGetterDecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"getter\"])\n    }\n    const ann = this\n    const { name: key, addInitializer } = context\n\n    addInitializer(function () {\n        const adm: ObservableObjectAdministration = asObservableObject(this)[$mobx]\n        const options = {\n            ...ann.options_,\n            get,\n            context: this\n        }\n        options.name ||= __DEV__\n            ? `${adm.name_}.${key.toString()}`\n            : `ObservableObject.${key.toString()}`\n        adm.values_.set(key, new ComputedValue(options))\n    })\n\n    return function () {\n        return this[$mobx].getObservablePropValue_(key)\n    }\n}\n\nfunction assertComputedDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { get }: PropertyDescriptor\n) {\n    if (__DEV__ && !get) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on getter(+setter) properties.`\n        )\n    }\n}\n", "import {\n    ObservableObjectAdministration,\n    deepEnhancer,\n    die,\n    Annotation,\n    MakeResult,\n    assert20223DecoratorType,\n    ObservableValue,\n    asObservableObject,\n    $mobx\n} from \"../internal\"\n\nexport function createObservableAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n): MakeResult {\n    return this.extend_(adm, key, descriptor, false) === null ? MakeResult.Cancel : MakeResult.Break\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    assertObservableDescriptor(adm, this, key, descriptor)\n    return adm.defineObservableProperty_(\n        key,\n        descriptor.value,\n        this.options_?.enhancer ?? deepEnhancer,\n        proxyTrap\n    )\n}\n\nfunction decorate_20223_(\n    this: Annotation,\n    desc,\n    context: ClassAccessorDecoratorContext | ClassFieldDecoratorContext\n) {\n    if (__DEV__) {\n        if (context.kind === \"field\") {\n            throw die(\n                `Please use \\`@observable accessor ${String(\n                    context.name\n                )}\\` instead of \\`@observable ${String(context.name)}\\``\n            )\n        }\n        assert20223DecoratorType(context, [\"accessor\"])\n    }\n\n    const ann = this\n    const { kind, name } = context\n\n    // The laziness here is not ideal... It's a workaround to how 2022.3 Decorators are implemented:\n    //   `addInitializer` callbacks are executed _before_ any accessors are defined (instead of the ideal-for-us right after each).\n    //   This means that, if we were to do our stuff in an `addInitializer`, we'd attempt to read a private slot\n    //   before it has been initialized. The runtime doesn't like that and throws a `Cannot read private member\n    //   from an object whose class did not declare it` error.\n    // TODO: it seems that this will not be required anymore in the final version of the spec\n    // See TODO: link\n    const initializedObjects = new WeakSet()\n\n    function initializeObservable(target, value) {\n        const adm: ObservableObjectAdministration = asObservableObject(target)[$mobx]\n        const observable = new ObservableValue(\n            value,\n            ann.options_?.enhancer ?? deepEnhancer,\n            __DEV__ ? `${adm.name_}.${name.toString()}` : `ObservableObject.${name.toString()}`,\n            false\n        )\n        adm.values_.set(name, observable)\n        initializedObjects.add(target)\n    }\n\n    if (kind == \"accessor\") {\n        return {\n            get() {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, desc.get.call(this))\n                }\n                return this[$mobx].getObservablePropValue_(name)\n            },\n            set(value) {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, value)\n                }\n                return this[$mobx].setObservablePropValue_(name, value)\n            },\n            init(value) {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, value)\n                }\n                return value\n            }\n        }\n    }\n\n    return\n}\n\nfunction assertObservableDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n) {\n    if (__DEV__ && !(\"value\" in descriptor)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' cannot be used on getter/setter properties`\n        )\n    }\n}\n", "import {\n    ObservableObjectAdministration,\n    observable,\n    Annotation,\n    defineProperty,\n    createAction,\n    globalState,\n    flow,\n    computed,\n    autoAction,\n    isGenerator,\n    MakeResult,\n    die\n} from \"../internal\"\n\nconst AUTO = \"true\"\n\nexport const autoAnnotation: Annotation = createAutoAnnotation()\n\nexport function createAutoAnnotation(options?: object): Annotation {\n    return {\n        annotationType_: AUTO,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // getter -> computed\n    if (descriptor.get) {\n        return computed.make_(adm, key, descriptor, source)\n    }\n    // lone setter -> action setter\n    if (descriptor.set) {\n        // TODO make action applicable to setter and delegate to action.make_\n        const set = createAction(key.toString(), descriptor.set) as (v: any) => void\n        // own\n        if (source === adm.target_) {\n            return adm.defineProperty_(key, {\n                configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n                set\n            }) === null\n                ? MakeResult.Cancel\n                : MakeResult.Continue\n        }\n        // proto\n        defineProperty(source, key, {\n            configurable: true,\n            set\n        })\n        return MakeResult.Continue\n    }\n    // function on proto -> autoAction/flow\n    if (source !== adm.target_ && typeof descriptor.value === \"function\") {\n        if (isGenerator(descriptor.value)) {\n            const flowAnnotation = this.options_?.autoBind ? flow.bound : flow\n            return flowAnnotation.make_(adm, key, descriptor, source)\n        }\n        const actionAnnotation = this.options_?.autoBind ? autoAction.bound : autoAction\n        return actionAnnotation.make_(adm, key, descriptor, source)\n    }\n    // other -> observable\n    // Copy props from proto as well, see test:\n    // \"decorate should work with Object.create\"\n    let observableAnnotation = this.options_?.deep === false ? observable.ref : observable\n    // if function respect autoBind option\n    if (typeof descriptor.value === \"function\" && this.options_?.autoBind) {\n        descriptor.value = descriptor.value.bind(adm.proxy_ ?? adm.target_)\n    }\n    return observableAnnotation.make_(adm, key, descriptor, source)\n}\n\nfunction extend_(\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    // getter -> computed\n    if (descriptor.get) {\n        return computed.extend_(adm, key, descriptor, proxyTrap)\n    }\n    // lone setter -> action setter\n    if (descriptor.set) {\n        // TODO make action applicable to setter and delegate to action.extend_\n        return adm.defineProperty_(\n            key,\n            {\n                configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n                set: createAction(key.toString(), descriptor.set) as (v: any) => void\n            },\n            proxyTrap\n        )\n    }\n    // other -> observable\n    // if function respect autoBind option\n    if (typeof descriptor.value === \"function\" && this.options_?.autoBind) {\n        descriptor.value = descriptor.value.bind(adm.proxy_ ?? adm.target_)\n    }\n    let observableAnnotation = this.options_?.deep === false ? observable.ref : observable\n    return observableAnnotation.extend_(adm, key, descriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, desc, context: ClassGetterDecoratorContext) {\n    die(`'${this.annotationType_}' cannot be used as a decorator`)\n}\n", "import {\n    IEnhancer,\n    IEqualsComparer,\n    IObservableArray,\n    IObservableMapInitialValues,\n    IObservableSetInitialValues,\n    IObservableValue,\n    ObservableMap,\n    ObservableSet,\n    ObservableValue,\n    asDynamicObservableObject,\n    createObservableArray,\n    deepEnhancer,\n    extendObservable,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isPlainObject,\n    referenceEnhancer,\n    Annotation,\n    shallowEnhancer,\n    refStructEnhancer,\n    AnnotationsMap,\n    asObservableObject,\n    storeAnnotation,\n    createDecoratorAnnotation,\n    createLegacyArray,\n    globalState,\n    assign,\n    isStringish,\n    createObservableAnnotation,\n    createAutoAnnotation,\n    is20223Decorator,\n    initObservable\n} from \"../internal\"\n\nimport type { ClassAccessorDecorator, ClassFieldDecorator } from \"../types/decorator_fills\"\n\nexport const OBSERVABLE = \"observable\"\nexport const OBSERVABLE_REF = \"observable.ref\"\nexport const OBSERVABLE_SHALLOW = \"observable.shallow\"\nexport const OBSERVABLE_STRUCT = \"observable.struct\"\n\nexport type CreateObservableOptions = {\n    name?: string\n    equals?: IEqualsComparer<any>\n    deep?: boolean\n    defaultDecorator?: Annotation\n    proxy?: boolean\n    autoBind?: boolean\n}\n\n// Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\nexport const defaultCreateObservableOptions: CreateObservableOptions = {\n    deep: true,\n    name: undefined,\n    defaultDecorator: undefined,\n    proxy: true\n}\nObject.freeze(defaultCreateObservableOptions)\n\nexport function asCreateObservableOptions(thing: any): CreateObservableOptions {\n    return thing || defaultCreateObservableOptions\n}\n\nconst observableAnnotation = createObservableAnnotation(OBSERVABLE)\nconst observableRefAnnotation = createObservableAnnotation(OBSERVABLE_REF, {\n    enhancer: referenceEnhancer\n})\nconst observableShallowAnnotation = createObservableAnnotation(OBSERVABLE_SHALLOW, {\n    enhancer: shallowEnhancer\n})\nconst observableStructAnnotation = createObservableAnnotation(OBSERVABLE_STRUCT, {\n    enhancer: refStructEnhancer\n})\nconst observableDecoratorAnnotation =\n    createDecoratorAnnotation<ClassAccessorDecorator>(observableAnnotation)\n\nexport function getEnhancerFromOptions(options: CreateObservableOptions): IEnhancer<any> {\n    return options.deep === true\n        ? deepEnhancer\n        : options.deep === false\n        ? referenceEnhancer\n        : getEnhancerFromAnnotation(options.defaultDecorator)\n}\n\nexport function getAnnotationFromOptions(\n    options?: CreateObservableOptions\n): Annotation | undefined {\n    return options ? options.defaultDecorator ?? createAutoAnnotation(options) : undefined\n}\n\nexport function getEnhancerFromAnnotation(annotation?: Annotation): IEnhancer<any> {\n    return !annotation ? deepEnhancer : annotation.options_?.enhancer ?? deepEnhancer\n}\n\n/**\n * Turns an object, array or function into a reactive structure.\n * @param v the value which should become observable.\n */\nfunction createObservable(v: any, arg2?: any, arg3?: any) {\n    // @observable someProp; (2022.3 Decorators)\n    if (is20223Decorator(arg2)) {\n        return observableAnnotation.decorate_20223_(v, arg2)\n    }\n\n    // @observable someProp;\n    if (isStringish(arg2)) {\n        storeAnnotation(v, arg2, observableAnnotation)\n        return\n    }\n\n    // already observable - ignore\n    if (isObservable(v)) {\n        return v\n    }\n\n    // plain object\n    if (isPlainObject(v)) {\n        return observable.object(v, arg2, arg3)\n    }\n\n    // Array\n    if (Array.isArray(v)) {\n        return observable.array(v, arg2)\n    }\n\n    // Map\n    if (isES6Map(v)) {\n        return observable.map(v, arg2)\n    }\n\n    // Set\n    if (isES6Set(v)) {\n        return observable.set(v, arg2)\n    }\n\n    // other object - ignore\n    if (typeof v === \"object\" && v !== null) {\n        return v\n    }\n\n    // anything else\n    return observable.box(v, arg2)\n}\nassign(createObservable, observableDecoratorAnnotation)\n\nexport interface IObservableValueFactory {\n    <T>(value: T, options?: CreateObservableOptions): IObservableValue<T>\n    <T>(value?: T, options?: CreateObservableOptions): IObservableValue<T | undefined>\n}\n\nexport interface IObservableFactory\n    extends Annotation,\n        PropertyDecorator,\n        ClassAccessorDecorator,\n        ClassFieldDecorator {\n    // TODO: remove ClassFieldDecorator, this is only temporarily support for legacy decorators\n    <T = any>(value: T[], options?: CreateObservableOptions): IObservableArray<T>\n    <T = any>(value: Set<T>, options?: CreateObservableOptions): ObservableSet<T>\n    <K = any, V = any>(value: Map<K, V>, options?: CreateObservableOptions): ObservableMap<K, V>\n    <T extends object>(\n        value: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ): T\n\n    box: IObservableValueFactory\n    array: <T = any>(initialValues?: T[], options?: CreateObservableOptions) => IObservableArray<T>\n    set: <T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ) => ObservableSet<T>\n    map: <K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ) => ObservableMap<K, V>\n    object: <T = any>(\n        props: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ) => T\n\n    /**\n     * Decorator that creates an observable that only observes the references, but doesn't try to turn the assigned value into an observable.ts.\n     */\n    ref: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    /**\n     * Decorator that creates an observable converts its value (objects, maps or arrays) into a shallow observable structure\n     */\n    shallow: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    deep: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    struct: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n}\n\nconst observableFactories: IObservableFactory = {\n    box<T = any>(value: T, options?: CreateObservableOptions): IObservableValue<T> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals)\n    },\n    array<T = any>(initialValues?: T[], options?: CreateObservableOptions): IObservableArray<T> {\n        const o = asCreateObservableOptions(options)\n        return (\n            globalState.useProxies === false || o.proxy === false\n                ? createLegacyArray\n                : createObservableArray\n        )(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    map<K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ): ObservableMap<K, V> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableMap<K, V>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    set<T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ): ObservableSet<T> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableSet<T>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    object<T extends object = any>(\n        props: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ): T {\n        return initObservable(() =>\n            extendObservable(\n                globalState.useProxies === false || options?.proxy === false\n                    ? asObservableObject({}, options)\n                    : asDynamicObservableObject({}, options),\n                props,\n                decorators\n            )\n        )\n    },\n    ref: createDecoratorAnnotation(observableRefAnnotation),\n    shallow: createDecoratorAnnotation(observableShallowAnnotation),\n    deep: observableDecoratorAnnotation,\n    struct: createDecoratorAnnotation(observableStructAnnotation)\n} as any\n\n// eslint-disable-next-line\nexport var observable: IObservableFactory = assign(createObservable, observableFactories)\n", "import {\n    ComputedValue,\n    IComputedValueOptions,\n    Annotation,\n    storeAnnotation,\n    createDecoratorAnnotation,\n    isStringish,\n    isPlainObject,\n    isFunction,\n    die,\n    IComputedValue,\n    createComputedAnnotation,\n    comparer,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassGetterDecorator } from \"../types/decorator_fills\"\n\nexport const COMPUTED = \"computed\"\nexport const COMPUTED_STRUCT = \"computed.struct\"\n\nexport interface IComputedFactory extends Annotation, PropertyDecorator, ClassGetterDecorator {\n    // @computed(opts)\n    <T>(options: IComputedValueOptions<T>): Annotation & PropertyDecorator & ClassGetterDecorator\n    // computed(fn, opts)\n    <T>(func: () => T, options?: IComputedValueOptions<T>): IComputedValue<T>\n\n    struct: Annotation & PropertyDecorator & ClassGetterDecorator\n}\n\nconst computedAnnotation = createComputedAnnotation(COMPUTED)\nconst computedStructAnnotation = createComputedAnnotation(COMPUTED_STRUCT, {\n    equals: comparer.structural\n})\n\n/**\n * Decorator for class properties: @computed get value() { return expr; }.\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\n */\nexport const computed: IComputedFactory = function computed(arg1, arg2) {\n    if (is20223Decorator(arg2)) {\n        // @computed (2022.3 Decorators)\n        return computedAnnotation.decorate_20223_(arg1, arg2)\n    }\n    if (isStringish(arg2)) {\n        // @computed\n        return storeAnnotation(arg1, arg2, computedAnnotation)\n    }\n    if (isPlainObject(arg1)) {\n        // @computed({ options })\n        return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1))\n    }\n\n    // computed(expr, options?)\n    if (__DEV__) {\n        if (!isFunction(arg1)) {\n            die(\"First argument to `computed` should be an expression.\")\n        }\n        if (isFunction(arg2)) {\n            die(\n                \"A setter as second argument is no longer supported, use `{ set: fn }` option instead\"\n            )\n        }\n    }\n    const opts: IComputedValueOptions<any> = isPlainObject(arg2) ? arg2 : {}\n    opts.get = arg1\n    opts.name ||= arg1.name || \"\" /* for generated name */\n\n    return new ComputedValue(opts)\n} as any\n\nObject.assign(computed, computedAnnotation)\n\ncomputed.struct = createDecoratorAnnotation(computedStructAnnotation)\n", "import {\n    IDerivation,\n    endBatch,\n    globalState,\n    isSpyEnabled,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    untrackedEnd,\n    untrackedStart,\n    isFunction,\n    allowStateReadsStart,\n    allowStateReadsEnd,\n    ACTION,\n    EMPTY_ARRAY,\n    die,\n    getDescriptor,\n    defineProperty\n} from \"../internal\"\n\n// we don't use globalState for these in order to avoid possible issues with multiple\n// mobx versions\nlet currentActionId = 0\nlet nextActionId = 1\nconst isFunctionNameConfigurable = getDescriptor(() => {}, \"name\")?.configurable ?? false\n\n// we can safely recycle this object\nconst tmpNameDescriptor: PropertyDescriptor = {\n    value: \"action\",\n    configurable: true,\n    writable: false,\n    enumerable: false\n}\n\nexport function createAction(\n    actionName: string,\n    fn: Function,\n    autoAction: boolean = false,\n    ref?: Object\n): Function {\n    if (__DEV__) {\n        if (!isFunction(fn)) {\n            die(\"`action` can only be invoked on functions\")\n        }\n        if (typeof actionName !== \"string\" || !actionName) {\n            die(`actions should have valid names, got: '${actionName}'`)\n        }\n    }\n    function res() {\n        return executeAction(actionName, autoAction, fn, ref || this, arguments)\n    }\n    res.isMobxAction = true\n    res.toString = () => fn.toString()\n    if (isFunctionNameConfigurable) {\n        tmpNameDescriptor.value = actionName\n        defineProperty(res, \"name\", tmpNameDescriptor)\n    }\n    return res\n}\n\nexport function executeAction(\n    actionName: string,\n    canRunAsDerivation: boolean,\n    fn: Function,\n    scope?: any,\n    args?: IArguments\n) {\n    const runInfo = _startAction(actionName, canRunAsDerivation, scope, args)\n    try {\n        return fn.apply(scope, args)\n    } catch (err) {\n        runInfo.error_ = err\n        throw err\n    } finally {\n        _endAction(runInfo)\n    }\n}\n\nexport interface IActionRunInfo {\n    prevDerivation_: IDerivation | null\n    prevAllowStateChanges_: boolean\n    prevAllowStateReads_: boolean\n    notifySpy_: boolean\n    startTime_: number\n    error_?: any\n    parentActionId_: number\n    actionId_: number\n    runAsAction_?: boolean\n}\n\nexport function _startAction(\n    actionName: string,\n    canRunAsDerivation: boolean, // true for autoAction\n    scope: any,\n    args?: IArguments\n): IActionRunInfo {\n    const notifySpy_ = __DEV__ && isSpyEnabled() && !!actionName\n    let startTime_: number = 0\n    if (__DEV__ && notifySpy_) {\n        startTime_ = Date.now()\n        const flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY\n        spyReportStart({\n            type: ACTION,\n            name: actionName,\n            object: scope,\n            arguments: flattenedArgs\n        })\n    }\n    const prevDerivation_ = globalState.trackingDerivation\n    const runAsAction = !canRunAsDerivation || !prevDerivation_\n    startBatch()\n    let prevAllowStateChanges_ = globalState.allowStateChanges // by default preserve previous allow\n    if (runAsAction) {\n        untrackedStart()\n        prevAllowStateChanges_ = allowStateChangesStart(true)\n    }\n    const prevAllowStateReads_ = allowStateReadsStart(true)\n    const runInfo = {\n        runAsAction_: runAsAction,\n        prevDerivation_,\n        prevAllowStateChanges_,\n        prevAllowStateReads_,\n        notifySpy_,\n        startTime_,\n        actionId_: nextActionId++,\n        parentActionId_: currentActionId\n    }\n    currentActionId = runInfo.actionId_\n    return runInfo\n}\n\nexport function _endAction(runInfo: IActionRunInfo) {\n    if (currentActionId !== runInfo.actionId_) {\n        die(30)\n    }\n    currentActionId = runInfo.parentActionId_\n\n    if (runInfo.error_ !== undefined) {\n        globalState.suppressReactionErrors = true\n    }\n    allowStateChangesEnd(runInfo.prevAllowStateChanges_)\n    allowStateReadsEnd(runInfo.prevAllowStateReads_)\n    endBatch()\n    if (runInfo.runAsAction_) {\n        untrackedEnd(runInfo.prevDerivation_)\n    }\n    if (__DEV__ && runInfo.notifySpy_) {\n        spyReportEnd({ time: Date.now() - runInfo.startTime_ })\n    }\n    globalState.suppressReactionErrors = false\n}\n\nexport function allowStateChanges<T>(allowStateChanges: boolean, func: () => T): T {\n    const prev = allowStateChangesStart(allowStateChanges)\n    try {\n        return func()\n    } finally {\n        allowStateChangesEnd(prev)\n    }\n}\n\nexport function allowStateChangesStart(allowStateChanges: boolean) {\n    const prev = globalState.allowStateChanges\n    globalState.allowStateChanges = allowStateChanges\n    return prev\n}\n\nexport function allowStateChangesEnd(prev: boolean) {\n    globalState.allowStateChanges = prev\n}\n", "import {\n    Atom,\n    IEnhancer,\n    IInterceptable,\n    IEqualsComparer,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    checkIfStateModificationsAreAllowed,\n    comparer,\n    createInstanceofPredicate,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    toPrimitive,\n    globalState,\n    IUNCHANGED,\n    UPDATE\n} from \"../internal\"\n\nexport interface IValueWillChange<T> {\n    object: IObservableValue<T>\n    type: \"update\"\n    newValue: T\n}\n\nexport type IValueDidChange<T = any> = {\n    type: \"update\"\n    observableKind: \"value\"\n    object: IObservableValue<T>\n    debugObjectName: string\n    newValue: T\n    oldValue: T | undefined\n}\nexport type IBoxDidChange<T = any> =\n    | {\n          type: \"create\"\n          observableKind: \"value\"\n          object: IObservableValue<T>\n          debugObjectName: string\n          newValue: T\n      }\n    | IValueDidChange<T>\n\nexport interface IObservableValue<T> {\n    get(): T\n    set(value: T): void\n}\n\nconst CREATE = \"create\"\n\nexport class ObservableValue<T>\n    extends Atom\n    implements IObservableValue<T>, IInterceptable<IValueWillChange<T>>, IListenable\n{\n    hasUnreportedChange_ = false\n    interceptors_\n    changeListeners_\n    value_\n    dehancer: any\n\n    constructor(\n        value: T,\n        public enhancer: IEnhancer<T>,\n        public name_ = __DEV__ ? \"ObservableValue@\" + getNextId() : \"ObservableValue\",\n        notifySpy = true,\n        private equals: IEqualsComparer<any> = comparer.default\n    ) {\n        super(name_)\n        this.value_ = enhancer(value, undefined, name_)\n        if (__DEV__ && notifySpy && isSpyEnabled()) {\n            // only notify spy if this is a stand-alone observable\n            spyReport({\n                type: CREATE,\n                object: this,\n                observableKind: \"value\",\n                debugObjectName: this.name_,\n                newValue: \"\" + this.value_\n            })\n        }\n    }\n\n    private dehanceValue(value: T): T {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    public set(newValue: T) {\n        const oldValue = this.value_\n        newValue = this.prepareNewValue_(newValue) as any\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            if (__DEV__ && notifySpy) {\n                spyReportStart({\n                    type: UPDATE,\n                    object: this,\n                    observableKind: \"value\",\n                    debugObjectName: this.name_,\n                    newValue,\n                    oldValue\n                })\n            }\n            this.setNewValue_(newValue)\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n    }\n\n    private prepareNewValue_(newValue): T | IUNCHANGED {\n        checkIfStateModificationsAreAllowed(this)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IValueWillChange<T>>(this, {\n                object: this,\n                type: UPDATE,\n                newValue\n            })\n            if (!change) {\n                return globalState.UNCHANGED\n            }\n            newValue = change.newValue\n        }\n        // apply modifier\n        newValue = this.enhancer(newValue, this.value_, this.name_)\n        return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue\n    }\n\n    setNewValue_(newValue: T) {\n        const oldValue = this.value_\n        this.value_ = newValue\n        this.reportChanged()\n        if (hasListeners(this)) {\n            notifyListeners(this, {\n                type: UPDATE,\n                object: this,\n                newValue,\n                oldValue\n            })\n        }\n    }\n\n    public get(): T {\n        this.reportObserved()\n        return this.dehanceValue(this.value_)\n    }\n\n    intercept_(handler: IInterceptor<IValueWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    observe_(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        if (fireImmediately) {\n            listener({\n                observableKind: \"value\",\n                debugObjectName: this.name_,\n                object: this,\n                type: UPDATE,\n                newValue: this.value_,\n                oldValue: undefined\n            })\n        }\n        return registerListener(this, listener)\n    }\n\n    raw() {\n        // used by MST ot get undehanced value\n        return this.value_\n    }\n\n    toJSON() {\n        return this.get()\n    }\n\n    toString() {\n        return `${this.name_}[${this.value_}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isObservableValue = createInstanceofPredicate(\"ObservableValue\", ObservableValue) as (\n    x: any\n) => x is IObservableValue<any>\n", "import {\n    CaughtException,\n    IDerivation,\n    IDerivationState_,\n    IEqualsComparer,\n    IObservable,\n    Lambda,\n    TraceMode,\n    autorun,\n    clearObserving,\n    comparer,\n    createAction,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    globalState,\n    isCaughtException,\n    isSpyEnabled,\n    propagateChangeConfirmed,\n    propagateMaybeChanged,\n    reportObserved,\n    shouldCompute,\n    spyReport,\n    startBatch,\n    toPrimitive,\n    trackDerivedFunction,\n    untrackedEnd,\n    untrackedStart,\n    UPDATE,\n    die,\n    allowStateChangesStart,\n    allowStateChangesEnd\n} from \"../internal\"\n\nimport { getFlag, setFlag } from \"../utils/utils\"\n\nexport interface IComputedValue<T> {\n    get(): T\n    set(value: T): void\n}\n\nexport interface IComputedValueOptions<T> {\n    get?: () => T\n    set?: (value: T) => void\n    name?: string\n    equals?: IEqualsComparer<T>\n    context?: any\n    requiresReaction?: boolean\n    keepAlive?: boolean\n}\n\nexport type IComputedDidChange<T = any> = {\n    type: \"update\"\n    observableKind: \"computed\"\n    object: unknown\n    debugObjectName: string\n    newValue: T\n    oldValue: T | undefined\n}\n\n/**\n * A node in the state dependency root that observes other nodes, and can be observed itself.\n *\n * ComputedValue will remember the result of the computation for the duration of the batch, or\n * while being observed.\n *\n * During this time it will recompute only when one of its direct dependencies changed,\n * but only when it is being accessed with `ComputedValue.get()`.\n *\n * Implementation description:\n * 1. First time it's being accessed it will compute and remember result\n *    give back remembered result until 2. happens\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\n * 3. When it's being accessed, recompute if any shallow dependency changed.\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\n *    go to step 2. either way\n *\n * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\n */\nexport class ComputedValue<T> implements IObservable, IComputedValue<T>, IDerivation {\n    dependenciesState_ = IDerivationState_.NOT_TRACKING_\n    observing_: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving_ = null // during tracking it's an array with new observed observers\n    observers_ = new Set<IDerivation>()\n    runId_ = 0\n    lastAccessedBy_ = 0\n    lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n    unboundDepsCount_ = 0\n    protected value_: T | undefined | CaughtException = new CaughtException(null)\n    name_: string\n    triggeredBy_?: string\n\n    private static readonly isComputingMask_ = 0b00001\n    private static readonly isRunningSetterMask_ = 0b00010\n    private static readonly isBeingObservedMask_ = 0b00100\n    private static readonly isPendingUnobservationMask_ = 0b01000\n    private static readonly diffValueMask_ = 0b10000\n    private flags_ = 0b00000\n\n    derivation: () => T // N.B: unminified as it is used by MST\n    setter_?: (value: T) => void\n    isTracing_: TraceMode = TraceMode.NONE\n    scope_: Object | undefined\n    private equals_: IEqualsComparer<any>\n    private requiresReaction_: boolean | undefined\n    keepAlive_: boolean\n\n    /**\n     * Create a new computed value based on a function expression.\n     *\n     * The `name` property is for debug purposes only.\n     *\n     * The `equals` property specifies the comparer function to use to determine if a newly produced\n     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\n     * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\n     * Structural comparison can be convenient if you always produce a new aggregated object and\n     * don't want to notify observers if it is structurally the same.\n     * This is useful for working with vectors, mouse coordinates etc.\n     */\n    constructor(options: IComputedValueOptions<T>) {\n        if (!options.get) {\n            die(31)\n        }\n        this.derivation = options.get!\n        this.name_ = options.name || (__DEV__ ? \"ComputedValue@\" + getNextId() : \"ComputedValue\")\n        if (options.set) {\n            this.setter_ = createAction(\n                __DEV__ ? this.name_ + \"-setter\" : \"ComputedValue-setter\",\n                options.set\n            ) as any\n        }\n        this.equals_ =\n            options.equals ||\n            ((options as any).compareStructural || (options as any).struct\n                ? comparer.structural\n                : comparer.default)\n        this.scope_ = options.context\n        this.requiresReaction_ = options.requiresReaction\n        this.keepAlive_ = !!options.keepAlive\n    }\n\n    onBecomeStale_() {\n        propagateMaybeChanged(this)\n    }\n\n    public onBOL: Set<Lambda> | undefined\n    public onBUOL: Set<Lambda> | undefined\n\n    public onBO() {\n        if (this.onBOL) {\n            this.onBOL.forEach(listener => listener())\n        }\n    }\n\n    public onBUO() {\n        if (this.onBUOL) {\n            this.onBUOL.forEach(listener => listener())\n        }\n    }\n\n    // to check for cycles\n    private get isComputing(): boolean {\n        return getFlag(this.flags_, ComputedValue.isComputingMask_)\n    }\n    private set isComputing(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isComputingMask_, newValue)\n    }\n\n    private get isRunningSetter(): boolean {\n        return getFlag(this.flags_, ComputedValue.isRunningSetterMask_)\n    }\n    private set isRunningSetter(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isRunningSetterMask_, newValue)\n    }\n\n    get isBeingObserved(): boolean {\n        return getFlag(this.flags_, ComputedValue.isBeingObservedMask_)\n    }\n    set isBeingObserved(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isBeingObservedMask_, newValue)\n    }\n\n    get isPendingUnobservation(): boolean {\n        return getFlag(this.flags_, ComputedValue.isPendingUnobservationMask_)\n    }\n    set isPendingUnobservation(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isPendingUnobservationMask_, newValue)\n    }\n\n    get diffValue(): 0 | 1 {\n        return getFlag(this.flags_, ComputedValue.diffValueMask_) ? 1 : 0\n    }\n    set diffValue(newValue: 0 | 1) {\n        this.flags_ = setFlag(\n            this.flags_,\n            ComputedValue.diffValueMask_,\n            newValue === 1 ? true : false\n        )\n    }\n\n    /**\n     * Returns the current value of this computed value.\n     * Will evaluate its computation first if needed.\n     */\n    public get(): T {\n        if (this.isComputing) {\n            die(32, this.name_, this.derivation)\n        }\n        if (\n            globalState.inBatch === 0 &&\n            // !globalState.trackingDerivatpion &&\n            this.observers_.size === 0 &&\n            !this.keepAlive_\n        ) {\n            if (shouldCompute(this)) {\n                this.warnAboutUntrackedRead_()\n                startBatch() // See perf test 'computed memoization'\n                this.value_ = this.computeValue_(false)\n                endBatch()\n            }\n        } else {\n            reportObserved(this)\n            if (shouldCompute(this)) {\n                let prevTrackingContext = globalState.trackingContext\n                if (this.keepAlive_ && !prevTrackingContext) {\n                    globalState.trackingContext = this\n                }\n                if (this.trackAndCompute()) {\n                    propagateChangeConfirmed(this)\n                }\n                globalState.trackingContext = prevTrackingContext\n            }\n        }\n        const result = this.value_!\n\n        if (isCaughtException(result)) {\n            throw result.cause\n        }\n        return result\n    }\n\n    public set(value: T) {\n        if (this.setter_) {\n            if (this.isRunningSetter) {\n                die(33, this.name_)\n            }\n            this.isRunningSetter = true\n            try {\n                this.setter_.call(this.scope_, value)\n            } finally {\n                this.isRunningSetter = false\n            }\n        } else {\n            die(34, this.name_)\n        }\n    }\n\n    trackAndCompute(): boolean {\n        // N.B: unminified as it is used by MST\n        const oldValue = this.value_\n        const wasSuspended =\n            /* see #1208 */ this.dependenciesState_ === IDerivationState_.NOT_TRACKING_\n        const newValue = this.computeValue_(true)\n\n        const changed =\n            wasSuspended ||\n            isCaughtException(oldValue) ||\n            isCaughtException(newValue) ||\n            !this.equals_(oldValue, newValue)\n\n        if (changed) {\n            this.value_ = newValue\n\n            if (__DEV__ && isSpyEnabled()) {\n                spyReport({\n                    observableKind: \"computed\",\n                    debugObjectName: this.name_,\n                    object: this.scope_,\n                    type: \"update\",\n                    oldValue,\n                    newValue\n                } as IComputedDidChange)\n            }\n        }\n\n        return changed\n    }\n\n    computeValue_(track: boolean) {\n        this.isComputing = true\n        // don't allow state changes during computation\n        const prev = allowStateChangesStart(false)\n        let res: T | CaughtException\n        if (track) {\n            res = trackDerivedFunction(this, this.derivation, this.scope_)\n        } else {\n            if (globalState.disableErrorBoundaries === true) {\n                res = this.derivation.call(this.scope_)\n            } else {\n                try {\n                    res = this.derivation.call(this.scope_)\n                } catch (e) {\n                    res = new CaughtException(e)\n                }\n            }\n        }\n        allowStateChangesEnd(prev)\n        this.isComputing = false\n        return res\n    }\n\n    suspend_() {\n        if (!this.keepAlive_) {\n            clearObserving(this)\n            this.value_ = undefined // don't hold on to computed value!\n            if (__DEV__ && this.isTracing_ !== TraceMode.NONE) {\n                console.log(\n                    `[mobx.trace] Computed value '${this.name_}' was suspended and it will recompute on the next access.`\n                )\n            }\n        }\n    }\n\n    observe_(listener: (change: IComputedDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        let firstTime = true\n        let prevValue: T | undefined = undefined\n        return autorun(() => {\n            // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place\n            let newValue = this.get()\n            if (!firstTime || fireImmediately) {\n                const prevU = untrackedStart()\n                listener({\n                    observableKind: \"computed\",\n                    debugObjectName: this.name_,\n                    type: UPDATE,\n                    object: this,\n                    newValue,\n                    oldValue: prevValue\n                })\n                untrackedEnd(prevU)\n            }\n            firstTime = false\n            prevValue = newValue\n        })\n    }\n\n    warnAboutUntrackedRead_() {\n        if (!__DEV__) {\n            return\n        }\n        if (this.isTracing_ !== TraceMode.NONE) {\n            console.log(\n                `[mobx.trace] Computed value '${this.name_}' is being read outside a reactive context. Doing a full recompute.`\n            )\n        }\n        if (\n            typeof this.requiresReaction_ === \"boolean\"\n                ? this.requiresReaction_\n                : globalState.computedRequiresReaction\n        ) {\n            console.warn(\n                `[mobx] Computed value '${this.name_}' is being read outside a reactive context. Doing a full recompute.`\n            )\n        }\n    }\n\n    toString() {\n        return `${this.name_}[${this.derivation.toString()}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isComputedValue = createInstanceofPredicate(\"ComputedValue\", ComputedValue)\n", "import {\n    IAtom,\n    IDepTreeNode,\n    IObservable,\n    addObserver,\n    globalState,\n    isComputedValue,\n    removeObserver\n} from \"../internal\"\n\nexport enum IDerivationState_ {\n    // before being run or (outside batch and not being observed)\n    // at this point derivation is not holding any data about dependency tree\n    NOT_TRACKING_ = -1,\n    // no shallow dependency changed since last computation\n    // won't recalculate derivation\n    // this is what makes mobx fast\n    UP_TO_DATE_ = 0,\n    // some deep dependency changed, but don't know if shallow dependency changed\n    // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n    // currently only ComputedValue will propagate POSSIBLY_STALE\n    //\n    // having this state is second big optimization:\n    // don't have to recompute on every dependency change, but only when it's needed\n    POSSIBLY_STALE_ = 1,\n    // A shallow dependency has changed since last computation and the derivation\n    // will need to recompute when it's needed next.\n    STALE_ = 2\n}\n\nexport enum TraceMode {\n    NONE,\n    LOG,\n    BREAK\n}\n\n/**\n * A derivation is everything that can be derived from the state (all the atoms) in a pure manner.\n * See https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n */\nexport interface IDerivation extends IDepTreeNode {\n    observing_: IObservable[]\n    newObserving_: null | IObservable[]\n    dependenciesState_: IDerivationState_\n    /**\n     * Id of the current run of a derivation. Each time the derivation is tracked\n     * this number is increased by one. This number is globally unique\n     */\n    runId_: number\n    /**\n     * amount of dependencies used by the derivation in this run, which has not been bound yet.\n     */\n    unboundDepsCount_: number\n    onBecomeStale_(): void\n    isTracing_: TraceMode\n\n    /**\n     *  warn if the derivation has no dependencies after creation/update\n     */\n    requiresObservable_?: boolean\n}\n\nexport class CaughtException {\n    constructor(public cause: any) {\n        // Empty\n    }\n}\n\nexport function isCaughtException(e: any): e is CaughtException {\n    return e instanceof CaughtException\n}\n\n/**\n * Finds out whether any dependency of the derivation has actually changed.\n * If dependenciesState is 1 then it will recalculate dependencies,\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\n *\n * By iterating over the dependencies in the same order that they were reported and\n * stopping on the first change, all the recalculations are only called for ComputedValues\n * that will be tracked by derivation. That is because we assume that if the first x\n * dependencies of the derivation doesn't change then the derivation should run the same way\n * up until accessing x-th dependency.\n */\nexport function shouldCompute(derivation: IDerivation): boolean {\n    switch (derivation.dependenciesState_) {\n        case IDerivationState_.UP_TO_DATE_:\n            return false\n        case IDerivationState_.NOT_TRACKING_:\n        case IDerivationState_.STALE_:\n            return true\n        case IDerivationState_.POSSIBLY_STALE_: {\n            // state propagation can occur outside of action/reactive context #2195\n            const prevAllowStateReads = allowStateReadsStart(true)\n            const prevUntracked = untrackedStart() // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n            const obs = derivation.observing_,\n                l = obs.length\n            for (let i = 0; i < l; i++) {\n                const obj = obs[i]\n                if (isComputedValue(obj)) {\n                    if (globalState.disableErrorBoundaries) {\n                        obj.get()\n                    } else {\n                        try {\n                            obj.get()\n                        } catch (e) {\n                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                            untrackedEnd(prevUntracked)\n                            allowStateReadsEnd(prevAllowStateReads)\n                            return true\n                        }\n                    }\n                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n                    // and `derivation` is an observer of `obj`\n                    // invariantShouldCompute(derivation)\n                    if ((derivation.dependenciesState_ as any) === IDerivationState_.STALE_) {\n                        untrackedEnd(prevUntracked)\n                        allowStateReadsEnd(prevAllowStateReads)\n                        return true\n                    }\n                }\n            }\n            changeDependenciesStateTo0(derivation)\n            untrackedEnd(prevUntracked)\n            allowStateReadsEnd(prevAllowStateReads)\n            return false\n        }\n    }\n}\n\nexport function isComputingDerivation() {\n    return globalState.trackingDerivation !== null // filter out actions inside computations\n}\n\nexport function checkIfStateModificationsAreAllowed(atom: IAtom) {\n    if (!__DEV__) {\n        return\n    }\n    const hasObservers = atom.observers_.size > 0\n    // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n    if (\n        !globalState.allowStateChanges &&\n        (hasObservers || globalState.enforceActions === \"always\")\n    ) {\n        console.warn(\n            \"[MobX] \" +\n                (globalState.enforceActions\n                    ? \"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: \"\n                    : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: \") +\n                atom.name_\n        )\n    }\n}\n\nexport function checkIfStateReadsAreAllowed(observable: IObservable) {\n    if (__DEV__ && !globalState.allowStateReads && globalState.observableRequiresReaction) {\n        console.warn(\n            `[mobx] Observable '${observable.name_}' being read outside a reactive context.`\n        )\n    }\n}\n\n/**\n * Executes the provided function `f` and tracks which observables are being accessed.\n * The tracking information is stored on the `derivation` object and the derivation is registered\n * as observer of any of the accessed observables.\n */\nexport function trackDerivedFunction<T>(derivation: IDerivation, f: () => T, context: any) {\n    const prevAllowStateReads = allowStateReadsStart(true)\n    changeDependenciesStateTo0(derivation)\n    // Preallocate array; will be trimmed by bindDependencies.\n    derivation.newObserving_ = new Array(\n        // Reserve constant space for initial dependencies, dynamic space otherwise.\n        // See https://github.com/mobxjs/mobx/pull/3833\n        derivation.runId_ === 0 ? 100 : derivation.observing_.length\n    )\n    derivation.unboundDepsCount_ = 0\n    derivation.runId_ = ++globalState.runId\n    const prevTracking = globalState.trackingDerivation\n    globalState.trackingDerivation = derivation\n    globalState.inBatch++\n    let result\n    if (globalState.disableErrorBoundaries === true) {\n        result = f.call(context)\n    } else {\n        try {\n            result = f.call(context)\n        } catch (e) {\n            result = new CaughtException(e)\n        }\n    }\n    globalState.inBatch--\n    globalState.trackingDerivation = prevTracking\n    bindDependencies(derivation)\n\n    warnAboutDerivationWithoutDependencies(derivation)\n    allowStateReadsEnd(prevAllowStateReads)\n    return result\n}\n\nfunction warnAboutDerivationWithoutDependencies(derivation: IDerivation) {\n    if (!__DEV__) {\n        return\n    }\n\n    if (derivation.observing_.length !== 0) {\n        return\n    }\n\n    if (\n        typeof derivation.requiresObservable_ === \"boolean\"\n            ? derivation.requiresObservable_\n            : globalState.reactionRequiresObservable\n    ) {\n        console.warn(\n            `[mobx] Derivation '${derivation.name_}' is created/updated without reading any observable value.`\n        )\n    }\n}\n\n/**\n * diffs newObserving with observing.\n * update observing to be newObserving with unique observables\n * notify observers that become observed/unobserved\n */\nfunction bindDependencies(derivation: IDerivation) {\n    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n    const prevObserving = derivation.observing_\n    const observing = (derivation.observing_ = derivation.newObserving_!)\n    let lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_\n\n    // Go through all new observables and check diffValue: (this list can contain duplicates):\n    //   0: first occurrence, change to 1 and keep it\n    //   1: extra occurrence, drop it\n    let i0 = 0,\n        l = derivation.unboundDepsCount_\n    for (let i = 0; i < l; i++) {\n        const dep = observing[i]\n        if (dep.diffValue === 0) {\n            dep.diffValue = 1\n            if (i0 !== i) {\n                observing[i0] = dep\n            }\n            i0++\n        }\n\n        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n        // not hitting the condition\n        if ((dep as any as IDerivation).dependenciesState_ > lowestNewObservingDerivationState) {\n            lowestNewObservingDerivationState = (dep as any as IDerivation).dependenciesState_\n        }\n    }\n    observing.length = i0\n\n    derivation.newObserving_ = null // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n\n    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n    //   0: it's not in new observables, unobserve it\n    //   1: it keeps being observed, don't want to notify it. change to 0\n    l = prevObserving.length\n    while (l--) {\n        const dep = prevObserving[l]\n        if (dep.diffValue === 0) {\n            removeObserver(dep, derivation)\n        }\n        dep.diffValue = 0\n    }\n\n    // Go through all new observables and check diffValue: (now it should be unique)\n    //   0: it was set to 0 in last loop. don't need to do anything.\n    //   1: it wasn't observed, let's observe it. set back to 0\n    while (i0--) {\n        const dep = observing[i0]\n        if (dep.diffValue === 1) {\n            dep.diffValue = 0\n            addObserver(dep, derivation)\n        }\n    }\n\n    // Some new observed derivations may become stale during this derivation computation\n    // so they have had no chance to propagate staleness (#916)\n    if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n        derivation.dependenciesState_ = lowestNewObservingDerivationState\n        derivation.onBecomeStale_()\n    }\n}\n\nexport function clearObserving(derivation: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n    const obs = derivation.observing_\n    derivation.observing_ = []\n    let i = obs.length\n    while (i--) {\n        removeObserver(obs[i], derivation)\n    }\n\n    derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_\n}\n\nexport function untracked<T>(action: () => T): T {\n    const prev = untrackedStart()\n    try {\n        return action()\n    } finally {\n        untrackedEnd(prev)\n    }\n}\n\nexport function untrackedStart(): IDerivation | null {\n    const prev = globalState.trackingDerivation\n    globalState.trackingDerivation = null\n    return prev\n}\n\nexport function untrackedEnd(prev: IDerivation | null) {\n    globalState.trackingDerivation = prev\n}\n\nexport function allowStateReadsStart(allowStateReads: boolean) {\n    const prev = globalState.allowStateReads\n    globalState.allowStateReads = allowStateReads\n    return prev\n}\n\nexport function allowStateReadsEnd(prev: boolean) {\n    globalState.allowStateReads = prev\n}\n\n/**\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\n *\n */\nexport function changeDependenciesStateTo0(derivation: IDerivation) {\n    if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n        return\n    }\n    derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_\n\n    const obs = derivation.observing_\n    let i = obs.length\n    while (i--) {\n        obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n    }\n}\n", "import { IDerivation, IObservable, Reaction, die, getGlobal } from \"../internal\"\nimport { ComputedValue } from \"./computedvalue\"\n\n/**\n * These values will persist if global state is reset\n */\nconst persistentKeys: (keyof MobXGlobals)[] = [\n    \"mobxGuid\",\n    \"spyListeners\",\n    \"enforceActions\",\n    \"computedRequiresReaction\",\n    \"reactionRequiresObservable\",\n    \"observableRequiresReaction\",\n    \"allowStateReads\",\n    \"disableErrorBoundaries\",\n    \"runId\",\n    \"UNCHANGED\",\n    \"useProxies\"\n]\n\nexport type IUNCHANGED = {}\n\nexport class MobXGlobals {\n    /**\n     * MobXGlobals version.\n     * MobX compatiblity with other versions loaded in memory as long as this version matches.\n     * It indicates that the global state still stores similar information\n     *\n     * N.B: this version is unrelated to the package version of MobX, and is only the version of the\n     * internal state storage of MobX, and can be the same across many different package versions\n     */\n    version = 6\n\n    /**\n     * globally unique token to signal unchanged\n     */\n    UNCHANGED: IUNCHANGED = {}\n\n    /**\n     * Currently running derivation\n     */\n    trackingDerivation: IDerivation | null = null\n\n    /**\n     * Currently running reaction. This determines if we currently have a reactive context.\n     * (Tracking derivation is also set for temporal tracking of computed values inside actions,\n     * but trackingReaction can only be set by a form of Reaction)\n     */\n    trackingContext: Reaction | ComputedValue<any> | null = null\n\n    /**\n     * Each time a derivation is tracked, it is assigned a unique run-id\n     */\n    runId = 0\n\n    /**\n     * 'guid' for general purpose. Will be persisted amongst resets.\n     */\n    mobxGuid = 0\n\n    /**\n     * Are we in a batch block? (and how many of them)\n     */\n    inBatch: number = 0\n\n    /**\n     * Observables that don't have observers anymore, and are about to be\n     * suspended, unless somebody else accesses it in the same batch\n     *\n     * @type {IObservable[]}\n     */\n    pendingUnobservations: IObservable[] = []\n\n    /**\n     * List of scheduled, not yet executed, reactions.\n     */\n    pendingReactions: Reaction[] = []\n\n    /**\n     * Are we currently processing reactions?\n     */\n    isRunningReactions = false\n\n    /**\n     * Is it allowed to change observables at this point?\n     * In general, MobX doesn't allow that when running computations and React.render.\n     * To ensure that those functions stay pure.\n     */\n    allowStateChanges = false\n\n    /**\n     * Is it allowed to read observables at this point?\n     * Used to hold the state needed for `observableRequiresReaction`\n     */\n    allowStateReads = true\n\n    /**\n     * If strict mode is enabled, state changes are by default not allowed\n     */\n    enforceActions: boolean | \"always\" = true\n\n    /**\n     * Spy callbacks\n     */\n    spyListeners: { (change: any): void }[] = []\n\n    /**\n     * Globally attached error handlers that react specifically to errors in reactions\n     */\n    globalReactionErrorHandlers: ((error: any, derivation: IDerivation) => void)[] = []\n\n    /**\n     * Warn if computed values are accessed outside a reactive context\n     */\n    computedRequiresReaction = false\n\n    /**\n     * (Experimental)\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable = false\n\n    /**\n     * (Experimental)\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction = false\n\n    /*\n     * Don't catch and rethrow exceptions. This is useful for inspecting the state of\n     * the stack when an exception occurs while debugging.\n     */\n    disableErrorBoundaries = false\n\n    /*\n     * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as\n     * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836\n     */\n    suppressReactionErrors = false\n\n    useProxies = true\n    /*\n     * print warnings about code that would fail if proxies weren't available\n     */\n    verifyProxies = false\n\n    /**\n     * False forces all object's descriptors to\n     * writable: true\n     * configurable: true\n     */\n    safeDescriptors = true\n}\n\nlet canMergeGlobalState = true\nlet isolateCalled = false\n\nexport let globalState: MobXGlobals = (function () {\n    let global = getGlobal()\n    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {\n        canMergeGlobalState = false\n    }\n    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {\n        canMergeGlobalState = false\n    }\n\n    if (!canMergeGlobalState) {\n        // Because this is a IIFE we need to let isolateCalled a chance to change\n        // so we run it after the event loop completed at least 1 iteration\n        setTimeout(() => {\n            if (!isolateCalled) {\n                die(35)\n            }\n        }, 1)\n        return new MobXGlobals()\n    } else if (global.__mobxGlobals) {\n        global.__mobxInstanceCount += 1\n        if (!global.__mobxGlobals.UNCHANGED) {\n            global.__mobxGlobals.UNCHANGED = {}\n        } // make merge backward compatible\n        return global.__mobxGlobals\n    } else {\n        global.__mobxInstanceCount = 1\n        return (global.__mobxGlobals = new MobXGlobals())\n    }\n})()\n\nexport function isolateGlobalState() {\n    if (\n        globalState.pendingReactions.length ||\n        globalState.inBatch ||\n        globalState.isRunningReactions\n    ) {\n        die(36)\n    }\n    isolateCalled = true\n    if (canMergeGlobalState) {\n        let global = getGlobal()\n        if (--global.__mobxInstanceCount === 0) {\n            global.__mobxGlobals = undefined\n        }\n        globalState = new MobXGlobals()\n    }\n}\n\nexport function getGlobalState(): any {\n    return globalState\n}\n\n/**\n * For testing purposes only; this will break the internal state of existing observables,\n * but can be used to get back at a stable state after throwing errors\n */\nexport function resetGlobalState() {\n    const defaultGlobals = new MobXGlobals()\n    for (let key in defaultGlobals) {\n        if (persistentKeys.indexOf(key as any) === -1) {\n            globalState[key] = defaultGlobals[key]\n        }\n    }\n    globalState.allowStateChanges = !globalState.enforceActions\n}\n", "import {\n    Lambda,\n    ComputedValue,\n    IDependencyTree,\n    IDerivation,\n    IDerivationState_,\n    TraceMode,\n    getDependencyTree,\n    globalState,\n    runReactions,\n    checkIfStateReadsAreAllowed\n} from \"../internal\"\n\nexport interface IDepTreeNode {\n    name_: string\n    observing_?: IObservable[]\n}\n\nexport interface IObservable extends IDepTreeNode {\n    diffValue: number\n    /**\n     * Id of the derivation *run* that last accessed this observable.\n     * If this id equals the *run* id of the current derivation,\n     * the dependency is already established\n     */\n    lastAccessedBy_: number\n    isBeingObserved: boolean\n\n    lowestObserverState_: IDerivationState_ // Used to avoid redundant propagations\n    isPendingUnobservation: boolean // Used to push itself to global.pendingUnobservations at most once per batch.\n\n    observers_: Set<IDerivation>\n\n    onBUO(): void\n    onBO(): void\n\n    onBUOL: Set<Lambda> | undefined\n    onBOL: Set<Lambda> | undefined\n}\n\nexport function hasObservers(observable: IObservable): boolean {\n    return observable.observers_ && observable.observers_.size > 0\n}\n\nexport function getObservers(observable: IObservable): Set<IDerivation> {\n    return observable.observers_\n}\n\n// function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\") // for performance\n//         } else {\n//             invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldn't be held in map.\") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         \"INTERNAL ERROR there is no junk in map\"\n//     )\n// }\nexport function addObserver(observable: IObservable, node: IDerivation) {\n    // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n    // invariantObservers(observable);\n\n    observable.observers_.add(node)\n    if (observable.lowestObserverState_ > node.dependenciesState_) {\n        observable.lowestObserverState_ = node.dependenciesState_\n    }\n\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n}\n\nexport function removeObserver(observable: IObservable, node: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n    // invariantObservers(observable);\n    observable.observers_.delete(node)\n    if (observable.observers_.size === 0) {\n        // deleting last observer\n        queueForUnobservation(observable)\n    }\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n}\n\nexport function queueForUnobservation(observable: IObservable) {\n    if (observable.isPendingUnobservation === false) {\n        // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n        observable.isPendingUnobservation = true\n        globalState.pendingUnobservations.push(observable)\n    }\n}\n\n/**\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\n * Avoids unnecessary recalculations.\n */\nexport function startBatch() {\n    globalState.inBatch++\n}\n\nexport function endBatch() {\n    if (--globalState.inBatch === 0) {\n        runReactions()\n        // the batch is actually about to finish, all unobserving should happen here.\n        const list = globalState.pendingUnobservations\n        for (let i = 0; i < list.length; i++) {\n            const observable = list[i]\n            observable.isPendingUnobservation = false\n            if (observable.observers_.size === 0) {\n                if (observable.isBeingObserved) {\n                    // if this observable had reactive observers, trigger the hooks\n                    observable.isBeingObserved = false\n                    observable.onBUO()\n                }\n                if (observable instanceof ComputedValue) {\n                    // computed values are automatically teared down when the last observer leaves\n                    // this process happens recursively, this computed might be the last observabe of another, etc..\n                    observable.suspend_()\n                }\n            }\n        }\n        globalState.pendingUnobservations = []\n    }\n}\n\nexport function reportObserved(observable: IObservable): boolean {\n    checkIfStateReadsAreAllowed(observable)\n\n    const derivation = globalState.trackingDerivation\n    if (derivation !== null) {\n        /**\n         * Simple optimization, give each derivation run an unique id (runId)\n         * Check if last time this observable was accessed the same runId is used\n         * if this is the case, the relation is already known\n         */\n        if (derivation.runId_ !== observable.lastAccessedBy_) {\n            observable.lastAccessedBy_ = derivation.runId_\n            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...\n            derivation.newObserving_![derivation.unboundDepsCount_++] = observable\n            if (!observable.isBeingObserved && globalState.trackingContext) {\n                observable.isBeingObserved = true\n                observable.onBO()\n            }\n        }\n        return observable.isBeingObserved\n    } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n        queueForUnobservation(observable)\n    }\n\n    return false\n}\n\n// function invariantLOS(observable: IObservable, msg: string) {\n//     // it's expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         \"lowestObserverState is wrong for \" +\n//             msg +\n//             \" because \" +\n//             min +\n//             \" < \" +\n//             observable.lowestObserverState\n//     )\n// }\n\n/**\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\n * It will propagate changes to observers from previous run\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\n * Hopefully self reruning autoruns aren't a feature people should depend on\n * Also most basic use cases should be ok\n */\n\n// Called by Atom when its value changes\nexport function propagateChanged(observable: IObservable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    // Ideally we use for..of here, but the downcompiled version is really slow...\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n            d.onBecomeStale_()\n        }\n        d.dependenciesState_ = IDerivationState_.STALE_\n    })\n    // invariantLOS(observable, \"changed end\");\n}\n\n// Called by ComputedValue when it recalculate and its value changed\nexport function propagateChangeConfirmed(observable: IObservable) {\n    // invariantLOS(observable, \"confirmed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n            d.dependenciesState_ = IDerivationState_.STALE_\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n        } else if (\n            d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n        ) {\n            observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n        }\n    })\n    // invariantLOS(observable, \"confirmed end\");\n}\n\n// Used by computed when its dependency changed, but we don't wan't to immediately recompute.\nexport function propagateMaybeChanged(observable: IObservable) {\n    // invariantLOS(observable, \"maybe start\");\n    if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_\n\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_\n            d.onBecomeStale_()\n        }\n    })\n    // invariantLOS(observable, \"maybe end\");\n}\n\nfunction logTraceInfo(derivation: IDerivation, observable: IObservable) {\n    console.log(\n        `[mobx.trace] '${derivation.name_}' is invalidated due to a change in: '${observable.name_}'`\n    )\n    if (derivation.isTracing_ === TraceMode.BREAK) {\n        const lines = []\n        printDepTree(getDependencyTree(derivation), lines, 1)\n\n        // prettier-ignore\n        new Function(\n`debugger;\n/*\nTracing '${derivation.name_}'\n\nYou are entering this break point because derivation '${derivation.name_}' is being traced and '${observable.name_}' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n${derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, \"/\") : \"\"}\n\nThe dependencies for this derivation are:\n\n${lines.join(\"\\n\")}\n*/\n    `)()\n    }\n}\n\nfunction printDepTree(tree: IDependencyTree, lines: string[], depth: number) {\n    if (lines.length >= 1000) {\n        lines.push(\"(and many more)\")\n        return\n    }\n    lines.push(`${\"\\t\".repeat(depth - 1)}${tree.name}`)\n    if (tree.dependencies) {\n        tree.dependencies.forEach(child => printDepTree(child, lines, depth + 1))\n    }\n}\n", "import {\n    $mobx,\n    IDerivation,\n    IDerivationState_,\n    IObservable,\n    Lambda,\n    TraceMode,\n    clearObserving,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    globalState,\n    isCaughtException,\n    isSpyEnabled,\n    shouldCompute,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    trace,\n    trackDerivedFunction,\n    GenericAbortSignal\n} from \"../internal\"\n\nimport { getFlag, setFlag } from \"../utils/utils\"\n\n/**\n * Reactions are a special kind of derivations. Several things distinguishes them from normal reactive computations\n *\n * 1) They will always run, whether they are used by other computations or not.\n * This means that they are very suitable for triggering side effects like logging, updating the DOM and making network requests.\n * 2) They are not observable themselves\n * 3) They will always run after any 'normal' derivations\n * 4) They are allowed to change the state and thereby triggering themselves again, as long as they make sure the state propagates to a stable state in a reasonable amount of iterations.\n *\n * The state machine of a Reaction is as follows:\n *\n * 1) after creating, the reaction should be started by calling `runReaction` or by scheduling it (see also `autorun`)\n * 2) the `onInvalidate` handler should somehow result in a call to `this.track(someFunction)`\n * 3) all observables accessed in `someFunction` will be observed by this reaction.\n * 4) as soon as some of the dependencies has changed the Reaction will be rescheduled for another run (after the current mutation or transaction). `isScheduled` will yield true once a dependency is stale and during this period\n * 5) `onInvalidate` will be called, and we are back at step 1.\n *\n */\n\nexport interface IReactionPublic {\n    dispose(): void\n    trace(enterBreakPoint?: boolean): void\n}\n\nexport interface IReactionDisposer {\n    (): void\n    [$mobx]: Reaction\n}\n\nexport class Reaction implements IDerivation, IReactionPublic {\n    observing_: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving_: IObservable[] = []\n    dependenciesState_ = IDerivationState_.NOT_TRACKING_\n    runId_ = 0\n    unboundDepsCount_ = 0\n\n    private static readonly isDisposedMask_ = 0b00001\n    private static readonly isScheduledMask_ = 0b00010\n    private static readonly isTrackPendingMask_ = 0b00100\n    private static readonly isRunningMask_ = 0b01000\n    private static readonly diffValueMask_ = 0b10000\n    private flags_ = 0b00000\n\n    isTracing_: TraceMode = TraceMode.NONE\n\n    constructor(\n        public name_: string = __DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\",\n        private onInvalidate_: () => void,\n        private errorHandler_?: (error: any, derivation: IDerivation) => void,\n        public requiresObservable_?\n    ) {}\n\n    get isDisposed() {\n        return getFlag(this.flags_, Reaction.isDisposedMask_)\n    }\n    set isDisposed(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isDisposedMask_, newValue)\n    }\n\n    get isScheduled() {\n        return getFlag(this.flags_, Reaction.isScheduledMask_)\n    }\n    set isScheduled(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isScheduledMask_, newValue)\n    }\n\n    get isTrackPending() {\n        return getFlag(this.flags_, Reaction.isTrackPendingMask_)\n    }\n    set isTrackPending(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isTrackPendingMask_, newValue)\n    }\n\n    get isRunning() {\n        return getFlag(this.flags_, Reaction.isRunningMask_)\n    }\n    set isRunning(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isRunningMask_, newValue)\n    }\n\n    get diffValue(): 0 | 1 {\n        return getFlag(this.flags_, Reaction.diffValueMask_) ? 1 : 0\n    }\n    set diffValue(newValue: 0 | 1) {\n        this.flags_ = setFlag(this.flags_, Reaction.diffValueMask_, newValue === 1 ? true : false)\n    }\n\n    onBecomeStale_() {\n        this.schedule_()\n    }\n\n    schedule_() {\n        if (!this.isScheduled) {\n            this.isScheduled = true\n            globalState.pendingReactions.push(this)\n            runReactions()\n        }\n    }\n\n    /**\n     * internal, use schedule() if you intend to kick off a reaction\n     */\n    runReaction_() {\n        if (!this.isDisposed) {\n            startBatch()\n            this.isScheduled = false\n            const prev = globalState.trackingContext\n            globalState.trackingContext = this\n            if (shouldCompute(this)) {\n                this.isTrackPending = true\n\n                try {\n                    this.onInvalidate_()\n                    if (__DEV__ && this.isTrackPending && isSpyEnabled()) {\n                        // onInvalidate didn't trigger track right away..\n                        spyReport({\n                            name: this.name_,\n                            type: \"scheduled-reaction\"\n                        })\n                    }\n                } catch (e) {\n                    this.reportExceptionInDerivation_(e)\n                }\n            }\n            globalState.trackingContext = prev\n            endBatch()\n        }\n    }\n\n    track(fn: () => void) {\n        if (this.isDisposed) {\n            return\n            // console.warn(\"Reaction already disposed\") // Note: Not a warning / error in mobx 4 either\n        }\n        startBatch()\n        const notify = isSpyEnabled()\n        let startTime\n        if (__DEV__ && notify) {\n            startTime = Date.now()\n            spyReportStart({\n                name: this.name_,\n                type: \"reaction\"\n            })\n        }\n        this.isRunning = true\n        const prevReaction = globalState.trackingContext // reactions could create reactions...\n        globalState.trackingContext = this\n        const result = trackDerivedFunction(this, fn, undefined)\n        globalState.trackingContext = prevReaction\n        this.isRunning = false\n        this.isTrackPending = false\n        if (this.isDisposed) {\n            // disposed during last run. Clean up everything that was bound after the dispose call.\n            clearObserving(this)\n        }\n        if (isCaughtException(result)) {\n            this.reportExceptionInDerivation_(result.cause)\n        }\n        if (__DEV__ && notify) {\n            spyReportEnd({\n                time: Date.now() - startTime\n            })\n        }\n        endBatch()\n    }\n\n    reportExceptionInDerivation_(error: any) {\n        if (this.errorHandler_) {\n            this.errorHandler_(error, this)\n            return\n        }\n\n        if (globalState.disableErrorBoundaries) {\n            throw error\n        }\n\n        const message = __DEV__\n            ? `[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '${this}'`\n            : `[mobx] uncaught error in '${this}'`\n        if (!globalState.suppressReactionErrors) {\n            console.error(message, error)\n            /** If debugging brought you here, please, read the above message :-). Tnx! */\n        } else if (__DEV__) { console.warn(`[mobx] (error in reaction '${this.name_}' suppressed, fix error of causing action below)`) } // prettier-ignore\n\n        if (__DEV__ && isSpyEnabled()) {\n            spyReport({\n                type: \"error\",\n                name: this.name_,\n                message,\n                error: \"\" + error\n            })\n        }\n\n        globalState.globalReactionErrorHandlers.forEach(f => f(error, this))\n    }\n\n    dispose() {\n        if (!this.isDisposed) {\n            this.isDisposed = true\n            if (!this.isRunning) {\n                // if disposed while running, clean up later. Maybe not optimal, but rare case\n                startBatch()\n                clearObserving(this)\n                endBatch()\n            }\n        }\n    }\n\n    getDisposer_(abortSignal?: GenericAbortSignal): IReactionDisposer {\n        const dispose = (() => {\n            this.dispose()\n            abortSignal?.removeEventListener?.(\"abort\", dispose)\n        }) as IReactionDisposer\n        abortSignal?.addEventListener?.(\"abort\", dispose)\n        dispose[$mobx] = this\n\n        return dispose\n    }\n\n    toString() {\n        return `Reaction[${this.name_}]`\n    }\n\n    trace(enterBreakPoint: boolean = false) {\n        trace(this, enterBreakPoint)\n    }\n}\n\nexport function onReactionError(handler: (error: any, derivation: IDerivation) => void): Lambda {\n    globalState.globalReactionErrorHandlers.push(handler)\n    return () => {\n        const idx = globalState.globalReactionErrorHandlers.indexOf(handler)\n        if (idx >= 0) {\n            globalState.globalReactionErrorHandlers.splice(idx, 1)\n        }\n    }\n}\n\n/**\n * Magic number alert!\n * Defines within how many times a reaction is allowed to re-trigger itself\n * until it is assumed that this is gonna be a never ending loop...\n */\nconst MAX_REACTION_ITERATIONS = 100\n\nlet reactionScheduler: (fn: () => void) => void = f => f()\n\nexport function runReactions() {\n    // Trampolining, if runReactions are already running, new reactions will be picked up\n    if (globalState.inBatch > 0 || globalState.isRunningReactions) {\n        return\n    }\n    reactionScheduler(runReactionsHelper)\n}\n\nfunction runReactionsHelper() {\n    globalState.isRunningReactions = true\n    const allReactions = globalState.pendingReactions\n    let iterations = 0\n\n    // While running reactions, new reactions might be triggered.\n    // Hence we work with two variables and check whether\n    // we converge to no remaining reactions after a while.\n    while (allReactions.length > 0) {\n        if (++iterations === MAX_REACTION_ITERATIONS) {\n            console.error(\n                __DEV__\n                    ? `Reaction doesn't converge to a stable state after ${MAX_REACTION_ITERATIONS} iterations.` +\n                          ` Probably there is a cycle in the reactive function: ${allReactions[0]}`\n                    : `[mobx] cycle in reaction: ${allReactions[0]}`\n            )\n            allReactions.splice(0) // clear reactions\n        }\n        let remainingReactions = allReactions.splice(0)\n        for (let i = 0, l = remainingReactions.length; i < l; i++) {\n            remainingReactions[i].runReaction_()\n        }\n    }\n    globalState.isRunningReactions = false\n}\n\nexport const isReaction = createInstanceofPredicate(\"Reaction\", Reaction)\n\nexport function setReactionScheduler(fn: (f: () => void) => void) {\n    const baseScheduler = reactionScheduler\n    reactionScheduler = f => fn(() => baseScheduler(f))\n}\n", "import { IComputedDidChange } from \"./computedvalue\"\nimport { IValueDidChange, IBoxDidChange } from \"./../types/observablevalue\"\nimport { IObjectDidChange } from \"./../types/observableobject\"\nimport { IArrayDidChange } from \"./../types/observablearray\"\nimport { Lambda, globalState, once, ISetDidChange, IMapDidChange } from \"../internal\"\n\nexport function isSpyEnabled() {\n    return __DEV__ && !!globalState.spyListeners.length\n}\n\nexport type PureSpyEvent =\n    | { type: \"action\"; name: string; object: unknown; arguments: unknown[] }\n    | { type: \"scheduled-reaction\"; name: string }\n    | { type: \"reaction\"; name: string }\n    | { type: \"error\"; name: string; message: string; error: string }\n    | IComputedDidChange<unknown>\n    | IObjectDidChange<unknown>\n    | IArrayDidChange<unknown>\n    | IMapDidChange<unknown, unknown>\n    | ISetDidChange<unknown>\n    | IValueDidChange<unknown>\n    | IBoxDidChange<unknown>\n    | { type: \"report-end\"; spyReportEnd: true; time?: number }\n\ntype SpyEvent = PureSpyEvent & { spyReportStart?: true }\n\nexport function spyReport(event: SpyEvent) {\n    if (!__DEV__) {\n        return\n    } // dead code elimination can do the rest\n    if (!globalState.spyListeners.length) {\n        return\n    }\n    const listeners = globalState.spyListeners\n    for (let i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](event)\n    }\n}\n\nexport function spyReportStart(event: PureSpyEvent) {\n    if (!__DEV__) {\n        return\n    }\n    const change = { ...event, spyReportStart: true as const }\n    spyReport(change)\n}\n\nconst END_EVENT: SpyEvent = { type: \"report-end\", spyReportEnd: true }\n\nexport function spyReportEnd(change?: { time?: number }) {\n    if (!__DEV__) {\n        return\n    }\n    if (change) {\n        spyReport({ ...change, type: \"report-end\", spyReportEnd: true })\n    } else {\n        spyReport(END_EVENT)\n    }\n}\n\nexport function spy(listener: (change: SpyEvent) => void): Lambda {\n    if (!__DEV__) {\n        console.warn(`[mobx.spy] Is a no-op in production builds`)\n        return function () {}\n    } else {\n        globalState.spyListeners.push(listener)\n        return once(() => {\n            globalState.spyListeners = globalState.spyListeners.filter(l => l !== listener)\n        })\n    }\n}\n", "import {\n    createAction,\n    executeAction,\n    Annotation,\n    storeAnnotation,\n    die,\n    isFunction,\n    isStringish,\n    createDecoratorAnnotation,\n    createActionAnnotation,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassFieldDecorator, ClassMethodDecorator } from \"../types/decorator_fills\"\n\nexport const ACTION = \"action\"\nexport const ACTION_BOUND = \"action.bound\"\nexport const AUTOACTION = \"autoAction\"\nexport const AUTOACTION_BOUND = \"autoAction.bound\"\n\nconst DEFAULT_ACTION_NAME = \"<unnamed action>\"\n\nconst actionAnnotation = createActionAnnotation(ACTION)\nconst actionBoundAnnotation = createActionAnnotation(ACTION_BOUND, {\n    bound: true\n})\nconst autoActionAnnotation = createActionAnnotation(AUTOACTION, {\n    autoAction: true\n})\nconst autoActionBoundAnnotation = createActionAnnotation(AUTOACTION_BOUND, {\n    autoAction: true,\n    bound: true\n})\n\nexport interface IActionFactory\n    extends Annotation,\n        PropertyDecorator,\n        ClassMethodDecorator,\n        ClassFieldDecorator {\n    // nameless actions\n    <T extends Function | undefined | null>(fn: T): T\n    // named actions\n    <T extends Function | undefined | null>(name: string, fn: T): T\n\n    // named decorator\n    (customName: string): PropertyDecorator &\n        Annotation &\n        ClassMethodDecorator &\n        ClassFieldDecorator\n\n    // decorator (name no longer supported)\n    bound: Annotation & PropertyDecorator & ClassMethodDecorator & ClassFieldDecorator\n}\n\nfunction createActionFactory(autoAction: boolean): IActionFactory {\n    const res: IActionFactory = function action(arg1, arg2?): any {\n        // action(fn() {})\n        if (isFunction(arg1)) {\n            return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction)\n        }\n        // action(\"name\", fn() {})\n        if (isFunction(arg2)) {\n            return createAction(arg1, arg2, autoAction)\n        }\n        // @action (2022.3 Decorators)\n        if (is20223Decorator(arg2)) {\n            return (autoAction ? autoActionAnnotation : actionAnnotation).decorate_20223_(\n                arg1,\n                arg2\n            )\n        }\n        // @action\n        if (isStringish(arg2)) {\n            return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation)\n        }\n        // action(\"name\") & @action(\"name\")\n        if (isStringish(arg1)) {\n            return createDecoratorAnnotation(\n                createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n                    name: arg1,\n                    autoAction\n                })\n            )\n        }\n\n        if (__DEV__) {\n            die(\"Invalid arguments for `action`\")\n        }\n    } as IActionFactory\n    return res\n}\n\nexport const action: IActionFactory = createActionFactory(false)\nObject.assign(action, actionAnnotation)\nexport const autoAction: IActionFactory = createActionFactory(true)\nObject.assign(autoAction, autoActionAnnotation)\n\naction.bound = createDecoratorAnnotation(actionBoundAnnotation)\nautoAction.bound = createDecoratorAnnotation(autoActionBoundAnnotation)\n\nexport function runInAction<T>(fn: () => T): T {\n    return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined)\n}\n\nexport function isAction(thing: any) {\n    return isFunction(thing) && thing.isMobxAction === true\n}\n", "import {\n    EMPTY_OBJECT,\n    IEqualsComparer,\n    IReactionDisposer,\n    IReactionPublic,\n    Lambda,\n    Reaction,\n    action,\n    comparer,\n    getNextId,\n    isAction,\n    isFunction,\n    isPlainObject,\n    die,\n    allowStateChanges,\n    GenericAbortSignal\n} from \"../internal\"\n\nexport interface IAutorunOptions {\n    delay?: number\n    name?: string\n    /**\n     * Experimental.\n     * Warns if the view doesn't track observables\n     */\n    requiresObservable?: boolean\n    scheduler?: (callback: () => void) => any\n    onError?: (error: any) => void\n    signal?: GenericAbortSignal\n}\n\n/**\n * Creates a named reactive view and keeps it alive, so that the view is always\n * updated if one of the dependencies changes, even when the view is not further used by something else.\n * @param view The reactive view\n * @returns disposer function, which can be used to stop the view from being updated in the future.\n */\nexport function autorun(\n    view: (r: IReactionPublic) => any,\n    opts: IAutorunOptions = EMPTY_OBJECT\n): IReactionDisposer {\n    if (__DEV__) {\n        if (!isFunction(view)) {\n            die(\"Autorun expects a function as first argument\")\n        }\n        if (isAction(view)) {\n            die(\"Autorun does not accept actions since actions are untrackable\")\n        }\n    }\n\n    const name: string =\n        opts?.name ?? (__DEV__ ? (view as any).name || \"Autorun@\" + getNextId() : \"Autorun\")\n    const runSync = !opts.scheduler && !opts.delay\n    let reaction: Reaction\n\n    if (runSync) {\n        // normal autorun\n        reaction = new Reaction(\n            name,\n            function (this: Reaction) {\n                this.track(reactionRunner)\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    } else {\n        const scheduler = createSchedulerFromOptions(opts)\n        // debounced autorun\n        let isScheduled = false\n\n        reaction = new Reaction(\n            name,\n            () => {\n                if (!isScheduled) {\n                    isScheduled = true\n                    scheduler(() => {\n                        isScheduled = false\n                        if (!reaction.isDisposed) {\n                            reaction.track(reactionRunner)\n                        }\n                    })\n                }\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    }\n\n    function reactionRunner() {\n        view(reaction)\n    }\n\n    if (!opts?.signal?.aborted) {\n        reaction.schedule_()\n    }\n    return reaction.getDisposer_(opts?.signal)\n}\n\nexport type IReactionOptions<T, FireImmediately extends boolean> = IAutorunOptions & {\n    fireImmediately?: FireImmediately\n    equals?: IEqualsComparer<T>\n}\n\nconst run = (f: Lambda) => f()\n\nfunction createSchedulerFromOptions(opts: IAutorunOptions) {\n    return opts.scheduler\n        ? opts.scheduler\n        : opts.delay\n        ? (f: Lambda) => setTimeout(f, opts.delay!)\n        : run\n}\n\nexport function reaction<T, FireImmediately extends boolean = false>(\n    expression: (r: IReactionPublic) => T,\n    effect: (\n        arg: T,\n        prev: FireImmediately extends true ? T | undefined : T,\n        r: IReactionPublic\n    ) => void,\n    opts: IReactionOptions<T, FireImmediately> = EMPTY_OBJECT\n): IReactionDisposer {\n    if (__DEV__) {\n        if (!isFunction(expression) || !isFunction(effect)) {\n            die(\"First and second argument to reaction should be functions\")\n        }\n        if (!isPlainObject(opts)) {\n            die(\"Third argument of reactions should be an object\")\n        }\n    }\n    const name = opts.name ?? (__DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\")\n    const effectAction = action(\n        name,\n        opts.onError ? wrapErrorHandler(opts.onError, effect) : effect\n    )\n    const runSync = !opts.scheduler && !opts.delay\n    const scheduler = createSchedulerFromOptions(opts)\n\n    let firstTime = true\n    let isScheduled = false\n    let value: T\n\n    const equals: IEqualsComparer<T> = (opts as any).compareStructural\n        ? comparer.structural\n        : opts.equals || comparer.default\n\n    const r = new Reaction(\n        name,\n        () => {\n            if (firstTime || runSync) {\n                reactionRunner()\n            } else if (!isScheduled) {\n                isScheduled = true\n                scheduler!(reactionRunner)\n            }\n        },\n        opts.onError,\n        opts.requiresObservable\n    )\n\n    function reactionRunner() {\n        isScheduled = false\n        if (r.isDisposed) {\n            return\n        }\n        let changed: boolean = false\n        const oldValue = value\n        r.track(() => {\n            const nextValue = allowStateChanges(false, () => expression(r))\n            changed = firstTime || !equals(value, nextValue)\n            value = nextValue\n        })\n\n        // This casting is nesessary as TS cannot infer proper type in current function implementation\n        type OldValue = FireImmediately extends true ? T | undefined : T\n        if (firstTime && opts.fireImmediately!) {\n            effectAction(value, oldValue as OldValue, r)\n        } else if (!firstTime && changed) {\n            effectAction(value, oldValue as OldValue, r)\n        }\n        firstTime = false\n    }\n\n    if (!opts?.signal?.aborted) {\n        r.schedule_()\n    }\n    return r.getDisposer_(opts?.signal)\n}\n\nfunction wrapErrorHandler(errorHandler, baseFn) {\n    return function () {\n        try {\n            return baseFn.apply(this, arguments)\n        } catch (e) {\n            errorHandler.call(this, e)\n        }\n    }\n}\n", "import {\n    IComputedValue,\n    IObservable,\n    IObservableArray,\n    Lambda,\n    ObservableMap,\n    getAtom,\n    ObservableSet,\n    isFunction,\n    IObservableValue\n} from \"../internal\"\n\nconst ON_BECOME_OBSERVED = \"onBO\"\nconst ON_BECOME_UNOBSERVED = \"onBUO\"\n\nexport function onBecomeObserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>\n        | IObservableValue<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3)\n}\n\nexport function onBecomeUnobserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>\n        | IObservableValue<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3)\n}\n\nfunction interceptHook(hook: \"onBO\" | \"onBUO\", thing, arg2, arg3) {\n    const atom: IObservable =\n        typeof arg3 === \"function\" ? getAtom(thing, arg2) : (getAtom(thing) as any)\n    const cb = isFunction(arg3) ? arg3 : arg2\n    const listenersKey = `${hook}L` as \"onBOL\" | \"onBUOL\"\n\n    if (atom[listenersKey]) {\n        atom[listenersKey]!.add(cb)\n    } else {\n        atom[listenersKey] = new Set<Lambda>([cb])\n    }\n\n    return function () {\n        const hookListeners = atom[listenersKey]\n        if (hookListeners) {\n            hookListeners.delete(cb)\n            if (hookListeners.size === 0) {\n                delete atom[listenersKey]\n            }\n        }\n    }\n}\n", "import { globalState, isolateGlobalState, setReactionScheduler } from \"../internal\"\n\nconst NEVER = \"never\"\nconst ALWAYS = \"always\"\nconst OBSERVED = \"observed\"\n// const IF_AVAILABLE = \"ifavailable\"\n\nexport function configure(options: {\n    enforceActions?: \"never\" | \"always\" | \"observed\"\n    computedRequiresReaction?: boolean\n    /**\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable?: boolean\n    /**\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction?: boolean\n    isolateGlobalState?: boolean\n    disableErrorBoundaries?: boolean\n    safeDescriptors?: boolean\n    reactionScheduler?: (f: () => void) => void\n    useProxies?: \"always\" | \"never\" | \"ifavailable\"\n}): void {\n    if (options.isolateGlobalState === true) {\n        isolateGlobalState()\n    }\n    const { useProxies, enforceActions } = options\n    if (useProxies !== undefined) {\n        globalState.useProxies =\n            useProxies === ALWAYS\n                ? true\n                : useProxies === NEVER\n                ? false\n                : typeof Proxy !== \"undefined\"\n    }\n    if (useProxies === \"ifavailable\") {\n        globalState.verifyProxies = true\n    }\n    if (enforceActions !== undefined) {\n        const ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED\n        globalState.enforceActions = ea\n        globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true\n    }\n    ;[\n        \"computedRequiresReaction\",\n        \"reactionRequiresObservable\",\n        \"observableRequiresReaction\",\n        \"disableErrorBoundaries\",\n        \"safeDescriptors\"\n    ].forEach(key => {\n        if (key in options) {\n            globalState[key] = !!options[key]\n        }\n    })\n    globalState.allowStateReads = !globalState.observableRequiresReaction\n    if (__DEV__ && globalState.disableErrorBoundaries === true) {\n        console.warn(\n            \"WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.\"\n        )\n    }\n    if (options.reactionScheduler) {\n        setReactionScheduler(options.reactionScheduler)\n    }\n}\n", "import {\n    CreateObservableOptions,\n    isObservableMap,\n    AnnotationsMap,\n    asObservableObject,\n    isPlainObject,\n    ObservableObjectAdministration,\n    isObservable,\n    die,\n    getOwnPropertyDescriptors,\n    $mobx,\n    ownKeys,\n    initObservable\n} from \"../internal\"\n\nexport function extendObservable<A extends Object, B extends Object>(\n    target: A,\n    properties: B,\n    annotations?: AnnotationsMap<B, never>,\n    options?: CreateObservableOptions\n): A & B {\n    if (__DEV__) {\n        if (arguments.length > 4) {\n            die(\"'extendObservable' expected 2-4 arguments\")\n        }\n        if (typeof target !== \"object\") {\n            die(\"'extendObservable' expects an object as first argument\")\n        }\n        if (isObservableMap(target)) {\n            die(\"'extendObservable' should not be used on maps, use map.merge instead\")\n        }\n        if (!isPlainObject(properties)) {\n            die(`'extendObservable' only accepts plain objects as second argument`)\n        }\n        if (isObservable(properties) || isObservable(annotations)) {\n            die(`Extending an object with another observable (object) is not supported`)\n        }\n    }\n    // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)\n    const descriptors = getOwnPropertyDescriptors(properties)\n\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n        ownKeys(descriptors).forEach(key => {\n            adm.extend_(\n                key,\n                descriptors[key as any],\n                // must pass \"undefined\" for { key: undefined }\n                !annotations ? true : key in annotations ? annotations[key] : true\n            )\n        })\n    })\n\n    return target as any\n}\n", "import { IDepTreeNode, getAtom, getObservers, hasObservers } from \"../internal\"\n\nexport interface IDependencyTree {\n    name: string\n    dependencies?: IDependencyTree[]\n}\n\nexport interface IObserverTree {\n    name: string\n    observers?: IObserverTree[]\n}\n\nexport function getDependencyTree(thing: any, property?: string): IDependencyTree {\n    return nodeToDependencyTree(getAtom(thing, property))\n}\n\nfunction nodeToDependencyTree(node: IDepTreeNode): IDependencyTree {\n    const result: IDependencyTree = {\n        name: node.name_\n    }\n    if (node.observing_ && node.observing_.length > 0) {\n        result.dependencies = unique(node.observing_).map(nodeToDependencyTree)\n    }\n    return result\n}\n\nexport function getObserverTree(thing: any, property?: string): IObserverTree {\n    return nodeToObserverTree(getAtom(thing, property))\n}\n\nfunction nodeToObserverTree(node: IDepTreeNode): IObserverTree {\n    const result: IObserverTree = {\n        name: node.name_\n    }\n    if (hasObservers(node as any)) {\n        result.observers = Array.from(<any>getObservers(node as any)).map(<any>nodeToObserverTree)\n    }\n    return result\n}\n\nfunction unique<T>(list: T[]): T[] {\n    return Array.from(new Set(list))\n}\n", "import {\n    action,\n    noop,\n    die,\n    isFunction,\n    Annotation,\n    isStringish,\n    storeAnnotation,\n    createFlowAnnotation,\n    createDecoratorAnnotation,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassMethodDecorator } from \"../types/decorator_fills\"\n\nexport const FLOW = \"flow\"\n\nlet generatorId = 0\n\nexport function FlowCancellationError() {\n    this.message = \"FLOW_CANCELLED\"\n}\nFlowCancellationError.prototype = Object.create(Error.prototype)\n\nexport function isFlowCancellationError(error: Error) {\n    return error instanceof FlowCancellationError\n}\n\nexport type CancellablePromise<T> = Promise<T> & { cancel(): void }\n\ninterface Flow extends Annotation, PropertyDecorator, ClassMethodDecorator {\n    <R, Args extends any[]>(\n        generator: (...args: Args) => Generator<any, R, any> | AsyncGenerator<any, R, any>\n    ): (...args: Args) => CancellablePromise<R>\n    bound: Annotation & PropertyDecorator & ClassMethodDecorator\n}\n\nconst flowAnnotation = createFlowAnnotation(\"flow\")\nconst flowBoundAnnotation = createFlowAnnotation(\"flow.bound\", { bound: true })\n\nexport const flow: Flow = Object.assign(\n    function flow(arg1, arg2?) {\n        // @flow (2022.3 Decorators)\n        if (is20223Decorator(arg2)) {\n            return flowAnnotation.decorate_20223_(arg1, arg2)\n        }\n        // @flow\n        if (isStringish(arg2)) {\n            return storeAnnotation(arg1, arg2, flowAnnotation)\n        }\n        // flow(fn)\n        if (__DEV__ && arguments.length !== 1) {\n            die(`Flow expects single argument with generator function`)\n        }\n        const generator = arg1\n        const name = generator.name || \"<unnamed flow>\"\n\n        // Implementation based on https://github.com/tj/co/blob/master/index.js\n        const res = function () {\n            const ctx = this\n            const args = arguments\n            const runId = ++generatorId\n            const gen = action(`${name} - runid: ${runId} - init`, generator).apply(ctx, args)\n            let rejector: (error: any) => void\n            let pendingPromise: CancellablePromise<any> | undefined = undefined\n\n            const promise = new Promise(function (resolve, reject) {\n                let stepId = 0\n                rejector = reject\n\n                function onFulfilled(res: any) {\n                    pendingPromise = undefined\n                    let ret\n                    try {\n                        ret = action(\n                            `${name} - runid: ${runId} - yield ${stepId++}`,\n                            gen.next\n                        ).call(gen, res)\n                    } catch (e) {\n                        return reject(e)\n                    }\n\n                    next(ret)\n                }\n\n                function onRejected(err: any) {\n                    pendingPromise = undefined\n                    let ret\n                    try {\n                        ret = action(\n                            `${name} - runid: ${runId} - yield ${stepId++}`,\n                            gen.throw!\n                        ).call(gen, err)\n                    } catch (e) {\n                        return reject(e)\n                    }\n                    next(ret)\n                }\n\n                function next(ret: any) {\n                    if (isFunction(ret?.then)) {\n                        // an async iterator\n                        ret.then(next, reject)\n                        return\n                    }\n                    if (ret.done) {\n                        return resolve(ret.value)\n                    }\n                    pendingPromise = Promise.resolve(ret.value) as any\n                    return pendingPromise!.then(onFulfilled, onRejected)\n                }\n\n                onFulfilled(undefined) // kick off the process\n            }) as any\n\n            promise.cancel = action(`${name} - runid: ${runId} - cancel`, function () {\n                try {\n                    if (pendingPromise) {\n                        cancelPromise(pendingPromise)\n                    }\n                    // Finally block can return (or yield) stuff..\n                    const res = gen.return!(undefined as any)\n                    // eat anything that promise would do, it's cancelled!\n                    const yieldedPromise = Promise.resolve(res.value)\n                    yieldedPromise.then(noop, noop)\n                    cancelPromise(yieldedPromise) // maybe it can be cancelled :)\n                    // reject our original promise\n                    rejector(new FlowCancellationError())\n                } catch (e) {\n                    rejector(e) // there could be a throwing finally block\n                }\n            })\n            return promise\n        }\n        res.isMobXFlow = true\n        return res\n    } as any,\n    flowAnnotation\n)\n\nflow.bound = createDecoratorAnnotation(flowBoundAnnotation)\n\nfunction cancelPromise(promise) {\n    if (isFunction(promise.cancel)) {\n        promise.cancel()\n    }\n}\n\nexport function flowResult<T>(\n    result: T\n): T extends Generator<any, infer R, any>\n    ? CancellablePromise<R>\n    : T extends CancellablePromise<any>\n    ? T\n    : never {\n    return result as any // just tricking TypeScript :)\n}\n\nexport function isFlow(fn: any): boolean {\n    return fn?.isMobXFlow === true\n}\n", "import {\n    IObservableArray,\n    IObservableValue,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isObservableValue,\n    ObservableSet,\n    die,\n    isStringish\n} from \"../internal\"\n\nexport type ReadInterceptor<T> = (value: any) => T\n\n/** Experimental feature right now, tested indirectly via Mobx-State-Tree */\nexport function interceptReads<T>(value: IObservableValue<T>, handler: ReadInterceptor<T>): Lambda\nexport function interceptReads<T>(\n    observableArray: IObservableArray<T>,\n    handler: ReadInterceptor<T>\n): Lambda\nexport function interceptReads<K, V>(\n    observableMap: ObservableMap<K, V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads<V>(\n    observableSet: ObservableSet<V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads(\n    object: Object,\n    property: string,\n    handler: ReadInterceptor<any>\n): Lambda\nexport function interceptReads(thing, propOrHandler?, handler?): Lambda {\n    let target\n    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n        target = getAdministration(thing)\n    } else if (isObservableObject(thing)) {\n        if (__DEV__ && !isStringish(propOrHandler)) {\n            return die(\n                `InterceptReads can only be used with a specific property, not with an object in general`\n            )\n        }\n        target = getAdministration(thing, propOrHandler)\n    } else if (__DEV__) {\n        return die(`Expected observable map, object or array as first array`)\n    }\n    if (__DEV__ && target.dehancer !== undefined) {\n        return die(`An intercept reader was already established`)\n    }\n    target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler\n    return () => {\n        target.dehancer = undefined\n    }\n}\n", "import {\n    IArrayWillChange,\n    IArrayWillSplice,\n    IInterceptor,\n    IMapWillChange,\n    IObjectWillChange,\n    IObservableArray,\n    IObservableValue,\n    IValueWillChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetWillChange,\n    isFunction\n} from \"../internal\"\n\nexport function intercept<T>(\n    value: IObservableValue<T>,\n    handler: IInterceptor<IValueWillChange<T>>\n): Lambda\nexport function intercept<T>(\n    observableArray: IObservableArray<T> | Array<T>,\n    handler: IInterceptor<IArrayWillChange<T> | IArrayWillSplice<T>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    handler: IInterceptor<IMapWillChange<K, V>>\n): Lambda\nexport function intercept<V>(\n    observableSet: ObservableSet<V> | Set<V>,\n    handler: IInterceptor<ISetWillChange<V>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    property: K,\n    handler: IInterceptor<IValueWillChange<V>>\n): Lambda\nexport function intercept(object: object, handler: IInterceptor<IObjectWillChange>): Lambda\nexport function intercept<T extends object, K extends keyof T>(\n    object: T,\n    property: K,\n    handler: IInterceptor<IValueWillChange<T[K]>>\n): Lambda\nexport function intercept(thing, propOrHandler?, handler?): Lambda {\n    if (isFunction(handler)) {\n        return interceptProperty(thing, propOrHandler, handler)\n    } else {\n        return interceptInterceptable(thing, propOrHandler)\n    }\n}\n\nfunction interceptInterceptable(thing, handler) {\n    return getAdministration(thing).intercept_(handler)\n}\n\nfunction interceptProperty(thing, property, handler) {\n    return getAdministration(thing, property).intercept_(handler)\n}\n", "import { $mobx, getAtom, isComputedValue, isObservableObject, die, isStringish } from \"../internal\"\n\nexport function _isComputed(value, property?: PropertyKey): boolean {\n    if (property === undefined) {\n        return isComputedValue(value)\n    }\n    if (isObservableObject(value) === false) {\n        return false\n    }\n    if (!value[$mobx].values_.has(property)) {\n        return false\n    }\n    const atom = getAtom(value, property)\n    return isComputedValue(atom)\n}\n\nexport function isComputed(value: any): boolean {\n    if (__DEV__ && arguments.length > 1) {\n        return die(\n            `isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property`\n        )\n    }\n    return _isComputed(value)\n}\n\nexport function isComputedProp(value: any, propName: PropertyKey): boolean {\n    if (__DEV__ && !isStringish(propName)) {\n        return die(`isComputed expected a property name as second argument`)\n    }\n    return _isComputed(value, propName)\n}\n", "import {\n    $mobx,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction,\n    die,\n    isStringish\n} from \"../internal\"\n\nfunction _isObservable(value, property?: PropertyKey): boolean {\n    if (!value) {\n        return false\n    }\n    if (property !== undefined) {\n        if (__DEV__ && (isObservableMap(value) || isObservableArray(value))) {\n            return die(\n                \"isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\"\n            )\n        }\n        if (isObservableObject(value)) {\n            return value[$mobx].values_.has(property)\n        }\n        return false\n    }\n    // For first check, see #701\n    return (\n        isObservableObject(value) ||\n        !!value[$mobx] ||\n        isAtom(value) ||\n        isReaction(value) ||\n        isComputedValue(value)\n    )\n}\n\nexport function isObservable(value: any): boolean {\n    if (__DEV__ && arguments.length !== 1) {\n        die(\n            `isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property`\n        )\n    }\n    return _isObservable(value)\n}\n\nexport function isObservableProp(value: any, propName: PropertyKey): boolean {\n    if (__DEV__ && !isStringish(propName)) {\n        return die(`expected a property name as second argument`)\n    }\n    return _isObservable(value, propName)\n}\n", "import {\n    $mobx,\n    IIsObservableObject,\n    IObservableArray,\n    ObservableMap,\n    ObservableSet,\n    ObservableObjectAdministration,\n    endBatch,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    startBatch,\n    die\n} from \"../internal\"\n\nexport function keys<K>(map: ObservableMap<K, any>): ReadonlyArray<K>\nexport function keys<T>(ar: IObservableArray<T>): ReadonlyArray<number>\nexport function keys<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function keys<T extends Object>(obj: T): ReadonlyArray<PropertyKey>\nexport function keys(obj: any): any {\n    if (isObservableObject(obj)) {\n        return (\n            (obj as any as IIsObservableObject)[$mobx] as ObservableObjectAdministration\n        ).keys_()\n    }\n    if (isObservableMap(obj) || isObservableSet(obj)) {\n        return Array.from(obj.keys())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((_, index) => index)\n    }\n    die(5)\n}\n\nexport function values<K, T>(map: ObservableMap<K, T>): ReadonlyArray<T>\nexport function values<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function values<T>(ar: IObservableArray<T>): ReadonlyArray<T>\nexport function values<T = any>(obj: T): ReadonlyArray<T extends object ? T[keyof T] : any>\nexport function values(obj: any): string[] {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => obj[key])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => obj.get(key))\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.values())\n    }\n    if (isObservableArray(obj)) {\n        return obj.slice()\n    }\n    die(6)\n}\n\nexport function entries<K, T>(map: ObservableMap<K, T>): ReadonlyArray<[K, T]>\nexport function entries<T>(set: ObservableSet<T>): ReadonlyArray<[T, T]>\nexport function entries<T>(ar: IObservableArray<T>): ReadonlyArray<[number, T]>\nexport function entries<T = any>(\n    obj: T\n): ReadonlyArray<[string, T extends object ? T[keyof T] : any]>\nexport function entries(obj: any): any {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => [key, obj[key]])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => [key, obj.get(key)])\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.entries())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((key, index) => [index, key])\n    }\n    die(7)\n}\n\nexport function set<V>(obj: ObservableMap<PropertyKey, V>, values: { [key: string]: V })\nexport function set<K, V>(obj: ObservableMap<K, V>, key: K, value: V)\nexport function set<T>(obj: ObservableSet<T>, value: T)\nexport function set<T>(obj: IObservableArray<T>, index: number, value: T)\nexport function set<T extends Object>(obj: T, values: { [key: string]: any })\nexport function set<T extends Object>(obj: T, key: PropertyKey, value: any)\nexport function set(obj: any, key: any, value?: any): void {\n    if (arguments.length === 2 && !isObservableSet(obj)) {\n        startBatch()\n        const values = key\n        try {\n            for (let key in values) {\n                set(obj, key, values[key])\n            }\n        } finally {\n            endBatch()\n        }\n        return\n    }\n    if (isObservableObject(obj)) {\n        ;(obj as any as IIsObservableObject)[$mobx].set_(key, value)\n    } else if (isObservableMap(obj)) {\n        obj.set(key, value)\n    } else if (isObservableSet(obj)) {\n        obj.add(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") {\n            key = parseInt(key, 10)\n        }\n        if (key < 0) {\n            die(`Invalid index: '${key}'`)\n        }\n        startBatch()\n        if (key >= obj.length) {\n            obj.length = key + 1\n        }\n        obj[key] = value\n        endBatch()\n    } else {\n        die(8)\n    }\n}\n\nexport function remove<K, V>(obj: ObservableMap<K, V>, key: K)\nexport function remove<T>(obj: ObservableSet<T>, key: T)\nexport function remove<T>(obj: IObservableArray<T>, index: number)\nexport function remove<T extends Object>(obj: T, key: string)\nexport function remove(obj: any, key: any): void {\n    if (isObservableObject(obj)) {\n        ;(obj as any as IIsObservableObject)[$mobx].delete_(key)\n    } else if (isObservableMap(obj)) {\n        obj.delete(key)\n    } else if (isObservableSet(obj)) {\n        obj.delete(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") {\n            key = parseInt(key, 10)\n        }\n        obj.splice(key, 1)\n    } else {\n        die(9)\n    }\n}\n\nexport function has<K>(obj: ObservableMap<K, any>, key: K): boolean\nexport function has<T>(obj: ObservableSet<T>, key: T): boolean\nexport function has<T>(obj: IObservableArray<T>, index: number): boolean\nexport function has<T extends Object>(obj: T, key: string): boolean\nexport function has(obj: any, key: any): boolean {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].has_(key)\n    } else if (isObservableMap(obj)) {\n        return obj.has(key)\n    } else if (isObservableSet(obj)) {\n        return obj.has(key)\n    } else if (isObservableArray(obj)) {\n        return key >= 0 && key < obj.length\n    }\n    die(10)\n}\n\nexport function get<K, V>(obj: ObservableMap<K, V>, key: K): V | undefined\nexport function get<T>(obj: IObservableArray<T>, index: number): T | undefined\nexport function get<T extends Object>(obj: T, key: string): any\nexport function get(obj: any, key: any): any {\n    if (!has(obj, key)) {\n        return undefined\n    }\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].get_(key)\n    } else if (isObservableMap(obj)) {\n        return obj.get(key)\n    } else if (isObservableArray(obj)) {\n        return obj[key]\n    }\n    die(11)\n}\n\nexport function apiDefineProperty(obj: Object, key: PropertyKey, descriptor: PropertyDescriptor) {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].defineProperty_(key, descriptor)\n    }\n    die(39)\n}\n\nexport function apiOwnKeys(obj: Object) {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].ownKeys_()\n    }\n    die(38)\n}\n", "import {\n    IArrayDidChange,\n    IComputedValue,\n    IMapDidChange,\n    IObjectDidChange,\n    IObservableArray,\n    IObservableValue,\n    IValueDidChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetDidChange,\n    isFunction\n} from \"../internal\"\n\nexport function observe<T>(\n    value: IObservableValue<T> | IComputedValue<T>,\n    listener: (change: IValueDidChange<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T>(\n    observableArray: IObservableArray<T> | Array<T>,\n    listener: (change: IArrayDidChange<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<V>(\n    // ObservableSet/ObservableMap are required despite they implement Set/Map: https://github.com/mobxjs/mobx/pull/3180#discussion_r746542929\n    observableSet: ObservableSet<V> | Set<V>,\n    listener: (change: ISetDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    listener: (change: IMapDidChange<K, V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    property: K,\n    listener: (change: IValueDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(\n    object: Object,\n    listener: (change: IObjectDidChange) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T, K extends keyof T>(\n    object: T,\n    property: K,\n    listener: (change: IValueDidChange<T[K]>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(thing, propOrCb?, cbOrFire?, fireImmediately?): Lambda {\n    if (isFunction(cbOrFire)) {\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately)\n    } else {\n        return observeObservable(thing, propOrCb, cbOrFire)\n    }\n}\n\nfunction observeObservable(thing, listener, fireImmediately: boolean) {\n    return getAdministration(thing).observe_(listener, fireImmediately)\n}\n\nfunction observeObservableProperty(thing, property, listener, fireImmediately: boolean) {\n    return getAdministration(thing, property).observe_(listener, fireImmediately)\n}\n", "import {\n    isObservable,\n    isObservableArray,\n    isObservableValue,\n    isObservableMap,\n    isObservableSet,\n    isComputedValue,\n    die,\n    apiOwnKeys,\n    objectPrototype\n} from \"../internal\"\n\nfunction cache<K, V>(map: Map<any, any>, key: K, value: V): V {\n    map.set(key, value)\n    return value\n}\n\nfunction toJSHelper(source, __alreadySeen: Map<any, any>) {\n    if (\n        source == null ||\n        typeof source !== \"object\" ||\n        source instanceof Date ||\n        !isObservable(source)\n    ) {\n        return source\n    }\n\n    if (isObservableValue(source) || isComputedValue(source)) {\n        return toJSHelper(source.get(), __alreadySeen)\n    }\n    if (__alreadySeen.has(source)) {\n        return __alreadySeen.get(source)\n    }\n    if (isObservableArray(source)) {\n        const res = cache(__alreadySeen, source, new Array(source.length))\n        source.forEach((value, idx) => {\n            res[idx] = toJSHelper(value, __alreadySeen)\n        })\n        return res\n    }\n    if (isObservableSet(source)) {\n        const res = cache(__alreadySeen, source, new Set())\n        source.forEach(value => {\n            res.add(toJSHelper(value, __alreadySeen))\n        })\n        return res\n    }\n    if (isObservableMap(source)) {\n        const res = cache(__alreadySeen, source, new Map())\n        source.forEach((value, key) => {\n            res.set(key, toJSHelper(value, __alreadySeen))\n        })\n        return res\n    } else {\n        // must be observable object\n        const res = cache(__alreadySeen, source, {})\n        apiOwnKeys(source).forEach((key: any) => {\n            if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n                res[key] = toJSHelper(source[key], __alreadySeen)\n            }\n        })\n        return res\n    }\n}\n\n/**\n * Recursively converts an observable to it's non-observable native counterpart.\n * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.\n * Computed and other non-enumerable properties are completely ignored.\n * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.\n */\nexport function toJS<T>(source: T, options?: any): T {\n    if (__DEV__ && options) {\n        die(\"toJS no longer supports options\")\n    }\n    return toJSHelper(source, new Map())\n}\n", "import { TraceMode, die, getAtom, globalState } from \"../internal\"\n\nexport function trace(thing?: any, prop?: string, enterBreakPoint?: boolean): void\nexport function trace(thing?: any, enterBreakPoint?: boolean): void\nexport function trace(enterBreakPoint?: boolean): void\nexport function trace(...args: any[]): void {\n    if (!__DEV__) {\n        return\n    }\n    let enterBreakPoint = false\n    if (typeof args[args.length - 1] === \"boolean\") {\n        enterBreakPoint = args.pop()\n    }\n    const derivation = getAtomFromArgs(args)\n    if (!derivation) {\n        return die(\n            `'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly`\n        )\n    }\n    if (derivation.isTracing_ === TraceMode.NONE) {\n        console.log(`[mobx.trace] '${derivation.name_}' tracing enabled`)\n    }\n    derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG\n}\n\nfunction getAtomFromArgs(args): any {\n    switch (args.length) {\n        case 0:\n            return globalState.trackingDerivation\n        case 1:\n            return getAtom(args[0])\n        case 2:\n            return getAtom(args[0], args[1])\n    }\n}\n", "import { endBatch, startBatch } from \"../internal\"\n\n/**\n * During a transaction no views are updated until the end of the transaction.\n * The transaction will be run synchronously nonetheless.\n *\n * @param action a function that updates some reactive state\n * @returns any value that was returned by the 'action' parameter.\n */\nexport function transaction<T>(action: () => T, thisArg = undefined): T {\n    startBatch()\n    try {\n        return action.apply(thisArg)\n    } finally {\n        endBatch()\n    }\n}\n", "import {\n    $mobx,\n    IReactionDisposer,\n    Lambda,\n    autorun,\n    createAction,\n    getNextId,\n    die,\n    allowStateChanges,\n    GenericAbortSignal\n} from \"../internal\"\n\nexport interface IWhenOptions {\n    name?: string\n    timeout?: number\n    onError?: (error: any) => void\n    signal?: GenericAbortSignal\n}\n\nexport function when(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void }\nexport function when(\n    predicate: () => boolean,\n    effect: Lambda,\n    opts?: IWhenOptions\n): IReactionDisposer\nexport function when(predicate: any, arg1?: any, arg2?: any): any {\n    if (arguments.length === 1 || (arg1 && typeof arg1 === \"object\")) {\n        return whenPromise(predicate, arg1)\n    }\n    return _when(predicate, arg1, arg2 || {})\n}\n\nfunction _when(predicate: () => boolean, effect: Lambda, opts: IWhenOptions): IReactionDisposer {\n    let timeoutHandle: any\n    if (typeof opts.timeout === \"number\") {\n        const error = new Error(\"WHEN_TIMEOUT\")\n        timeoutHandle = setTimeout(() => {\n            if (!disposer[$mobx].isDisposed) {\n                disposer()\n                if (opts.onError) {\n                    opts.onError(error)\n                } else {\n                    throw error\n                }\n            }\n        }, opts.timeout)\n    }\n\n    opts.name = __DEV__ ? opts.name || \"When@\" + getNextId() : \"When\"\n    const effectAction = createAction(\n        __DEV__ ? opts.name + \"-effect\" : \"When-effect\",\n        effect as Function\n    )\n    // eslint-disable-next-line\n    var disposer = autorun(r => {\n        // predicate should not change state\n        let cond = allowStateChanges(false, predicate)\n        if (cond) {\n            r.dispose()\n            if (timeoutHandle) {\n                clearTimeout(timeoutHandle)\n            }\n            effectAction()\n        }\n    }, opts)\n    return disposer\n}\n\nfunction whenPromise(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void } {\n    if (__DEV__ && opts && opts.onError) {\n        return die(`the options 'onError' and 'promise' cannot be combined`)\n    }\n    if (opts?.signal?.aborted) {\n        return Object.assign(Promise.reject(new Error(\"WHEN_ABORTED\")), { cancel: () => null })\n    }\n    let cancel\n    let abort\n    const res = new Promise((resolve, reject) => {\n        let disposer = _when(predicate, resolve as Lambda, { ...opts, onError: reject })\n        cancel = () => {\n            disposer()\n            reject(new Error(\"WHEN_CANCELLED\"))\n        }\n        abort = () => {\n            disposer()\n            reject(new Error(\"WHEN_ABORTED\"))\n        }\n        opts?.signal?.addEventListener?.(\"abort\", abort)\n    }).finally(() => opts?.signal?.removeEventListener?.(\"abort\", abort))\n    ;(res as any).cancel = cancel\n    return res as any\n}\n", "import {\n    $mobx,\n    IIsObservableObject,\n    ObservableObjectAdministration,\n    warnAboutProxyRequirement,\n    assertProxies,\n    die,\n    isStringish,\n    globalState,\n    CreateObservableOptions,\n    asObservableObject\n} from \"../internal\"\n\nfunction getAdm(target): ObservableObjectAdministration {\n    return target[$mobx]\n}\n\n// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\nconst objectProxyTraps: ProxyHandler<any> = {\n    has(target: IIsObservableObject, name: PropertyKey): boolean {\n        if (__DEV__ && globalState.trackingDerivation) {\n            warnAboutProxyRequirement(\n                \"detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.\"\n            )\n        }\n        return getAdm(target).has_(name)\n    },\n    get(target: IIsObservableObject, name: PropertyKey): any {\n        return getAdm(target).get_(name)\n    },\n    set(target: IIsObservableObject, name: PropertyKey, value: any): boolean {\n        if (!isStringish(name)) {\n            return false\n        }\n        if (__DEV__ && !getAdm(target).values_.has(name)) {\n            warnAboutProxyRequirement(\n                \"add a new observable property through direct assignment. Use 'set' from 'mobx' instead.\"\n            )\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).set_(name, value, true) ?? true\n    },\n    deleteProperty(target: IIsObservableObject, name: PropertyKey): boolean {\n        if (__DEV__) {\n            warnAboutProxyRequirement(\n                \"delete properties from an observable object. Use 'remove' from 'mobx' instead.\"\n            )\n        }\n        if (!isStringish(name)) {\n            return false\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).delete_(name, true) ?? true\n    },\n    defineProperty(\n        target: IIsObservableObject,\n        name: PropertyKey,\n        descriptor: PropertyDescriptor\n    ): boolean {\n        if (__DEV__) {\n            warnAboutProxyRequirement(\n                \"define property on an observable object. Use 'defineProperty' from 'mobx' instead.\"\n            )\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).defineProperty_(name, descriptor) ?? true\n    },\n    ownKeys(target: IIsObservableObject): ArrayLike<string | symbol> {\n        if (__DEV__ && globalState.trackingDerivation) {\n            warnAboutProxyRequirement(\n                \"iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.\"\n            )\n        }\n        return getAdm(target).ownKeys_()\n    },\n    preventExtensions(target) {\n        die(13)\n    }\n}\n\nexport function asDynamicObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n    assertProxies()\n    target = asObservableObject(target, options)\n    return (target[$mobx].proxy_ ??= new Proxy(target, objectProxyTraps))\n}\n", "import { Lambda, once, untrackedEnd, untrackedStart, die } from \"../internal\"\n\nexport type IInterceptor<T> = (change: T) => T | null\n\nexport interface IInterceptable<T> {\n    interceptors_: IInterceptor<T>[] | undefined\n}\n\nexport function hasInterceptors(interceptable: IInterceptable<any>) {\n    return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0\n}\n\nexport function registerInterceptor<T>(\n    interceptable: IInterceptable<T>,\n    handler: IInterceptor<T>\n): Lambda {\n    const interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = [])\n    interceptors.push(handler)\n    return once(() => {\n        const idx = interceptors.indexOf(handler)\n        if (idx !== -1) {\n            interceptors.splice(idx, 1)\n        }\n    })\n}\n\nexport function interceptChange<T>(\n    interceptable: IInterceptable<T | null>,\n    change: T | null\n): T | null {\n    const prevU = untrackedStart()\n    try {\n        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n        const interceptors = [...(interceptable.interceptors_ || [])]\n        for (let i = 0, l = interceptors.length; i < l; i++) {\n            change = interceptors[i](change)\n            if (change && !(change as any).type) {\n                die(14)\n            }\n            if (!change) {\n                break\n            }\n        }\n        return change\n    } finally {\n        untrackedEnd(prevU)\n    }\n}\n", "import { Lambda, once, untrackedEnd, untrackedStart } from \"../internal\"\n\nexport interface IListenable {\n    changeListeners_: Function[] | undefined\n}\n\nexport function hasListeners(listenable: IListenable) {\n    return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0\n}\n\nexport function registerListener(listenable: IListenable, handler: Function): Lambda {\n    const listeners = listenable.changeListeners_ || (listenable.changeListeners_ = [])\n    listeners.push(handler)\n    return once(() => {\n        const idx = listeners.indexOf(handler)\n        if (idx !== -1) {\n            listeners.splice(idx, 1)\n        }\n    })\n}\n\nexport function notifyListeners<T>(listenable: IListenable, change: T) {\n    const prevU = untrackedStart()\n    let listeners = listenable.changeListeners_\n    if (!listeners) {\n        return\n    }\n    listeners = listeners.slice()\n    for (let i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](change)\n    }\n    untrackedEnd(prevU)\n}\n", "import {\n    $mobx,\n    asObservableObject,\n    AnnotationsMap,\n    CreateObservableOptions,\n    ObservableObjectAdministration,\n    collectStoredAnnotations,\n    isPlainObject,\n    isObservableObject,\n    die,\n    ownKeys,\n    extendObservable,\n    addHiddenProp,\n    storedAnnotationsSymbol,\n    initObservable\n} from \"../internal\"\n\n// Hack based on https://github.com/Microsoft/TypeScript/issues/14829#issuecomment-322267089\n// We need this, because otherwise, AdditionalKeys is going to be inferred to be any\n// set of superfluous keys. But, we rather want to get a compile error unless AdditionalKeys is\n// _explicity_ passed as generic argument\n// Fixes: https://github.com/mobxjs/mobx/issues/2325#issuecomment-691070022\ntype NoInfer<T> = [T][T extends any ? 0 : never]\n\ntype MakeObservableOptions = Omit<CreateObservableOptions, \"proxy\">\n\nexport function makeObservable<T extends object, AdditionalKeys extends PropertyKey = never>(\n    target: T,\n    annotations?: AnnotationsMap<T, NoInfer<AdditionalKeys>>,\n    options?: MakeObservableOptions\n): T {\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n        if (__DEV__ && annotations && target[storedAnnotationsSymbol]) {\n            die(\n                `makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.`\n            )\n        }\n        // Default to decorators\n        annotations ??= collectStoredAnnotations(target)\n\n        // Annotate\n        ownKeys(annotations).forEach(key => adm.make_(key, annotations![key]))\n    })\n    return target\n}\n\n// proto[keysSymbol] = new Set<PropertyKey>()\nconst keysSymbol = Symbol(\"mobx-keys\")\n\nexport function makeAutoObservable<T extends object, AdditionalKeys extends PropertyKey = never>(\n    target: T,\n    overrides?: AnnotationsMap<T, NoInfer<AdditionalKeys>>,\n    options?: MakeObservableOptions\n): T {\n    if (__DEV__) {\n        if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) {\n            die(`'makeAutoObservable' can only be used for classes that don't have a superclass`)\n        }\n        if (isObservableObject(target)) {\n            die(`makeAutoObservable can only be used on objects not already made observable`)\n        }\n    }\n\n    // Optimization: avoid visiting protos\n    // Assumes that annotation.make_/.extend_ works the same for plain objects\n    if (isPlainObject(target)) {\n        return extendObservable(target, target, overrides, options)\n    }\n\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n\n        // Optimization: cache keys on proto\n        // Assumes makeAutoObservable can be called only once per object and can't be used in subclass\n        if (!target[keysSymbol]) {\n            const proto = Object.getPrototypeOf(target)\n            const keys = new Set([...ownKeys(target), ...ownKeys(proto)])\n            keys.delete(\"constructor\")\n            keys.delete($mobx)\n            addHiddenProp(proto, keysSymbol, keys)\n        }\n\n        target[keysSymbol].forEach(key =>\n            adm.make_(\n                key,\n                // must pass \"undefined\" for { key: undefined }\n                !overrides ? true : key in overrides ? overrides[key] : true\n            )\n        )\n    })\n\n    return target\n}\n", "import {\n    $mobx,\n    Atom,\n    EMPTY_ARRAY,\n    IAtom,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    addHiddenFinalProp,\n    checkIfStateModificationsAreAllowed,\n    createInstanceofPredicate,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isObject,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    assertProxies,\n    reserveArrayBuffer,\n    hasProp,\n    die,\n    globalState,\n    initObservable\n} from \"../internal\"\n\nconst SPLICE = \"splice\"\nexport const UPDATE = \"update\"\nexport const MAX_SPLICE_SIZE = 10000 // See e.g. https://github.com/mobxjs/mobx/issues/859\n\nexport interface IObservableArray<T = any> extends Array<T> {\n    spliceWithArray(index: number, deleteCount?: number, newItems?: T[]): T[]\n    clear(): T[]\n    replace(newItems: T[]): T[]\n    remove(value: T): boolean\n    toJSON(): T[]\n}\n\ninterface IArrayBaseChange<T> {\n    object: IObservableArray<T>\n    observableKind: \"array\"\n    debugObjectName: string\n    index: number\n}\n\nexport type IArrayDidChange<T = any> = IArrayUpdate<T> | IArraySplice<T>\n\nexport interface IArrayUpdate<T = any> extends IArrayBaseChange<T> {\n    type: \"update\"\n    newValue: T\n    oldValue: T\n}\n\nexport interface IArraySplice<T = any> extends IArrayBaseChange<T> {\n    type: \"splice\"\n    added: T[]\n    addedCount: number\n    removed: T[]\n    removedCount: number\n}\n\nexport interface IArrayWillChange<T = any> {\n    object: IObservableArray<T>\n    index: number\n    type: \"update\"\n    newValue: T\n}\n\nexport interface IArrayWillSplice<T = any> {\n    object: IObservableArray<T>\n    index: number\n    type: \"splice\"\n    added: T[]\n    removedCount: number\n}\n\nconst arrayTraps = {\n    get(target, name) {\n        const adm: ObservableArrayAdministration = target[$mobx]\n        if (name === $mobx) {\n            return adm\n        }\n        if (name === \"length\") {\n            return adm.getArrayLength_()\n        }\n        if (typeof name === \"string\" && !isNaN(name as any)) {\n            return adm.get_(parseInt(name))\n        }\n        if (hasProp(arrayExtensions, name)) {\n            return arrayExtensions[name]\n        }\n        return target[name]\n    },\n    set(target, name, value): boolean {\n        const adm: ObservableArrayAdministration = target[$mobx]\n        if (name === \"length\") {\n            adm.setArrayLength_(value)\n        }\n        if (typeof name === \"symbol\" || isNaN(name)) {\n            target[name] = value\n        } else {\n            // numeric string\n            adm.set_(parseInt(name), value)\n        }\n        return true\n    },\n    preventExtensions() {\n        die(15)\n    }\n}\n\nexport class ObservableArrayAdministration\n    implements IInterceptable<IArrayWillChange<any> | IArrayWillSplice<any>>, IListenable\n{\n    atom_: IAtom\n    readonly values_: any[] = [] // this is the prop that gets proxied, so can't replace it!\n    interceptors_\n    changeListeners_\n    enhancer_: (newV: any, oldV: any | undefined) => any\n    dehancer: any\n    proxy_!: IObservableArray<any>\n    lastKnownLength_ = 0\n\n    constructor(\n        name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n        enhancer: IEnhancer<any>,\n        public owned_: boolean,\n        public legacyMode_: boolean\n    ) {\n        this.atom_ = new Atom(name)\n        this.enhancer_ = (newV, oldV) =>\n            enhancer(newV, oldV, __DEV__ ? name + \"[..]\" : \"ObservableArray[..]\")\n    }\n\n    dehanceValue_(value: any): any {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    dehanceValues_(values: any[]): any[] {\n        if (this.dehancer !== undefined && values.length > 0) {\n            return values.map(this.dehancer) as any\n        }\n        return values\n    }\n\n    intercept_(handler: IInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>): Lambda {\n        return registerInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>(this, handler)\n    }\n\n    observe_(\n        listener: (changeData: IArrayDidChange<any>) => void,\n        fireImmediately = false\n    ): Lambda {\n        if (fireImmediately) {\n            listener(<IArraySplice<any>>{\n                observableKind: \"array\",\n                object: this.proxy_ as any,\n                debugObjectName: this.atom_.name_,\n                type: \"splice\",\n                index: 0,\n                added: this.values_.slice(),\n                addedCount: this.values_.length,\n                removed: [],\n                removedCount: 0\n            })\n        }\n        return registerListener(this, listener)\n    }\n\n    getArrayLength_(): number {\n        this.atom_.reportObserved()\n        return this.values_.length\n    }\n\n    setArrayLength_(newLength: number) {\n        if (typeof newLength !== \"number\" || isNaN(newLength) || newLength < 0) {\n            die(\"Out of range: \" + newLength)\n        }\n        let currentLength = this.values_.length\n        if (newLength === currentLength) {\n            return\n        } else if (newLength > currentLength) {\n            const newItems = new Array(newLength - currentLength)\n            for (let i = 0; i < newLength - currentLength; i++) {\n                newItems[i] = undefined\n            } // No Array.fill everywhere...\n            this.spliceWithArray_(currentLength, 0, newItems)\n        } else {\n            this.spliceWithArray_(newLength, currentLength - newLength)\n        }\n    }\n\n    updateArrayLength_(oldLength: number, delta: number) {\n        if (oldLength !== this.lastKnownLength_) {\n            die(16)\n        }\n        this.lastKnownLength_ += delta\n        if (this.legacyMode_ && delta > 0) {\n            reserveArrayBuffer(oldLength + delta + 1)\n        }\n    }\n\n    spliceWithArray_(index: number, deleteCount?: number, newItems?: any[]): any[] {\n        checkIfStateModificationsAreAllowed(this.atom_)\n        const length = this.values_.length\n\n        if (index === undefined) {\n            index = 0\n        } else if (index > length) {\n            index = length\n        } else if (index < 0) {\n            index = Math.max(0, length + index)\n        }\n\n        if (arguments.length === 1) {\n            deleteCount = length - index\n        } else if (deleteCount === undefined || deleteCount === null) {\n            deleteCount = 0\n        } else {\n            deleteCount = Math.max(0, Math.min(deleteCount, length - index))\n        }\n\n        if (newItems === undefined) {\n            newItems = EMPTY_ARRAY\n        }\n\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IArrayWillSplice<any>>(this as any, {\n                object: this.proxy_ as any,\n                type: SPLICE,\n                index,\n                removedCount: deleteCount,\n                added: newItems\n            })\n            if (!change) {\n                return EMPTY_ARRAY\n            }\n            deleteCount = change.removedCount\n            newItems = change.added\n        }\n\n        newItems =\n            newItems.length === 0 ? newItems : newItems.map(v => this.enhancer_(v, undefined))\n        if (this.legacyMode_ || __DEV__) {\n            const lengthDelta = newItems.length - deleteCount\n            this.updateArrayLength_(length, lengthDelta) // checks if internal array wasn't modified\n        }\n        const res = this.spliceItemsIntoValues_(index, deleteCount, newItems)\n\n        if (deleteCount !== 0 || newItems.length !== 0) {\n            this.notifyArraySplice_(index, newItems, res)\n        }\n        return this.dehanceValues_(res)\n    }\n\n    spliceItemsIntoValues_(index: number, deleteCount: number, newItems: any[]): any[] {\n        if (newItems.length < MAX_SPLICE_SIZE) {\n            return this.values_.splice(index, deleteCount, ...newItems)\n        } else {\n            // The items removed by the splice\n            const res = this.values_.slice(index, index + deleteCount)\n            // The items that that should remain at the end of the array\n            let oldItems = this.values_.slice(index + deleteCount)\n            // New length is the previous length + addition count - deletion count\n            this.values_.length += newItems.length - deleteCount\n            for (let i = 0; i < newItems.length; i++) {\n                this.values_[index + i] = newItems[i]\n            }\n            for (let i = 0; i < oldItems.length; i++) {\n                this.values_[index + newItems.length + i] = oldItems[i]\n            }\n            return res\n        }\n    }\n\n    notifyArrayChildUpdate_(index: number, newValue: any, oldValue: any) {\n        const notifySpy = !this.owned_ && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IArrayDidChange | null =\n            notify || notifySpy\n                ? ({\n                      observableKind: \"array\",\n                      object: this.proxy_,\n                      type: UPDATE,\n                      debugObjectName: this.atom_.name_,\n                      index,\n                      newValue,\n                      oldValue\n                  } as const)\n                : null\n\n        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't\n        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change!)\n        }\n        this.atom_.reportChanged()\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    notifyArraySplice_(index: number, added: any[], removed: any[]) {\n        const notifySpy = !this.owned_ && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IArraySplice | null =\n            notify || notifySpy\n                ? ({\n                      observableKind: \"array\",\n                      object: this.proxy_,\n                      debugObjectName: this.atom_.name_,\n                      type: SPLICE,\n                      index,\n                      removed,\n                      added,\n                      removedCount: removed.length,\n                      addedCount: added.length\n                  } as const)\n                : null\n\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change!)\n        }\n        this.atom_.reportChanged()\n        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    get_(index: number): any | undefined {\n        if (this.legacyMode_ && index >= this.values_.length) {\n            console.warn(\n                __DEV__\n                    ? `[mobx.array] Attempt to read an array index (${index}) that is out of bounds (${this.values_.length}). Please check length first. Out of bound indices will not be tracked by MobX`\n                    : `[mobx] Out of bounds read: ${index}`\n            )\n            return undefined\n        }\n        this.atom_.reportObserved()\n        return this.dehanceValue_(this.values_[index])\n    }\n\n    set_(index: number, newValue: any) {\n        const values = this.values_\n        if (this.legacyMode_ && index > values.length) {\n            // out of bounds\n            die(17, index, values.length)\n        }\n        if (index < values.length) {\n            // update at index in range\n            checkIfStateModificationsAreAllowed(this.atom_)\n            const oldValue = values[index]\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IArrayWillChange<any>>(this as any, {\n                    type: UPDATE,\n                    object: this.proxy_ as any, // since \"this\" is the real array we need to pass its proxy\n                    index,\n                    newValue\n                })\n                if (!change) {\n                    return\n                }\n                newValue = change.newValue\n            }\n            newValue = this.enhancer_(newValue, oldValue)\n            const changed = newValue !== oldValue\n            if (changed) {\n                values[index] = newValue\n                this.notifyArrayChildUpdate_(index, newValue, oldValue)\n            }\n        } else {\n            // For out of bound index, we don't create an actual sparse array,\n            // but rather fill the holes with undefined (same as setArrayLength_).\n            // This could be considered a bug.\n            const newItems = new Array(index + 1 - values.length)\n            for (let i = 0; i < newItems.length - 1; i++) {\n                newItems[i] = undefined\n            } // No Array.fill everywhere...\n            newItems[newItems.length - 1] = newValue\n            this.spliceWithArray_(values.length, 0, newItems)\n        }\n    }\n}\n\nexport function createObservableArray<T>(\n    initialValues: T[] | undefined,\n    enhancer: IEnhancer<T>,\n    name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n    owned = false\n): IObservableArray<T> {\n    assertProxies()\n    return initObservable(() => {\n        const adm = new ObservableArrayAdministration(name, enhancer, owned, false)\n        addHiddenFinalProp(adm.values_, $mobx, adm)\n        const proxy = new Proxy(adm.values_, arrayTraps) as any\n        adm.proxy_ = proxy\n        if (initialValues && initialValues.length) {\n            adm.spliceWithArray_(0, 0, initialValues)\n        }\n        return proxy\n    })\n}\n\n// eslint-disable-next-line\nexport var arrayExtensions = {\n    clear(): any[] {\n        return this.splice(0)\n    },\n\n    replace(newItems: any[]) {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        return adm.spliceWithArray_(0, adm.values_.length, newItems)\n    },\n\n    // Used by JSON.stringify\n    toJSON(): any[] {\n        return this.slice()\n    },\n\n    /*\n     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\n     * since these functions alter the inner structure of the array, the have side effects.\n     * Because the have side effects, they should not be used in computed function,\n     * and for that reason the do not call dependencyState.notifyObserved\n     */\n    splice(index: number, deleteCount?: number, ...newItems: any[]): any[] {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        switch (arguments.length) {\n            case 0:\n                return []\n            case 1:\n                return adm.spliceWithArray_(index)\n            case 2:\n                return adm.spliceWithArray_(index, deleteCount)\n        }\n        return adm.spliceWithArray_(index, deleteCount, newItems)\n    },\n\n    spliceWithArray(index: number, deleteCount?: number, newItems?: any[]): any[] {\n        return (this[$mobx] as ObservableArrayAdministration).spliceWithArray_(\n            index,\n            deleteCount,\n            newItems\n        )\n    },\n\n    push(...items: any[]): number {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.spliceWithArray_(adm.values_.length, 0, items)\n        return adm.values_.length\n    },\n\n    pop() {\n        return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0]\n    },\n\n    shift() {\n        return this.splice(0, 1)[0]\n    },\n\n    unshift(...items: any[]): number {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.spliceWithArray_(0, 0, items)\n        return adm.values_.length\n    },\n\n    reverse(): any[] {\n        // reverse by default mutates in place before returning the result\n        // which makes it both a 'derivation' and a 'mutation'.\n        if (globalState.trackingDerivation) {\n            die(37, \"reverse\")\n        }\n        this.replace(this.slice().reverse())\n        return this\n    },\n\n    sort(): any[] {\n        // sort by default mutates in place before returning the result\n        // which goes against all good practices. Let's not change the array in place!\n        if (globalState.trackingDerivation) {\n            die(37, \"sort\")\n        }\n        const copy = this.slice()\n        copy.sort.apply(copy, arguments)\n        this.replace(copy)\n        return this\n    },\n\n    remove(value: any): boolean {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        const idx = adm.dehanceValues_(adm.values_).indexOf(value)\n        if (idx > -1) {\n            this.splice(idx, 1)\n            return true\n        }\n        return false\n    }\n}\n\n/**\n * Wrap function from prototype\n * Without this, everything works as well, but this works\n * faster as everything works on unproxied values\n */\naddArrayExtension(\"at\", simpleFunc)\naddArrayExtension(\"concat\", simpleFunc)\naddArrayExtension(\"flat\", simpleFunc)\naddArrayExtension(\"includes\", simpleFunc)\naddArrayExtension(\"indexOf\", simpleFunc)\naddArrayExtension(\"join\", simpleFunc)\naddArrayExtension(\"lastIndexOf\", simpleFunc)\naddArrayExtension(\"slice\", simpleFunc)\naddArrayExtension(\"toString\", simpleFunc)\naddArrayExtension(\"toLocaleString\", simpleFunc)\naddArrayExtension(\"toSorted\", simpleFunc)\naddArrayExtension(\"toSpliced\", simpleFunc)\naddArrayExtension(\"with\", simpleFunc)\n// map\naddArrayExtension(\"every\", mapLikeFunc)\naddArrayExtension(\"filter\", mapLikeFunc)\naddArrayExtension(\"find\", mapLikeFunc)\naddArrayExtension(\"findIndex\", mapLikeFunc)\naddArrayExtension(\"findLast\", mapLikeFunc)\naddArrayExtension(\"findLastIndex\", mapLikeFunc)\naddArrayExtension(\"flatMap\", mapLikeFunc)\naddArrayExtension(\"forEach\", mapLikeFunc)\naddArrayExtension(\"map\", mapLikeFunc)\naddArrayExtension(\"some\", mapLikeFunc)\naddArrayExtension(\"toReversed\", mapLikeFunc)\n// reduce\naddArrayExtension(\"reduce\", reduceLikeFunc)\naddArrayExtension(\"reduceRight\", reduceLikeFunc)\n\nfunction addArrayExtension(funcName, funcFactory) {\n    if (typeof Array.prototype[funcName] === \"function\") {\n        arrayExtensions[funcName] = funcFactory(funcName)\n    }\n}\n\n// Report and delegate to dehanced array\nfunction simpleFunc(funcName) {\n    return function () {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        return dehancedValues[funcName].apply(dehancedValues, arguments)\n    }\n}\n\n// Make sure callbacks receive correct array arg #2326\nfunction mapLikeFunc(funcName) {\n    return function (callback, thisArg) {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        return dehancedValues[funcName]((element, index) => {\n            return callback.call(thisArg, element, index, this)\n        })\n    }\n}\n\n// Make sure callbacks receive correct array arg #2326\nfunction reduceLikeFunc(funcName) {\n    return function () {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        // #2432 - reduce behavior depends on arguments.length\n        const callback = arguments[0]\n        arguments[0] = (accumulator, currentValue, index) => {\n            return callback(accumulator, currentValue, index, this)\n        }\n        return dehancedValues[funcName].apply(dehancedValues, arguments)\n    }\n}\n\nconst isObservableArrayAdministration = createInstanceofPredicate(\n    \"ObservableArrayAdministration\",\n    ObservableArrayAdministration\n)\n\nexport function isObservableArray(thing): thing is IObservableArray<any> {\n    return isObject(thing) && isObservableArrayAdministration(thing[$mobx])\n}\n", "import {\n    $mobx,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    checkIfStateModificationsAreAllowed,\n    createAtom,\n    createInstanceofPredicate,\n    deepEnhancer,\n    getNextId,\n    getPlainObjectKeys,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isES6Map,\n    isPlainES6Map,\n    isPlainObject,\n    isSpyEnabled,\n    makeIterable,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    stringifyKey,\n    transaction,\n    untracked,\n    onBecomeUnobserved,\n    globalState,\n    die,\n    isFunction,\n    UPDATE,\n    IAtom,\n    PureSpyEvent,\n    initObservable\n} from \"../internal\"\n\nexport interface IKeyValueMap<V = any> {\n    [key: string]: V\n}\n\nexport type IMapEntry<K = any, V = any> = [K, V]\nexport type IReadonlyMapEntry<K = any, V = any> = readonly [K, V]\nexport type IMapEntries<K = any, V = any> = IMapEntry<K, V>[]\nexport type IReadonlyMapEntries<K = any, V = any> = IReadonlyMapEntry<K, V>[]\n\nexport type IMapDidChange<K = any, V = any> = { observableKind: \"map\"; debugObjectName: string } & (\n    | {\n          object: ObservableMap<K, V>\n          name: K // actual the key or index, but this is based on the ancient .observe proposal for consistency\n          type: \"update\"\n          newValue: V\n          oldValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"add\"\n          newValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"delete\"\n          oldValue: V\n      }\n)\n\nexport interface IMapWillChange<K = any, V = any> {\n    object: ObservableMap<K, V>\n    type: \"update\" | \"add\" | \"delete\"\n    name: K\n    newValue?: V\n}\n\nconst ObservableMapMarker = {}\n\nexport const ADD = \"add\"\nexport const DELETE = \"delete\"\n\nexport type IObservableMapInitialValues<K = any, V = any> =\n    | IMapEntries<K, V>\n    | IReadonlyMapEntries<K, V>\n    | IKeyValueMap<V>\n    | Map<K, V>\n\n// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\nexport class ObservableMap<K = any, V = any>\n    implements Map<K, V>, IInterceptable<IMapWillChange<K, V>>, IListenable\n{\n    [$mobx] = ObservableMapMarker\n    data_!: Map<K, ObservableValue<V>>\n    hasMap_!: Map<K, ObservableValue<boolean>> // hasMap, not hashMap >-).\n    keysAtom_!: IAtom\n    interceptors_\n    changeListeners_\n    dehancer: any\n\n    constructor(\n        initialData?: IObservableMapInitialValues<K, V>,\n        public enhancer_: IEnhancer<V> = deepEnhancer,\n        public name_ = __DEV__ ? \"ObservableMap@\" + getNextId() : \"ObservableMap\"\n    ) {\n        if (!isFunction(Map)) {\n            die(18)\n        }\n        initObservable(() => {\n            this.keysAtom_ = createAtom(__DEV__ ? `${this.name_}.keys()` : \"ObservableMap.keys()\")\n            this.data_ = new Map()\n            this.hasMap_ = new Map()\n            if (initialData) {\n                this.merge(initialData)\n            }\n        })\n    }\n\n    private has_(key: K): boolean {\n        return this.data_.has(key)\n    }\n\n    has(key: K): boolean {\n        if (!globalState.trackingDerivation) {\n            return this.has_(key)\n        }\n\n        let entry = this.hasMap_.get(key)\n        if (!entry) {\n            const newEntry = (entry = new ObservableValue(\n                this.has_(key),\n                referenceEnhancer,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}?` : \"ObservableMap.key?\",\n                false\n            ))\n            this.hasMap_.set(key, newEntry)\n            onBecomeUnobserved(newEntry, () => this.hasMap_.delete(key))\n        }\n\n        return entry.get()\n    }\n\n    set(key: K, value: V) {\n        const hasKey = this.has_(key)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: hasKey ? UPDATE : ADD,\n                object: this,\n                newValue: value,\n                name: key\n            })\n            if (!change) {\n                return this\n            }\n            value = change.newValue!\n        }\n        if (hasKey) {\n            this.updateValue_(key, value)\n        } else {\n            this.addValue_(key, value)\n        }\n        return this\n    }\n\n    delete(key: K): boolean {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: DELETE,\n                object: this,\n                name: key\n            })\n            if (!change) {\n                return false\n            }\n        }\n        if (this.has_(key)) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change: IMapDidChange<K, V> | null =\n                notify || notifySpy\n                    ? {\n                          observableKind: \"map\",\n                          debugObjectName: this.name_,\n                          type: DELETE,\n                          object: this,\n                          oldValue: (<any>this.data_.get(key)).value_,\n                          name: key\n                      }\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change! as PureSpyEvent)\n            } // TODO fix type\n            transaction(() => {\n                this.keysAtom_.reportChanged()\n                this.hasMap_.get(key)?.setNewValue_(false)\n                const observable = this.data_.get(key)!\n                observable.setNewValue_(undefined as any)\n                this.data_.delete(key)\n            })\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n            return true\n        }\n        return false\n    }\n\n    private updateValue_(key: K, newValue: V | undefined) {\n        const observable = this.data_.get(key)!\n        newValue = (observable as any).prepareNewValue_(newValue) as V\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change: IMapDidChange<K, V> | null =\n                notify || notifySpy\n                    ? {\n                          observableKind: \"map\",\n                          debugObjectName: this.name_,\n                          type: UPDATE,\n                          object: this,\n                          oldValue: (observable as any).value_,\n                          name: key,\n                          newValue\n                      }\n                    : null\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change! as PureSpyEvent)\n            } // TODO fix type\n            observable.setNewValue_(newValue as V)\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n    }\n\n    private addValue_(key: K, newValue: V) {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        transaction(() => {\n            const observable = new ObservableValue(\n                newValue,\n                this.enhancer_,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}` : \"ObservableMap.key\",\n                false\n            )\n            this.data_.set(key, observable)\n            newValue = (observable as any).value_ // value might have been changed\n            this.hasMap_.get(key)?.setNewValue_(true)\n            this.keysAtom_.reportChanged()\n        })\n        const notifySpy = isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IMapDidChange<K, V> | null =\n            notify || notifySpy\n                ? {\n                      observableKind: \"map\",\n                      debugObjectName: this.name_,\n                      type: ADD,\n                      object: this,\n                      name: key,\n                      newValue\n                  }\n                : null\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change! as PureSpyEvent)\n        } // TODO fix type\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    get(key: K): V | undefined {\n        if (this.has(key)) {\n            return this.dehanceValue_(this.data_.get(key)!.get())\n        }\n        return this.dehanceValue_(undefined)\n    }\n\n    private dehanceValue_<X extends V | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    keys(): IterableIterator<K> {\n        this.keysAtom_.reportObserved()\n        return this.data_.keys()\n    }\n\n    values(): IterableIterator<V> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : self.get(value)\n                }\n            }\n        })\n    }\n\n    entries(): IterableIterator<IMapEntry<K, V>> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : ([value, self.get(value)!] as [K, V])\n                }\n            }\n        })\n    }\n\n    [Symbol.iterator]() {\n        return this.entries()\n    }\n\n    forEach(callback: (value: V, key: K, object: Map<K, V>) => void, thisArg?) {\n        for (const [key, value] of this) {\n            callback.call(thisArg, value, key, this)\n        }\n    }\n\n    /** Merge another object into this object, returns this. */\n    merge(other?: IObservableMapInitialValues<K, V>): ObservableMap<K, V> {\n        if (isObservableMap(other)) {\n            other = new Map(other)\n        }\n        transaction(() => {\n            if (isPlainObject(other)) {\n                getPlainObjectKeys(other).forEach((key: any) =>\n                    this.set(key as K, (other as IKeyValueMap)[key])\n                )\n            } else if (Array.isArray(other)) {\n                other.forEach(([key, value]) => this.set(key, value))\n            } else if (isES6Map(other)) {\n                if (!isPlainES6Map(other)) {\n                    die(19, other)\n                }\n                other.forEach((value, key) => this.set(key, value))\n            } else if (other !== null && other !== undefined) {\n                die(20, other)\n            }\n        })\n        return this\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const key of this.keys()) {\n                    this.delete(key)\n                }\n            })\n        })\n    }\n\n    replace(values: IObservableMapInitialValues<K, V>): ObservableMap<K, V> {\n        // Implementation requirements:\n        // - respect ordering of replacement map\n        // - allow interceptors to run and potentially prevent individual operations\n        // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)\n        // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n        // - note that result map may differ from replacement map due to the interceptors\n        transaction(() => {\n            // Convert to map so we can do quick key lookups\n            const replacementMap = convertToMap(values)\n            const orderedData = new Map()\n            // Used for optimization\n            let keysReportChangedCalled = false\n            // Delete keys that don't exist in replacement map\n            // if the key deletion is prevented by interceptor\n            // add entry at the beginning of the result map\n            for (const key of this.data_.keys()) {\n                // Concurrently iterating/deleting keys\n                // iterator should handle this correctly\n                if (!replacementMap.has(key)) {\n                    const deleted = this.delete(key)\n                    // Was the key removed?\n                    if (deleted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    } else {\n                        // Delete prevented by interceptor\n                        const value = this.data_.get(key)\n                        orderedData.set(key, value)\n                    }\n                }\n            }\n            // Merge entries\n            for (const [key, value] of replacementMap.entries()) {\n                // We will want to know whether a new key is added\n                const keyExisted = this.data_.has(key)\n                // Add or update value\n                this.set(key, value)\n                // The addition could have been prevent by interceptor\n                if (this.data_.has(key)) {\n                    // The update could have been prevented by interceptor\n                    // and also we want to preserve existing values\n                    // so use value from _data map (instead of replacement map)\n                    const value = this.data_.get(key)\n                    orderedData.set(key, value)\n                    // Was a new key added?\n                    if (!keyExisted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    }\n                }\n            }\n            // Check for possible key order change\n            if (!keysReportChangedCalled) {\n                if (this.data_.size !== orderedData.size) {\n                    // If size differs, keys are definitely modified\n                    this.keysAtom_.reportChanged()\n                } else {\n                    const iter1 = this.data_.keys()\n                    const iter2 = orderedData.keys()\n                    let next1 = iter1.next()\n                    let next2 = iter2.next()\n                    while (!next1.done) {\n                        if (next1.value !== next2.value) {\n                            this.keysAtom_.reportChanged()\n                            break\n                        }\n                        next1 = iter1.next()\n                        next2 = iter2.next()\n                    }\n                }\n            }\n            // Use correctly ordered map\n            this.data_ = orderedData\n        })\n        return this\n    }\n\n    get size(): number {\n        this.keysAtom_.reportObserved()\n        return this.data_.size\n    }\n\n    toString(): string {\n        return \"[object ObservableMap]\"\n    }\n\n    toJSON(): [K, V][] {\n        return Array.from(this)\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Map\"\n    }\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe_(listener: (changes: IMapDidChange<K, V>) => void, fireImmediately?: boolean): Lambda {\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support fireImmediately=true in combination with maps.\")\n        }\n        return registerListener(this, listener)\n    }\n\n    intercept_(handler: IInterceptor<IMapWillChange<K, V>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n}\n\n// eslint-disable-next-line\nexport var isObservableMap = createInstanceofPredicate(\"ObservableMap\", ObservableMap) as (\n    thing: any\n) => thing is ObservableMap<any, any>\n\nfunction convertToMap(dataStructure: any): Map<any, any> {\n    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n        return dataStructure\n    } else if (Array.isArray(dataStructure)) {\n        return new Map(dataStructure)\n    } else if (isPlainObject(dataStructure)) {\n        const map = new Map()\n        for (const key in dataStructure) {\n            map.set(key, dataStructure[key])\n        }\n        return map\n    } else {\n        return die(21, dataStructure)\n    }\n}\n", "import {\n    $mobx,\n    createAtom,\n    deepEnhancer,\n    getNextId,\n    IEnhancer,\n    isSpyEnabled,\n    hasListeners,\n    IListenable,\n    registerListener,\n    Lambda,\n    spyReportStart,\n    notifyListeners,\n    spyReportEnd,\n    createInstanceofPredicate,\n    hasInterceptors,\n    interceptChange,\n    IInterceptable,\n    IInterceptor,\n    registerInterceptor,\n    checkIfStateModificationsAreAllowed,\n    untracked,\n    makeIterable,\n    transaction,\n    isES6Set,\n    IAtom,\n    DELETE,\n    ADD,\n    die,\n    isFunction,\n    initObservable\n} from \"../internal\"\n\nconst ObservableSetMarker = {}\n\nexport type IObservableSetInitialValues<T> = Set<T> | readonly T[]\n\nexport type ISetDidChange<T = any> =\n    | {\n          object: ObservableSet<T>\n          observableKind: \"set\"\n          debugObjectName: string\n          type: \"add\"\n          newValue: T\n      }\n    | {\n          object: ObservableSet<T>\n          observableKind: \"set\"\n          debugObjectName: string\n          type: \"delete\"\n          oldValue: T\n      }\n\nexport type ISetWillChange<T = any> =\n    | {\n          type: \"delete\"\n          object: ObservableSet<T>\n          oldValue: T\n      }\n    | {\n          type: \"add\"\n          object: ObservableSet<T>\n          newValue: T\n      }\n\nexport class ObservableSet<T = any> implements Set<T>, IInterceptable<ISetWillChange>, IListenable {\n    [$mobx] = ObservableSetMarker\n    private data_: Set<any> = new Set()\n    atom_!: IAtom\n    changeListeners_\n    interceptors_\n    dehancer: any\n    enhancer_: (newV: any, oldV: any | undefined) => any\n\n    constructor(\n        initialData?: IObservableSetInitialValues<T>,\n        enhancer: IEnhancer<T> = deepEnhancer,\n        public name_ = __DEV__ ? \"ObservableSet@\" + getNextId() : \"ObservableSet\"\n    ) {\n        if (!isFunction(Set)) {\n            die(22)\n        }\n        this.enhancer_ = (newV, oldV) => enhancer(newV, oldV, name_)\n        initObservable(() => {\n            this.atom_ = createAtom(this.name_)\n            if (initialData) {\n                this.replace(initialData)\n            }\n        })\n    }\n\n    private dehanceValue_<X extends T | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const value of this.data_.values()) {\n                    this.delete(value)\n                }\n            })\n        })\n    }\n\n    forEach(callbackFn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any) {\n        for (const value of this) {\n            callbackFn.call(thisArg, value, value, this)\n        }\n    }\n\n    get size() {\n        this.atom_.reportObserved()\n        return this.data_.size\n    }\n\n    add(value: T) {\n        checkIfStateModificationsAreAllowed(this.atom_)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: ADD,\n                object: this,\n                newValue: value\n            })\n            if (!change) {\n                return this\n            }\n            // ideally, value = change.value would be done here, so that values can be\n            // changed by interceptor. Same applies for other Set and Map api's.\n        }\n        if (!this.has(value)) {\n            transaction(() => {\n                this.data_.add(this.enhancer_(value, undefined))\n                this.atom_.reportChanged()\n            })\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          observableKind: \"set\",\n                          debugObjectName: this.name_,\n                          type: ADD,\n                          object: this,\n                          newValue: value\n                      }\n                    : null\n            if (notifySpy && __DEV__) {\n                spyReportStart(change!)\n            }\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (notifySpy && __DEV__) {\n                spyReportEnd()\n            }\n        }\n\n        return this\n    }\n\n    delete(value: T) {\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: DELETE,\n                object: this,\n                oldValue: value\n            })\n            if (!change) {\n                return false\n            }\n        }\n        if (this.has(value)) {\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          observableKind: \"set\",\n                          debugObjectName: this.name_,\n                          type: DELETE,\n                          object: this,\n                          oldValue: value\n                      }\n                    : null\n\n            if (notifySpy && __DEV__) {\n                spyReportStart(change!)\n            }\n            transaction(() => {\n                this.atom_.reportChanged()\n                this.data_.delete(value)\n            })\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (notifySpy && __DEV__) {\n                spyReportEnd()\n            }\n            return true\n        }\n        return false\n    }\n\n    has(value: T) {\n        this.atom_.reportObserved()\n        return this.data_.has(this.dehanceValue_(value))\n    }\n\n    entries() {\n        let nextIndex = 0\n        const keys = Array.from(this.keys())\n        const values = Array.from(this.values())\n        return makeIterable<[T, T]>({\n            next() {\n                const index = nextIndex\n                nextIndex += 1\n                return index < values.length\n                    ? { value: [keys[index], values[index]], done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    keys(): IterableIterator<T> {\n        return this.values()\n    }\n\n    values(): IterableIterator<T> {\n        this.atom_.reportObserved()\n        const self = this\n        let nextIndex = 0\n        const observableValues = Array.from(this.data_.values())\n        return makeIterable<T>({\n            next() {\n                return nextIndex < observableValues.length\n                    ? { value: self.dehanceValue_(observableValues[nextIndex++]), done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    intersection<U>(otherSet: ReadonlySetLike<U> | Set<U>): Set<T & U> {\n        if (isES6Set(otherSet)) {\n            return otherSet.intersection(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.intersection(otherSet)\n        }\n    }\n\n    union<U>(otherSet: ReadonlySetLike<U> | Set<U>): Set<T | U> {\n        if (isES6Set(otherSet)) {\n            return otherSet.union(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.union(otherSet)\n        }\n    }\n\n    difference<U>(otherSet: ReadonlySetLike<U>): Set<T> {\n        return new Set(this).difference(otherSet)\n    }\n\n    symmetricDifference<U>(otherSet: ReadonlySetLike<U> | Set<U>): Set<T | U> {\n        if (isES6Set(otherSet)) {\n            return otherSet.symmetricDifference(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.symmetricDifference(otherSet)\n        }\n    }\n\n    isSubsetOf(otherSet: ReadonlySetLike<unknown>): boolean {\n        return new Set(this).isSubsetOf(otherSet)\n    }\n\n    isSupersetOf(otherSet: ReadonlySetLike<unknown>): boolean {\n        return new Set(this).isSupersetOf(otherSet)\n    }\n\n    isDisjointFrom(otherSet: ReadonlySetLike<unknown> | Set<unknown>): boolean {\n        if (isES6Set(otherSet)) {\n            return otherSet.isDisjointFrom(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.isDisjointFrom(otherSet)\n        }\n    }\n\n    replace(other: ObservableSet<T> | IObservableSetInitialValues<T>): ObservableSet<T> {\n        if (isObservableSet(other)) {\n            other = new Set(other)\n        }\n\n        transaction(() => {\n            if (Array.isArray(other)) {\n                this.clear()\n                other.forEach(value => this.add(value))\n            } else if (isES6Set(other)) {\n                this.clear()\n                other.forEach(value => this.add(value))\n            } else if (other !== null && other !== undefined) {\n                die(\"Cannot initialize set from \" + other)\n            }\n        })\n\n        return this\n    }\n    observe_(listener: (changes: ISetDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        // ... 'fireImmediately' could also be true?\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support fireImmediately=true in combination with sets.\")\n        }\n        return registerListener(this, listener)\n    }\n\n    intercept_(handler: IInterceptor<ISetWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    toJSON(): T[] {\n        return Array.from(this)\n    }\n\n    toString(): string {\n        return \"[object ObservableSet]\"\n    }\n\n    [Symbol.iterator]() {\n        return this.values()\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Set\"\n    }\n}\n\n// eslint-disable-next-line\nexport var isObservableSet = createInstanceofPredicate(\"ObservableSet\", ObservableSet) as (\n    thing: any\n) => thing is ObservableSet<any>\n", "import {\n    CreateObservableOptions,\n    getAnnotationFromOptions,\n    propagateChanged,\n    isAnnotation,\n    $mobx,\n    Atom,\n    Annotation,\n    ComputedValue,\n    IAtom,\n    IComputedValueOptions,\n    IEnhancer,\n    IInterceptable,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    addHiddenProp,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isObject,\n    isPlainObject,\n    isSpyEnabled,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    stringifyKey,\n    globalState,\n    ADD,\n    UPDATE,\n    die,\n    hasProp,\n    getDescriptor,\n    storedAnnotationsSymbol,\n    ownKeys,\n    isOverride,\n    defineProperty,\n    autoAnnotation,\n    getAdministration,\n    getDebugName,\n    objectPrototype,\n    MakeResult,\n    checkIfStateModificationsAreAllowed\n} from \"../internal\"\n\nconst descriptorCache = Object.create(null)\n\nexport type IObjectDidChange<T = any> = {\n    observableKind: \"object\"\n    name: PropertyKey\n    object: T\n    debugObjectName: string\n} & (\n    | {\n          type: \"add\"\n          newValue: any\n      }\n    | {\n          type: \"update\"\n          oldValue: any\n          newValue: any\n      }\n    | {\n          type: \"remove\"\n          oldValue: any\n      }\n)\n\nexport type IObjectWillChange<T = any> =\n    | {\n          object: T\n          type: \"update\" | \"add\"\n          name: PropertyKey\n          newValue: any\n      }\n    | {\n          object: T\n          type: \"remove\"\n          name: PropertyKey\n      }\n\nconst REMOVE = \"remove\"\n\nexport class ObservableObjectAdministration\n    implements IInterceptable<IObjectWillChange>, IListenable\n{\n    keysAtom_: IAtom\n    changeListeners_\n    interceptors_\n    proxy_: any\n    isPlainObject_: boolean\n    appliedAnnotations_?: object\n    private pendingKeys_: undefined | Map<PropertyKey, ObservableValue<boolean>>\n\n    constructor(\n        public target_: any,\n        public values_ = new Map<PropertyKey, ObservableValue<any> | ComputedValue<any>>(),\n        public name_: string,\n        // Used anytime annotation is not explicitely provided\n        public defaultAnnotation_: Annotation = autoAnnotation\n    ) {\n        this.keysAtom_ = new Atom(__DEV__ ? `${this.name_}.keys` : \"ObservableObject.keys\")\n        // Optimization: we use this frequently\n        this.isPlainObject_ = isPlainObject(this.target_)\n        if (__DEV__ && !isAnnotation(this.defaultAnnotation_)) {\n            die(`defaultAnnotation must be valid annotation`)\n        }\n        if (__DEV__) {\n            // Prepare structure for tracking which fields were already annotated\n            this.appliedAnnotations_ = {}\n        }\n    }\n\n    getObservablePropValue_(key: PropertyKey): any {\n        return this.values_.get(key)!.get()\n    }\n\n    setObservablePropValue_(key: PropertyKey, newValue): boolean | null {\n        const observable = this.values_.get(key)\n        if (observable instanceof ComputedValue) {\n            observable.set(newValue)\n            return true\n        }\n\n        // intercept\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                type: UPDATE,\n                object: this.proxy_ || this.target_,\n                name: key,\n                newValue\n            })\n            if (!change) {\n                return null\n            }\n            newValue = (change as any).newValue\n        }\n        newValue = (observable as any).prepareNewValue_(newValue)\n\n        // notify spy & observers\n        if (newValue !== globalState.UNCHANGED) {\n            const notify = hasListeners(this)\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const change: IObjectDidChange | null =\n                notify || notifySpy\n                    ? {\n                          type: UPDATE,\n                          observableKind: \"object\",\n                          debugObjectName: this.name_,\n                          object: this.proxy_ || this.target_,\n                          oldValue: (observable as any).value_,\n                          name: key,\n                          newValue\n                      }\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change!)\n            }\n            ;(observable as ObservableValue<any>).setNewValue_(newValue)\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n        return true\n    }\n\n    get_(key: PropertyKey): any {\n        if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n            // Key doesn't exist yet, subscribe for it in case it's added later\n            this.has_(key)\n        }\n        return this.target_[key]\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {any} value\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    set_(key: PropertyKey, value: any, proxyTrap: boolean = false): boolean | null {\n        // Don't use .has(key) - we care about own\n        if (hasProp(this.target_, key)) {\n            // Existing prop\n            if (this.values_.has(key)) {\n                // Observable (can be intercepted)\n                return this.setObservablePropValue_(key, value)\n            } else if (proxyTrap) {\n                // Non-observable - proxy\n                return Reflect.set(this.target_, key, value)\n            } else {\n                // Non-observable\n                this.target_[key] = value\n                return true\n            }\n        } else {\n            // New prop\n            return this.extend_(\n                key,\n                { value, enumerable: true, writable: true, configurable: true },\n                this.defaultAnnotation_,\n                proxyTrap\n            )\n        }\n    }\n\n    // Trap for \"in\"\n    has_(key: PropertyKey): boolean {\n        if (!globalState.trackingDerivation) {\n            // Skip key subscription outside derivation\n            return key in this.target_\n        }\n        this.pendingKeys_ ||= new Map()\n        let entry = this.pendingKeys_.get(key)\n        if (!entry) {\n            entry = new ObservableValue(\n                key in this.target_,\n                referenceEnhancer,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}?` : \"ObservableObject.key?\",\n                false\n            )\n            this.pendingKeys_.set(key, entry)\n        }\n        return entry.get()\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\n     */\n    make_(key: PropertyKey, annotation: Annotation | boolean): void {\n        if (annotation === true) {\n            annotation = this.defaultAnnotation_\n        }\n        if (annotation === false) {\n            return\n        }\n        assertAnnotable(this, annotation, key)\n        if (!(key in this.target_)) {\n            // Throw on missing key, except for decorators:\n            // Decorator annotations are collected from whole prototype chain.\n            // When called from super() some props may not exist yet.\n            // However we don't have to worry about missing prop,\n            // because the decorator must have been applied to something.\n            if (this.target_[storedAnnotationsSymbol]?.[key]) {\n                return // will be annotated by subclass constructor\n            } else {\n                die(1, annotation.annotationType_, `${this.name_}.${key.toString()}`)\n            }\n        }\n        let source = this.target_\n        while (source && source !== objectPrototype) {\n            const descriptor = getDescriptor(source, key)\n            if (descriptor) {\n                const outcome = annotation.make_(this, key, descriptor, source)\n                if (outcome === MakeResult.Cancel) {\n                    return\n                }\n                if (outcome === MakeResult.Break) {\n                    break\n                }\n            }\n            source = Object.getPrototypeOf(source)\n        }\n        recordAnnotationApplied(this, annotation, key)\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    extend_(\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        annotation: Annotation | boolean,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        if (annotation === true) {\n            annotation = this.defaultAnnotation_\n        }\n        if (annotation === false) {\n            return this.defineProperty_(key, descriptor, proxyTrap)\n        }\n        assertAnnotable(this, annotation, key)\n        const outcome = annotation.extend_(this, key, descriptor, proxyTrap)\n        if (outcome) {\n            recordAnnotationApplied(this, annotation, key)\n        }\n        return outcome\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    defineProperty_(\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: descriptor.value\n                })\n                if (!change) {\n                    return null\n                }\n                const { newValue } = change as any\n                if (descriptor.value !== newValue) {\n                    descriptor = {\n                        ...descriptor,\n                        value: newValue\n                    }\n                }\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            // Notify\n            this.notifyPropertyAddition_(key, descriptor.value)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    // If original descriptor becomes relevant, move this to annotation directly\n    defineObservableProperty_(\n        key: PropertyKey,\n        value: any,\n        enhancer: IEnhancer<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: value\n                })\n                if (!change) {\n                    return null\n                }\n                value = (change as any).newValue\n            }\n\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: true,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            const observable = new ObservableValue(\n                value,\n                enhancer,\n                __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\",\n                false\n            )\n\n            this.values_.set(key, observable)\n\n            // Notify (value possibly changed by ObservableValue)\n            this.notifyPropertyAddition_(key, observable.value_)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    // If original descriptor becomes relevant, move this to annotation directly\n    defineComputedProperty_(\n        key: PropertyKey,\n        options: IComputedValueOptions<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: undefined\n                })\n                if (!change) {\n                    return null\n                }\n            }\n            options.name ||= __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\"\n            options.context = this.proxy_ || this.target_\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: false,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            this.values_.set(key, new ComputedValue(options))\n\n            // Notify\n            this.notifyPropertyAddition_(key, undefined)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    delete_(key: PropertyKey, proxyTrap: boolean = false): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        // No such prop\n        if (!hasProp(this.target_, key)) {\n            return true\n        }\n\n        // Intercept\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                object: this.proxy_ || this.target_,\n                name: key,\n                type: REMOVE\n            })\n            // Cancelled\n            if (!change) {\n                return null\n            }\n        }\n\n        // Delete\n        try {\n            startBatch()\n            const notify = hasListeners(this)\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const observable = this.values_.get(key)\n            // Value needed for spies/listeners\n            let value = undefined\n            // Optimization: don't pull the value unless we will need it\n            if (!observable && (notify || notifySpy)) {\n                value = getDescriptor(this.target_, key)?.value\n            }\n            // delete prop (do first, may fail)\n            if (proxyTrap) {\n                if (!Reflect.deleteProperty(this.target_, key)) {\n                    return false\n                }\n            } else {\n                delete this.target_[key]\n            }\n            // Allow re-annotating this field\n            if (__DEV__) {\n                delete this.appliedAnnotations_![key]\n            }\n            // Clear observable\n            if (observable) {\n                this.values_.delete(key)\n                // for computed, value is undefined\n                if (observable instanceof ObservableValue) {\n                    value = observable.value_\n                }\n                // Notify: autorun(() => obj[key]), see #1796\n                propagateChanged(observable)\n            }\n            // Notify \"keys/entries/values\" observers\n            this.keysAtom_.reportChanged()\n\n            // Notify \"has\" observers\n            // \"in\" as it may still exist in proto\n            this.pendingKeys_?.get(key)?.set(key in this.target_)\n\n            // Notify spies/listeners\n            if (notify || notifySpy) {\n                const change: IObjectDidChange = {\n                    type: REMOVE,\n                    observableKind: \"object\",\n                    object: this.proxy_ || this.target_,\n                    debugObjectName: this.name_,\n                    oldValue: value,\n                    name: key\n                }\n                if (__DEV__ && notifySpy) {\n                    spyReportStart(change!)\n                }\n                if (notify) {\n                    notifyListeners(this, change)\n                }\n                if (__DEV__ && notifySpy) {\n                    spyReportEnd()\n                }\n            }\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe_(callback: (changes: IObjectDidChange) => void, fireImmediately?: boolean): Lambda {\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support the fire immediately property for observable objects.\")\n        }\n        return registerListener(this, callback)\n    }\n\n    intercept_(handler): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    notifyPropertyAddition_(key: PropertyKey, value: any) {\n        const notify = hasListeners(this)\n        const notifySpy = __DEV__ && isSpyEnabled()\n        if (notify || notifySpy) {\n            const change: IObjectDidChange | null =\n                notify || notifySpy\n                    ? ({\n                          type: ADD,\n                          observableKind: \"object\",\n                          debugObjectName: this.name_,\n                          object: this.proxy_ || this.target_,\n                          name: key,\n                          newValue: value\n                      } as const)\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change!)\n            }\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n\n        this.pendingKeys_?.get(key)?.set(true)\n\n        // Notify \"keys/entries/values\" observers\n        this.keysAtom_.reportChanged()\n    }\n\n    ownKeys_(): Array<string | symbol> {\n        this.keysAtom_.reportObserved()\n        return ownKeys(this.target_)\n    }\n\n    keys_(): PropertyKey[] {\n        // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n        // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n        // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n        // We choose to over-report in Object.keys(object), because:\n        // - typically it's used with simple data objects\n        // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n        this.keysAtom_.reportObserved()\n        return Object.keys(this.target_)\n    }\n}\n\nexport interface IIsObservableObject {\n    [$mobx]: ObservableObjectAdministration\n}\n\nexport function asObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n    if (__DEV__ && options && isObservableObject(target)) {\n        die(`Options can't be provided for already observable objects.`)\n    }\n\n    if (hasProp(target, $mobx)) {\n        if (__DEV__ && !(getAdministration(target) instanceof ObservableObjectAdministration)) {\n            die(\n                `Cannot convert '${getDebugName(target)}' into observable object:` +\n                    `\\nThe target is already observable of different type.` +\n                    `\\nExtending builtins is not supported.`\n            )\n        }\n        return target\n    }\n\n    if (__DEV__ && !Object.isExtensible(target)) {\n        die(\"Cannot make the designated object observable; it is not extensible\")\n    }\n\n    const name =\n        options?.name ??\n        (__DEV__\n            ? `${\n                  isPlainObject(target) ? \"ObservableObject\" : target.constructor.name\n              }@${getNextId()}`\n            : \"ObservableObject\")\n\n    const adm = new ObservableObjectAdministration(\n        target,\n        new Map(),\n        String(name),\n        getAnnotationFromOptions(options)\n    )\n\n    addHiddenProp(target, $mobx, adm)\n\n    return target\n}\n\nconst isObservableObjectAdministration = createInstanceofPredicate(\n    \"ObservableObjectAdministration\",\n    ObservableObjectAdministration\n)\n\nfunction getCachedObservablePropDescriptor(key) {\n    return (\n        descriptorCache[key] ||\n        (descriptorCache[key] = {\n            get() {\n                return this[$mobx].getObservablePropValue_(key)\n            },\n            set(value) {\n                return this[$mobx].setObservablePropValue_(key, value)\n            }\n        })\n    )\n}\n\nexport function isObservableObject(thing: any): boolean {\n    if (isObject(thing)) {\n        return isObservableObjectAdministration((thing as any)[$mobx])\n    }\n    return false\n}\n\nexport function recordAnnotationApplied(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey\n) {\n    if (__DEV__) {\n        adm.appliedAnnotations_![key] = annotation\n    }\n    // Remove applied decorator annotation so we don't try to apply it again in subclass constructor\n    delete adm.target_[storedAnnotationsSymbol]?.[key]\n}\n\nfunction assertAnnotable(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey\n) {\n    // Valid annotation\n    if (__DEV__ && !isAnnotation(annotation)) {\n        die(`Cannot annotate '${adm.name_}.${key.toString()}': Invalid annotation.`)\n    }\n\n    /*\n    // Configurable, not sealed, not frozen\n    // Possibly not needed, just a little better error then the one thrown by engine.\n    // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\n    if (__DEV__) {\n        const configurable = getDescriptor(adm.target_, key)?.configurable\n        const frozen = Object.isFrozen(adm.target_)\n        const sealed = Object.isSealed(adm.target_)\n        if (!configurable || frozen || sealed) {\n            const fieldName = `${adm.name_}.${key.toString()}`\n            const requestedAnnotationType = annotation.annotationType_\n            let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`\n            if (frozen) {\n                error += `\\nObject is frozen.`\n            }\n            if (sealed) {\n                error += `\\nObject is sealed.`\n            }\n            if (!configurable) {\n                error += `\\nproperty is not configurable.`\n                // Mention only if caused by us to avoid confusion\n                if (hasProp(adm.appliedAnnotations!, key)) {\n                    error += `\\nTo prevent accidental re-definition of a field by a subclass, `\n                    error += `all annotated fields of non-plain objects (classes) are not configurable.`\n                }\n            }\n            die(error)\n        }\n    }\n    */\n\n    // Not annotated\n    if (__DEV__ && !isOverride(annotation) && hasProp(adm.appliedAnnotations_!, key)) {\n        const fieldName = `${adm.name_}.${key.toString()}`\n        const currentAnnotationType = adm.appliedAnnotations_![key].annotationType_\n        const requestedAnnotationType = annotation.annotationType_\n        die(\n            `Cannot apply '${requestedAnnotationType}' to '${fieldName}':` +\n                `\\nThe field is already annotated with '${currentAnnotationType}'.` +\n                `\\nRe-annotating fields is not allowed.` +\n                `\\nUse 'override' annotation for methods overridden by subclass.`\n        )\n    }\n}\n", "import {\n    getNextId,\n    addHiddenFinalProp,\n    makeIterable,\n    addHiddenProp,\n    ObservableArrayAdministration,\n    $mobx,\n    arrayExtensions,\n    IEnhancer,\n    isObservableArray,\n    IObservableArray,\n    defineProperty,\n    initObservable\n} from \"../internal\"\n\n// Bug in safari 9.* (or iOS 9 safari mobile). See #364\nconst ENTRY_0 = createArrayEntryDescriptor(0)\n\nconst safariPrototypeSetterInheritanceBug = (() => {\n    let v = false\n    const p = {}\n    Object.defineProperty(p, \"0\", {\n        set: () => {\n            v = true\n        }\n    })\n    Object.create(p)[\"0\"] = 1\n    return v === false\n})()\n\n/**\n * This array buffer contains two lists of properties, so that all arrays\n * can recycle their property definitions, which significantly improves performance of creating\n * properties on the fly.\n */\nlet OBSERVABLE_ARRAY_BUFFER_SIZE = 0\n\n// Typescript workaround to make sure ObservableArray extends Array\nclass StubArray {}\nfunction inherit(ctor, proto) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(ctor.prototype, proto)\n    } else if (ctor.prototype.__proto__ !== undefined) {\n        ctor.prototype.__proto__ = proto\n    } else {\n        ctor.prototype = proto\n    }\n}\ninherit(StubArray, Array.prototype)\n\n// Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\n\nexport class LegacyObservableArray<T> extends StubArray {\n    constructor(\n        initialValues: T[] | undefined,\n        enhancer: IEnhancer<T>,\n        name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n        owned = false\n    ) {\n        super()\n        initObservable(() => {\n            const adm = new ObservableArrayAdministration(name, enhancer, owned, true)\n            adm.proxy_ = this as any\n            addHiddenFinalProp(this, $mobx, adm)\n\n            if (initialValues && initialValues.length) {\n                // @ts-ignore\n                this.spliceWithArray(0, 0, initialValues)\n            }\n\n            if (safariPrototypeSetterInheritanceBug) {\n                // Seems that Safari won't use numeric prototype setter until any * numeric property is\n                // defined on the instance. After that it works fine, even if this property is deleted.\n                Object.defineProperty(this, \"0\", ENTRY_0)\n            }\n        })\n    }\n\n    concat(...arrays: T[][]): T[] {\n        ;(this[$mobx] as ObservableArrayAdministration).atom_.reportObserved()\n        return Array.prototype.concat.apply(\n            (this as any).slice(),\n            //@ts-ignore\n            arrays.map(a => (isObservableArray(a) ? a.slice() : a))\n        )\n    }\n\n    get length(): number {\n        return (this[$mobx] as ObservableArrayAdministration).getArrayLength_()\n    }\n\n    set length(newLength: number) {\n        ;(this[$mobx] as ObservableArrayAdministration).setArrayLength_(newLength)\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Array\"\n    }\n\n    [Symbol.iterator]() {\n        const self = this\n        let nextIndex = 0\n        return makeIterable({\n            next() {\n                return nextIndex < self.length\n                    ? { value: self[nextIndex++], done: false }\n                    : { done: true, value: undefined }\n            }\n        })\n    }\n}\n\nObject.entries(arrayExtensions).forEach(([prop, fn]) => {\n    if (prop !== \"concat\") {\n        addHiddenProp(LegacyObservableArray.prototype, prop, fn)\n    }\n})\n\nfunction createArrayEntryDescriptor(index: number) {\n    return {\n        enumerable: false,\n        configurable: true,\n        get: function () {\n            return this[$mobx].get_(index)\n        },\n        set: function (value) {\n            this[$mobx].set_(index, value)\n        }\n    }\n}\n\nfunction createArrayBufferItem(index: number) {\n    defineProperty(LegacyObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index))\n}\n\nexport function reserveArrayBuffer(max: number) {\n    if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n        for (let index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n            createArrayBufferItem(index)\n        }\n        OBSERVABLE_ARRAY_BUFFER_SIZE = max\n    }\n}\n\nreserveArrayBuffer(1000)\n\nexport function createLegacyArray<T>(\n    initialValues: T[] | undefined,\n    enhancer: IEnhancer<T>,\n    name?: string\n): IObservableArray<T> {\n    return new LegacyObservableArray(initialValues, enhancer, name) as any\n}\n", "import { isAction } from \"../api/action\"\nimport {\n    $mobx,\n    IDepTreeNode,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction,\n    isObservableSet,\n    die,\n    isFunction,\n    allowStateChangesStart,\n    untrackedStart,\n    allowStateChangesEnd,\n    untrackedEnd,\n    startBatch,\n    endBatch\n} from \"../internal\"\n\nexport function getAtom(thing: any, property?: PropertyKey): IDepTreeNode {\n    if (typeof thing === \"object\" && thing !== null) {\n        if (isObservableArray(thing)) {\n            if (property !== undefined) {\n                die(23)\n            }\n            return (thing as any)[$mobx].atom_\n        }\n        if (isObservableSet(thing)) {\n            return thing.atom_\n        }\n        if (isObservableMap(thing)) {\n            if (property === undefined) {\n                return thing.keysAtom_\n            }\n            const observable = thing.data_.get(property) || thing.hasMap_.get(property)\n            if (!observable) {\n                die(25, property, getDebugName(thing))\n            }\n            return observable\n        }\n        if (property && !thing[$mobx]) {\n            thing[property]\n        } // See #1072\n        if (isObservableObject(thing)) {\n            if (!property) {\n                return die(26)\n            }\n            const observable = (thing as any)[$mobx].values_.get(property)\n            if (!observable) {\n                die(27, property, getDebugName(thing))\n            }\n            return observable\n        }\n        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n            return thing\n        }\n    } else if (isFunction(thing)) {\n        if (isReaction(thing[$mobx])) {\n            // disposer function\n            return thing[$mobx]\n        }\n    }\n    die(28)\n}\n\nexport function getAdministration(thing: any, property?: string) {\n    if (!thing) {\n        die(29)\n    }\n    if (property !== undefined) {\n        return getAdministration(getAtom(thing, property))\n    }\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n        return thing\n    }\n    if (isObservableMap(thing) || isObservableSet(thing)) {\n        return thing\n    }\n    if (thing[$mobx]) {\n        return thing[$mobx]\n    }\n    die(24, thing)\n}\n\nexport function getDebugName(thing: any, property?: string): string {\n    let named\n    if (property !== undefined) {\n        named = getAtom(thing, property)\n    } else if (isAction(thing)) {\n        return thing.name\n    } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n        named = getAdministration(thing)\n    } else {\n        // valid for arrays as well\n        named = getAtom(thing)\n    }\n    return named.name_\n}\n\n/**\n * Helper function for initializing observable structures, it applies:\n * 1. allowStateChanges so we don't violate enforceActions.\n * 2. untracked so we don't accidentaly subscribe to anything observable accessed during init in case the observable is created inside derivation.\n * 3. batch to avoid state version updates\n */\nexport function initObservable<T>(cb: () => T): T {\n    const derivation = untrackedStart()\n    const allowStateChanges = allowStateChangesStart(true)\n    startBatch()\n    try {\n        return cb()\n    } finally {\n        endBatch()\n        allowStateChangesEnd(allowStateChanges)\n        untrackedEnd(derivation)\n    }\n}\n", "import {\n    isES6Map,\n    isObservableArray,\n    isObservableMap,\n    isES6Set,\n    isObservableSet,\n    hasProp,\n    isFunction,\n    objectPrototype\n} from \"../internal\"\n\ndeclare const Symbol\nconst toString = objectPrototype.toString\n\nexport function deepEqual(a: any, b: any, depth: number = -1): boolean {\n    return eq(a, b, depth)\n}\n\n// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a: any, b: any, depth: number, aStack?: any[], bStack?: any[]) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) {\n        return a !== 0 || 1 / a === 1 / b\n    }\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) {\n        return false\n    }\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) {\n        return b !== b\n    }\n    // Exhaust primitive checks\n    const type = typeof a\n    if (type !== \"function\" && type !== \"object\" && typeof b != \"object\") {\n        return false\n    }\n\n    // Compare `[[Class]]` names.\n    const className = toString.call(a)\n    if (className !== toString.call(b)) {\n        return false\n    }\n    switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case \"[object RegExp]\":\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case \"[object String]\":\n            // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n            // equivalent to `new String(\"5\")`.\n            return \"\" + a === \"\" + b\n        case \"[object Number]\":\n            // `NaN`s are equivalent, but non-reflexive.\n            // Object(NaN) is equivalent to NaN.\n            if (+a !== +a) {\n                return +b !== +b\n            }\n            // An `egal` comparison is performed for other numeric values.\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b\n        case \"[object Date]\":\n        case \"[object Boolean]\":\n            // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n            // millisecond representations. Note that invalid dates with millisecond representations\n            // of `NaN` are not equivalent.\n            return +a === +b\n        case \"[object Symbol]\":\n            return (\n                typeof Symbol !== \"undefined\" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b)\n            )\n        case \"[object Map]\":\n        case \"[object Set]\":\n            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n            // Hide this extra level by increasing the depth.\n            if (depth >= 0) {\n                depth++\n            }\n            break\n    }\n    // Unwrap any wrapped objects.\n    a = unwrap(a)\n    b = unwrap(b)\n\n    const areArrays = className === \"[object Array]\"\n    if (!areArrays) {\n        if (typeof a != \"object\" || typeof b != \"object\") {\n            return false\n        }\n\n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        const aCtor = a.constructor,\n            bCtor = b.constructor\n        if (\n            aCtor !== bCtor &&\n            !(\n                isFunction(aCtor) &&\n                aCtor instanceof aCtor &&\n                isFunction(bCtor) &&\n                bCtor instanceof bCtor\n            ) &&\n            \"constructor\" in a &&\n            \"constructor\" in b\n        ) {\n            return false\n        }\n    }\n\n    if (depth === 0) {\n        return false\n    } else if (depth < 0) {\n        depth = -1\n    }\n\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || []\n    bStack = bStack || []\n    let length = aStack.length\n    while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) {\n            return bStack[length] === b\n        }\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a)\n    bStack.push(b)\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length\n        if (length !== b.length) {\n            return false\n        }\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n            if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {\n                return false\n            }\n        }\n    } else {\n        // Deep compare objects.\n        const keys = Object.keys(a)\n        let key\n        length = keys.length\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (Object.keys(b).length !== length) {\n            return false\n        }\n        while (length--) {\n            // Deep compare each member\n            key = keys[length]\n            if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {\n                return false\n            }\n        }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop()\n    bStack.pop()\n    return true\n}\n\nfunction unwrap(a: any) {\n    if (isObservableArray(a)) {\n        return a.slice()\n    }\n    if (isES6Map(a) || isObservableMap(a)) {\n        return Array.from(a.entries())\n    }\n    if (isES6Set(a) || isObservableSet(a)) {\n        return Array.from(a.entries())\n    }\n    return a\n}\n", "export function makeIterable<T>(iterator: Iterator<T>): IterableIterator<T> {\n    iterator[Symbol.iterator] = getSelf\n    return iterator as any\n}\n\nfunction getSelf() {\n    return this\n}\n", "import { ObservableObjectAdministration, isFunction } from \"../internal\"\n\nexport const enum MakeResult {\n    Cancel,\n    Break,\n    Continue\n}\n\nexport type Annotation = {\n    annotationType_: string\n    make_(\n        adm: ObservableObjectAdministration,\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        source: object\n    ): MakeResult\n    extend_(\n        adm: ObservableObjectAdministration,\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        proxyTrap: boolean\n    ): boolean | null\n    decorate_20223_(value: any, context: DecoratorContext)\n    options_?: any\n}\n\nexport type AnnotationMapEntry =\n    | Annotation\n    | true /* follow the default decorator, usually deep */\n    | false /* don't decorate this property */\n\n// AdditionalFields can be used to declare additional keys that can be used, for example to be able to\n// declare annotations for private/ protected members, see #2339\nexport type AnnotationsMap<T, AdditionalFields extends PropertyKey> = {\n    [P in Exclude<keyof T, \"toString\">]?: AnnotationMapEntry\n} & Record<AdditionalFields, AnnotationMapEntry>\n\nexport function isAnnotation(thing: any) {\n    return (\n        // Can be function\n        thing instanceof Object &&\n        typeof thing.annotationType_ === \"string\" &&\n        isFunction(thing.make_) &&\n        isFunction(thing.extend_)\n    )\n}\n\nexport function isAnnotationMapEntry(thing: any) {\n    return typeof thing === \"boolean\" || isAnnotation(thing)\n}\n", "/**\n * (c) Michel Weststrate 2015 - 2020\n * MIT Licensed\n *\n * Welcome to the mobx sources! To get a global overview of how MobX internally works,\n * this is a good place to start:\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n *\n * Source folders:\n * ===============\n *\n * - api/     Most of the public static methods exposed by the module can be found here.\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\n * - utils/   Utility stuff.\n *\n */\nimport { die } from \"./errors\"\nimport { getGlobal } from \"./utils/global\"\n;[\"Symbol\", \"Map\", \"Set\"].forEach(m => {\n    let g = getGlobal()\n    if (typeof g[m] === \"undefined\") {\n        die(`MobX requires global '${m}' to be available or polyfilled`)\n    }\n})\n\nimport { spy, getDebugName, $mobx } from \"./internal\"\n\nexport {\n    IObservable,\n    IDepTreeNode,\n    Reaction,\n    IReactionPublic,\n    IReactionDisposer,\n    untracked,\n    IAtom,\n    createAtom,\n    spy,\n    IComputedValue,\n    IEqualsComparer,\n    comparer,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    IObjectWillChange,\n    IObjectDidChange,\n    isObservableObject,\n    IValueDidChange,\n    IValueWillChange,\n    IObservableValue,\n    isObservableValue as isBoxedObservable,\n    IObservableArray,\n    IArrayWillChange,\n    IArrayWillSplice,\n    IArraySplice,\n    IArrayUpdate,\n    IArrayDidChange,\n    isObservableArray,\n    IKeyValueMap,\n    ObservableMap,\n    IMapEntries,\n    IMapEntry,\n    IMapWillChange,\n    IMapDidChange,\n    isObservableMap,\n    IObservableMapInitialValues,\n    ObservableSet,\n    isObservableSet,\n    ISetDidChange,\n    ISetWillChange,\n    IObservableSetInitialValues,\n    transaction,\n    observable,\n    IObservableFactory,\n    CreateObservableOptions,\n    computed,\n    IComputedFactory,\n    isObservable,\n    isObservableProp,\n    isComputed,\n    isComputedProp,\n    extendObservable,\n    observe,\n    intercept,\n    autorun,\n    IAutorunOptions,\n    reaction,\n    IReactionOptions,\n    when,\n    IWhenOptions,\n    action,\n    isAction,\n    runInAction,\n    IActionFactory,\n    keys,\n    values,\n    entries,\n    set,\n    remove,\n    has,\n    get,\n    apiOwnKeys as ownKeys,\n    apiDefineProperty as defineProperty,\n    configure,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    flow,\n    isFlow,\n    flowResult,\n    FlowCancellationError,\n    isFlowCancellationError,\n    toJS,\n    trace,\n    IObserverTree,\n    IDependencyTree,\n    getDependencyTree,\n    getObserverTree,\n    resetGlobalState as _resetGlobalState,\n    getGlobalState as _getGlobalState,\n    getDebugName,\n    getAtom,\n    getAdministration as _getAdministration,\n    allowStateChanges as _allowStateChanges,\n    runInAction as _allowStateChangesInsideComputed, // This has become the default behavior in Mobx 6\n    Lambda,\n    $mobx,\n    isComputingDerivation as _isComputingDerivation,\n    onReactionError,\n    interceptReads as _interceptReads,\n    IComputedValueOptions,\n    IActionRunInfo,\n    _startAction,\n    _endAction,\n    allowStateReadsStart as _allowStateReadsStart,\n    allowStateReadsEnd as _allowStateReadsEnd,\n    makeObservable,\n    makeAutoObservable,\n    autoAction as _autoAction,\n    AnnotationsMap,\n    AnnotationMapEntry,\n    override\n} from \"./internal\"\n\n// Devtools support\ndeclare const __MOBX_DEVTOOLS_GLOBAL_HOOK__: { injectMobx: (any) => void }\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    // See: https://github.com/andykog/mobx-devtools/\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n        spy,\n        extras: {\n            getDebugName\n        },\n        $mobx\n    })\n}\n", "/**\n * TypeScript type guard to assert the type of a non-empty array\n * @param array Any array to check for non-emptiness\n * @returns True if the empty is non-empty, else false. TypeScript accepts the array as non-empty after the assertion.\n */\nexport function isNotEmpty<T>(array: T[]): array is [T, ...T[]] {\n  if (array.length === 0) return false;\n  return true;\n}\n\n/**\n * Filters undefined values from an array and lets TypeScript know the resulting array\n * does not have undefined values\n * @param array Array potentially including undefined values\n * @returns Array without undefined values\n */\nexport function filterNullishValues<T>(array: (T | undefined)[]): T[] {\n  return array.filter((value) => value != null) as T[];\n}\n", "/**\n * A convenient way to create a promise with resolve and reject functions.\n * @returns Tuple with resolve function, reject function and promise.\n */\nexport function deferred<T>(): [(t: T) => void, (t: Error) => void, Promise<T>] {\n  let resolve: ((t: T) => void) | null = null;\n  let reject: ((t: Error) => void) | null = null;\n  const promise = new Promise<T>((r, rj) => {\n    resolve = (t: T) => r(t);\n    reject = (e: Error) => rj(e);\n  });\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return [resolve as any, reject as any, promise];\n}\n", "import { IComputedValue, IObservableValue, reaction } from \"mobx\";\nimport { deferred } from \"./deferred\";\n\n/**\n * @param comp Computed/Observable value that is either defined or undefined\n * @returns promise that resolves with the first truthy computed value\n */\nexport async function awaitValue<T>(comp: IComputedValue<T | undefined> | IObservableValue<T | undefined>): Promise<T> {\n  const [resolve, , promise] = deferred<T>();\n\n  const dispose = reaction(\n    () => comp.get(),\n    (value) => {\n      if (value) {\n        resolve(value);\n      }\n    },\n    { fireImmediately: true },\n  );\n\n  const value = await promise;\n  // Dispose the reaction once the promise is resolved\n  dispose();\n\n  return value;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Func } from \"./types\";\n\nexport function isObject(c: unknown): c is Record<string, any> {\n  return typeof c === \"object\" && !Array.isArray(c) && c !== null;\n}\n\nexport function isFunction(c: unknown): c is Func<any, any> {\n  return c instanceof Function;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IComputedValue, IObservableValue, reaction } from \"mobx\";\nimport DeepProxy from \"proxy-deep\";\nimport { deferred } from \"./deferred\";\nimport { isFunction, isObject } from \"./guards\";\nimport { Cached } from \"./types\";\n\nfunction deepAccess(target: Record<string, unknown>, path: string[]): any {\n  if (path.length === 0) return target;\n  if (path.length === 1) return target[path[0]];\n  const [next, ...rest] = path;\n  const nextTarget = target[next];\n  if (!isObject(nextTarget)) throw new Error(\"Path does not exist on the target\");\n  return deepAccess(nextTarget, rest);\n}\n\n/**\n * Caches any function calls to the target until the target is ready.\n * @param target T extends Cachable\n * @returns Cached<T>\n */\nexport function cacheUntilReady<T extends Record<string, any>>(\n  target: IObservableValue<T | undefined> | IComputedValue<T | undefined>,\n): Cached<T> {\n  // The call queue contains the path and arguments of calls to the\n  // proxiedTarget while the target was not available yet.\n  // It also contains resolve and reject methods to fulfil the promise\n  // returned when calling the proxiedTarget once the target becomes available.\n  const callQueue: {\n    path: string[];\n    args?: any[];\n    resolve: (result: any) => void;\n    reject: (e: Error) => void;\n  }[] = [];\n\n  // The proxiedTarget proxies all calls to the target.\n  // If a function is called on the proxiedTarget while the target is not\n  // available, a promise is returned and the call will be stored in the callQueue\n  // until the target becomes available and the promise is fulfilled.\n  const proxiedTarget = new DeepProxy(\n    {},\n    {\n      get(_t, prop) {\n        const targetReady = target.get();\n        if (targetReady) {\n          // If the target is ready, relay all calls directly to the target\n          // (Except for the \"proxied\" key, which indicates whether the object is currently proxied)\n          if (prop === \"proxied\") return false;\n          return Reflect.get(targetReady, prop);\n        } else {\n          // Note: if the target is not available, accessing a property returns another proxy,\n          // not a Promise. It is possible to check whether a value is currently proxied using the proxied key.\n          if (prop === \"proxied\") return true;\n          if (prop === \"name\") return \"ProxiedTarget\";\n          if (prop === \"toJSON\") return () => ({ proxied: true });\n          return this.nest(() => void 0);\n        }\n      },\n      apply(_, thisArg, args) {\n        const targetReady = target.get();\n        if (targetReady) {\n          // If the target is ready, relay all calls directly to the target\n          const targetFunc = deepAccess(targetReady, this.path);\n          if (!isFunction(targetFunc)) throw new Error(\"Target is not callable\");\n          return Reflect.apply(targetFunc, thisArg, args);\n        } else {\n          // Otherwise store the call and relay it to the target later once it's ready.\n          // The return value of this call is a promise, that gets resolved once the target is ready.\n          const [resolve, reject, promise] = deferred();\n          callQueue.push({ path: this.path, args, resolve, reject });\n          return promise;\n        }\n      },\n    },\n  );\n\n  reaction(\n    () => target.get(),\n    (targetReady) => {\n      if (!targetReady) return;\n      // Move all entries from callQueue to queuedCalls\n      const queuedCalls = callQueue.splice(0);\n      for (const { path, args, resolve, reject } of queuedCalls) {\n        const target = deepAccess(targetReady, path);\n        if (args && isFunction(target)) {\n          (async () => {\n            try {\n              resolve(await target(...args));\n            } catch (e: any) {\n              reject(e);\n            }\n          })();\n        } else {\n          resolve(target);\n        }\n      }\n    },\n  );\n\n  return proxiedTarget as Cached<T>;\n}\n", "/**\n * @param enm Numeric enum\n * @returns Number array containing the enum values\n */\nexport function numValues(enm: object): number[] {\n  const nums: number[] = [];\n  for (const val of Object.values(enm)) {\n    if (!isNaN(Number(val))) {\n      nums.push(Number(val));\n    }\n  }\n  return nums;\n}\n", "/**\n * Utility function to map a source object to an object with the same keys but mapped values\n * @param source Source object to be mapped\n * @param valueMap Mapping values of the source object to values of the target object\n * @returns An object with the same keys as the source object but mapped values\n */\nexport function mapObject<S extends { [key: string]: unknown }, T extends { [key in keyof S]: unknown }>(\n  source: S,\n  valueMap: (value: S[keyof S], key: keyof S) => T[keyof S],\n): T {\n  const target: Partial<{ [key in keyof typeof source]: T[keyof S] }> = {};\n  for (const key in source) {\n    target[key] = valueMap(source[key], key);\n  }\n  return target as T;\n}\n", "/**\n *\n * @param to Upper bound (included)\n * @param from Lower bound (included). Default 0.\n * @returns A random integer between from and to.\n */\nexport function random(to: number, from = 0): number {\n  return Math.floor(Math.random() * (to - from + 1)) + from;\n}\n\n/**\n * @param array Array to pick a random element from.\n * @returns Random element from the given array.\n */\nexport function pickRandom<T>(array: [T, ...T[]]): T {\n  return array[random(array.length - 1)];\n}\n", "import {\n  concatMap,\n  delay,\n  filter,\n  first,\n  mergeMap,\n  Observable,\n  of,\n  OperatorFunction,\n  pipe,\n  ReplaySubject,\n  scan,\n  Timestamp,\n  timestamp,\n} from \"rxjs\";\nimport { computed, IComputedValue, IObservableValue, observable, reaction, runInAction, toJS } from \"mobx\";\nimport { deferred } from \"./deferred\";\nimport { awaitValue } from \"./mobx\";\n\nexport function filterNullish<T>(): OperatorFunction<T, NonNullable<T>> {\n  return pipe<Observable<T>, Observable<NonNullable<T>>>(\n    filter<T>((x: T) => x != null) as OperatorFunction<T, NonNullable<T>>,\n  );\n}\n\nexport function awaitPromise<T extends Promise<unknown>>(): OperatorFunction<T, Awaited<T>> {\n  return pipe(concatMap((x: T) => x)) as OperatorFunction<T, Awaited<T>>;\n}\n\n/**\n * RxJS operator to stretch out an event stream by a given delay per event\n * @param spacingDelayMs Delay between each event in ms\n * @returns stream of events with at least spacingDelayMs spaceing between event\n */\nexport function stretch<T>(spacingDelayMs: number) {\n  return pipe(\n    timestamp<T>(),\n    scan((acc: (Timestamp<T> & { delay: number }) | null, curr: Timestamp<T>) => {\n      // calculate delay needed to offset next emission\n      let delay = 0;\n      if (acc !== null) {\n        const timeDelta = curr.timestamp - acc.timestamp;\n        delay = timeDelta > spacingDelayMs ? 0 : spacingDelayMs - timeDelta;\n      }\n\n      return {\n        timestamp: curr.timestamp,\n        delay: delay,\n        value: curr.value,\n      };\n    }, null),\n    filterNullish(),\n    mergeMap((i) => of(i.value).pipe(delay(i.delay)), 1),\n  );\n}\n\nexport function observableToComputed<T>(obs: IObservableValue<T>): IComputedValue<T> {\n  return computed(() => obs.get());\n}\n\nexport function computedToStream<T>(comp: IComputedValue<T> | IObservableValue<T>): Observable<T> {\n  const stream = new ReplaySubject<T>(1);\n  reaction(\n    () => comp.get(),\n    (value) => {\n      if (value != null) stream.next(value);\n    },\n    { fireImmediately: true },\n  );\n  return stream;\n}\n\nexport function observableToStream<T>(obs: T): Observable<T> {\n  const stream = new ReplaySubject<T>(1);\n  reaction(\n    () => toJS(obs),\n    (value) => {\n      if (value != null) stream.next(value);\n    },\n    { fireImmediately: true },\n  );\n  return stream;\n}\n\nexport function streamToComputed<T>(stream$: Observable<T>): IComputedValue<T | undefined> {\n  const value = observable.box<T | undefined>();\n  stream$.subscribe((val) => runInAction(() => value.set(val)));\n  return computed(() => value.get());\n}\n\nexport async function streamToDefinedComputed<T>(stream$: Observable<T>): Promise<IComputedValue<T>> {\n  const value = observable.box<T>();\n  stream$.subscribe((val) => runInAction(() => value.set(val)));\n  const computedValue = computed(() => value.get());\n  await awaitValue(computedValue);\n  return computedValue as IComputedValue<T>;\n}\n\n/**\n *\n * @param stream$ RxJS observable to check for the given value\n * @param predicate Predicate to check\n * @returns A promise that resolves with the requested value once the predicate is true\n */\nexport async function awaitStreamValue<T>(\n  stream$: Observable<T>,\n  predicate: (value: T) => boolean = (value) => value != null,\n): Promise<T> {\n  const [resolve, , promise] = deferred<T>();\n  stream$.pipe(first(predicate)).subscribe(resolve);\n  return promise;\n}\n\n/**\n * Turns a stream into an updating object for easy access outside of rxjs\n * @param stream$ Stream to turn into a wrapped value\n * @returns Object with `current` key corresponding to last stream value\n */\nexport async function streamToWrappedValue<T>(stream$: Observable<T>): Promise<{ current: T }> {\n  const value: { current?: T } = {};\n  stream$.subscribe((v) => (value.current = v));\n  value.current = await awaitStreamValue(stream$);\n  return value as { current: T };\n}\n", "/**\n * UUID.core.js - UUID.js for Minimalists\n *\n * @file\n * @author  LiosK\n * @version v4.2.0\n * @license Apache License 2.0: Copyright (c) 2010-2018 LiosK\n * @url https://github.com/LiosK/UUID.js/blob/master/src/uuid.core.js\n */\n\n/**\n * @class\n * @classdesc {@link UUID} object.\n * @hideconstructor\n */\n\n// Core Component {{{\n\n/**\n * Generates a version 4 UUID as a hexadecimal string.\n * @returns {string} Hexadecimal UUID string.\n */\nexport const uuid = function () {\n  const rand = _getRandomInt,\n    hex = _hexAligner;\n  return (\n    hex(rand(32), 8) + // time_low\n    \"-\" +\n    hex(rand(16), 4) + // time_mid\n    \"-\" +\n    hex(0x4000 | rand(12), 4) + // time_hi_and_version\n    \"-\" +\n    hex(0x8000 | rand(14), 4) + // clock_seq_hi_and_reserved clock_seq_low\n    \"-\" +\n    hex(rand(48), 12)\n  ); // node\n};\n\n/**\n * Returns an unsigned x-bit random integer.\n * @private\n * @param {number} x Unsigned integer ranging from 0 to 53, inclusive.\n * @returns {number} Unsigned x-bit random integer (0 <= f(x) < 2^x).\n */\nconst _getRandomInt = function (x: number) {\n  if (x < 0 || x > 53) {\n    return NaN;\n  }\n  const n = 0 | (Math.random() * 0x40000000); // 1 << 30\n  return x > 30 ? n + (0 | (Math.random() * (1 << (x - 30)))) * 0x40000000 : n >>> (30 - x);\n};\n\n/**\n * Converts an integer to a zero-filled hexadecimal string.\n * @private\n * @param {number} num\n * @param {number} length\n * @returns {string}\n */\nconst _hexAligner = function (num: number, length: number) {\n  let str = num.toString(16),\n    i = length - str.length,\n    z = \"0\";\n  for (; i > 0; i >>>= 1, z += z) {\n    if (i & 1) {\n      str = z + str;\n    }\n  }\n  return str;\n};\n", "export function sleep<T>(timeout: number, returns?: T): Promise<T> {\n  return new Promise<T>((resolve) => setTimeout(() => resolve(returns as T), timeout));\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { deferred } from \"./deferred\";\nimport { sleep } from \"./sleep\";\n\nexport const range = function* (total = 0, step = 1, from = 0) {\n  // eslint-disable-next-line no-empty\n  for (let i = 0; i < total; yield from + i++ * step) {}\n};\n\nexport async function rejectAfter<T>(ms: number, msg: string): Promise<T> {\n  await sleep(ms);\n  throw new Error(msg);\n}\n\nexport const timeoutAfter = async <T>(promise: Promise<T>, ms: number, timeoutMsg: string) => {\n  return Promise.race([promise, rejectAfter<T>(ms, timeoutMsg)]);\n};\n\nexport const callWithRetry = <T>(\n  fn: (...args: any[]) => Promise<T>,\n  args: any[] = [],\n  maxRetries = 10,\n  retryInterval = 1000,\n): Promise<T> => {\n  const [resolve, reject, promise] = deferred<T>();\n  const process = async () => {\n    let res: T;\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        res = await fn(...args);\n        resolve(res);\n        break;\n      } catch (e) {\n        if (i < maxRetries - 1) {\n          console.info(\"[CallWithRetry Failed] attempt number=\" + i, fn);\n          console.error(e);\n          await sleep(Math.min(retryInterval * 2 ** i + Math.random() * 100, 15000));\n        } else {\n          reject(e as unknown as Error);\n        }\n      }\n    }\n  };\n  process();\n  return promise;\n};\n", "export function makeIterable<T>(iterator: Iterator<T>): IterableIterator<T> {\n  const iterable: IterableIterator<T> = {\n    ...iterator,\n    [Symbol.iterator]() {\n      return this;\n    },\n  };\n\n  return iterable;\n}\n\nexport function concatIterators<T>(first: Iterator<T>, second?: Iterator<T>): IterableIterator<T> {\n  if (!second) return makeIterable(first);\n  return makeIterable({\n    next() {\n      const next = first.next();\n      if (!next.done) return next;\n      return second.next();\n    },\n  });\n}\n\nexport function mergeIterators<A, B>(iteratorA: Iterator<A>, iteratorB: Iterator<B>): IterableIterator<[A, B]> {\n  const iterator: Iterator<[A, B]> = {\n    next() {\n      const nextA = iteratorA.next();\n      const nextB = iteratorB.next();\n      if (nextA.done && nextB.done) return { done: true, value: null };\n      return { value: [nextA.value, nextB.value] };\n    },\n  };\n  return makeIterable(iterator);\n}\n\nexport function transformIterator<A, B>(iterator: Iterator<A>, transform: (value: A) => B): IterableIterator<B> {\n  return makeIterable({\n    next() {\n      const { done, value } = iterator.next();\n      return { done, value: done ? value : transform(value) };\n    },\n  });\n}\n\n/**\n * Turns an array into an iterator. NOTE: an iterator can only be iterated once.\n * @param array Array to be turned into an iterator\n * @returns Iterator to iterate through the array\n */\nexport function arrayToIterator<T>(array: T[]): IterableIterator<T> {\n  let i = 0;\n  const iterator: Iterator<T> = {\n    next() {\n      const done = i >= array.length;\n      if (done) return { done, value: null };\n      return { value: array[i++] };\n    },\n  };\n  return makeIterable(iterator);\n}\n", "import { Area, Coord } from \"./types\";\n\nexport function areaContains(area: Area, coord: Coord) {\n  return coord.x >= area.x && coord.y >= area.y && coord.x < area.x + area.width && coord.y < area.y + area.height;\n}\n\nexport function coordsOf(area: Area) {\n  const coords: Coord[] = [];\n  for (let dx = 0; dx < area.width; dx++) {\n    for (let dy = 0; dy < area.height; dy++) {\n      coords.push({ x: area.x + dx, y: area.y + dy });\n    }\n  }\n  return coords;\n}\n", "import { fromEvent, map, Observable } from \"rxjs\";\n\nexport interface DoWork<In, Out> {\n  work(input$: Observable<In>): Observable<Out>;\n}\n\nexport function fromWorker<I, O>(worker: Worker, input$: Observable<I>): Observable<O> {\n  input$.subscribe((event) => worker.postMessage(event));\n  return fromEvent<MessageEvent<O>>(worker, \"message\").pipe(map((e) => e.data));\n}\n\nexport function runWorker<I, O>(worker: DoWork<I, O>) {\n  const input$ = fromEvent<MessageEvent<I>>(self, \"message\");\n  const output$ = worker.work(input$.pipe(map((event) => event.data)));\n  output$.subscribe((event) => self.postMessage(event));\n}\n", "function rightMask(input: number, keep: number): number {\n  return input & (2 ** keep - 1);\n}\n\n/**\n * Packs two unsigned integers in one 32 bit unsigned integer\n * @param numbers Unsigned integers to be packed in 32 bit integer\n * @param bitsPerNumber Bits for each number\n * @returns Packed 32 bit unsigned integer\n */\nexport function pack(numbers: number[], bitsPerNumber: number[]): number {\n  // Total number of bits must be 32\n  if (bitsPerNumber.reduce((acc, curr) => acc + curr, 0) > 32) {\n    throw new Error(\"JS pretends integers are 32 bit when bitshifts are involved\");\n  }\n\n  // Array lengths must match\n  if (numbers.length !== bitsPerNumber.length) throw new Error(\"Arrays' lengths must match\");\n\n  // Numbers must fit in number of bits and must be unsigned\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < 0) {\n      throw new Error(\"Underflow: can only pack unsigned integer\");\n    }\n    if (numbers[i] > 2 ** bitsPerNumber[i] - 1) {\n      const error = `Overflow: ${numbers[i]} does not fit in ${bitsPerNumber[i]} bits`;\n      throw new Error(error);\n    }\n  }\n\n  // Pack number\n  let packed = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    packed = (packed << bitsPerNumber[i]) | numbers[i];\n  }\n  return packed;\n}\n\n/**\n * Unpacks a packed 32 bit unsigned integer into the original unsigned integers\n * @param packed Packed 32 bit unsigned integer\n * @param bitsPerNumber Bits for each unsigned integer\n * @returns Array of unpacked unsignd integers\n */\nexport function unpack(packed: number, bitsPerNumber: number[]): number[] {\n  const numbers: number[] = [];\n  let shiftedPacked = packed;\n  for (let i = bitsPerNumber.length - 1; i >= 0; i--) {\n    numbers.unshift(rightMask(shiftedPacked, bitsPerNumber[i]));\n    shiftedPacked = shiftedPacked >>> bitsPerNumber[i];\n  }\n  return numbers;\n}\n\nexport function packTuple(numbers: [number, number]): number {\n  return pack(numbers, [8, 24]);\n}\n\nexport function unpackTuple(packed: number): [number, number] {\n  return unpack(packed, [8, 24]) as [number, number];\n}\n", "import { Coord } from \"./types\";\nimport { transformIterator } from \"./iterable\";\n\nconst LOWER_HALF_MASK = 2 ** 16 - 1;\nconst MAX_SUPPORTED = 2 ** 15 - 1;\n\nexport function subtract(from: CoordMap<boolean>, subtract: CoordMap<boolean>): CoordMap<boolean> {\n  const result = new CoordMap<boolean>();\n\n  for (const coord of from.coords()) {\n    if (subtract.get(coord)) continue;\n    result.set(coord, true);\n  }\n\n  return result;\n}\n\nexport function coordToKey(coord: Coord) {\n  const key = (coord.x << 16) | (coord.y & LOWER_HALF_MASK);\n  return key;\n\n  // Old version using strings:\n  // return `${coord.x}/${coord.y}`;\n}\n\nexport function keyToCoord(key: number): Coord {\n  const x = key >> 16;\n  const y = (key << 16) >> 16;\n  return { x, y };\n\n  // Old version using strings:\n  // const fragments = key.split(\"/\");\n  // return { x: Number(fragments[0]), y: Number(fragments[1]) };\n}\n\nexport class CoordMap<T> {\n  map: Map<number, T>;\n  defaultValue?: T;\n\n  constructor(props?: { defaultValue?: T }) {\n    this.map = new Map<number, T>();\n    this.defaultValue = props?.defaultValue;\n  }\n\n  static from<T>(coordMapLike: { map: Map<number, T>; defaultValue?: T }): CoordMap<T> {\n    const coordMap = new CoordMap<T>();\n    coordMap.map = coordMapLike.map;\n    coordMap.defaultValue = coordMapLike.defaultValue;\n    return coordMap;\n  }\n\n  set(coord: Coord, value: T) {\n    if (\n      coord.x > MAX_SUPPORTED ||\n      coord.x < -1 * MAX_SUPPORTED ||\n      coord.y > MAX_SUPPORTED ||\n      coord.y < -1 * MAX_SUPPORTED\n    ) {\n      throw new Error(`CoordMap only supports coords up to ${MAX_SUPPORTED}`);\n    }\n    return this.map.set(coordToKey(coord), value);\n  }\n\n  get(coord: Coord) {\n    return this.map.get(coordToKey(coord)) ?? this.defaultValue;\n  }\n\n  keys() {\n    return this.map.keys();\n  }\n\n  coords(): IterableIterator<Coord> {\n    return transformIterator(this.map.keys(), (key) => keyToCoord(key));\n  }\n\n  entries() {\n    return this.map.entries();\n  }\n\n  toArray(): [Coord, T][] {\n    const entries = Array.from(this.map.entries());\n    return entries.map(([key, value]) => [keyToCoord(key), value]);\n  }\n\n  values() {\n    return this.map.values();\n  }\n\n  delete(coord: Coord) {\n    return this.map.delete(coordToKey(coord));\n  }\n\n  has(coord: Coord): boolean {\n    return this.map.has(coordToKey(coord));\n  }\n\n  clear() {\n    for (const key of this.map.keys()) {\n      this.map.delete(key);\n    }\n  }\n\n  get size(): number {\n    return this.map.size;\n  }\n}\n", "import { VoxelCoord } from \"./types\";\nimport { transformIterator } from \"./iterable\";\n\nfunction coordToKey(coord: VoxelCoord) {\n  // TODO: find a more memory efficient way to store these keys\n  return `${coord.x}/${coord.y}/${coord.z}`;\n}\n\nfunction keyToCoord(key: string): VoxelCoord {\n  const fragments = key.split(\"/\");\n  return { x: Number(fragments[0]), y: Number(fragments[1]), z: Number(fragments[2]) };\n}\n\nexport class VoxelCoordMap<T> {\n  map: Map<string, T>;\n  defaultValue?: T;\n\n  constructor(props?: { defaultValue?: T }) {\n    this.map = new Map<string, T>();\n    this.defaultValue = props?.defaultValue;\n  }\n\n  static from<T>(coordMapLike: { map: Map<string, T>; defaultValue?: T }): VoxelCoordMap<T> {\n    const coordMap = new VoxelCoordMap<T>();\n    coordMap.map = coordMapLike.map;\n    coordMap.defaultValue = coordMapLike.defaultValue;\n    return coordMap;\n  }\n\n  set(coord: VoxelCoord, value: T) {\n    return this.map.set(coordToKey(coord), value);\n  }\n\n  get(coord: VoxelCoord) {\n    return this.map.get(coordToKey(coord)) ?? this.defaultValue;\n  }\n\n  keys() {\n    return this.map.keys();\n  }\n\n  coords(): IterableIterator<VoxelCoord> {\n    return transformIterator(this.map.keys(), (key) => keyToCoord(key));\n  }\n\n  entries() {\n    return this.map.entries();\n  }\n\n  toArray(): [VoxelCoord, T][] {\n    const entries = Array.from(this.map.entries());\n    return entries.map(([key, value]) => [keyToCoord(key), value]);\n  }\n\n  values() {\n    return this.map.values();\n  }\n\n  delete(coord: VoxelCoord) {\n    return this.map.delete(coordToKey(coord));\n  }\n\n  has(coord: VoxelCoord): boolean {\n    return this.map.has(coordToKey(coord));\n  }\n\n  clear() {\n    for (const key of this.map.keys()) {\n      this.map.delete(key);\n    }\n  }\n\n  get size(): number {\n    return this.map.size;\n  }\n}\n", "/**\n * Pads start of a hex string with 0 to create a bit string of the given length\n * @param input Hex string\n * @param bits Number of bits in the output hex string\n * @returns Hex string of specified length\n */\nexport function padToBitLength(input: string, bits: number) {\n  // Cut off 0x prefix\n  if (input.substring(0, 2) == \"0x\") input = input.substring(2);\n  // Pad start with 0 to get desired bit length\n  const length = bits / 4;\n  input = input.padStart(length, \"0\");\n  input = input.substring(input.length - length);\n  // Prefix with 0x\n  return `0x${input}`;\n}\n\n/**\n * Pads start of a hex string with 0 to create a 160 bit hex string\n * which can be used as an Ethereum address\n * @param input Hex string\n * @returns 160 bit hex string\n */\nexport function toEthAddress(input: string) {\n  return padToBitLength(input, 160);\n}\n\n/**\n * Pads start of a hex string with 0 to create a 256bit hex string\n * which can be used as an Ethereum address\n * @param input Hex string\n * @returns 256 bit hex string\n */\nexport function to256BitString(input: string) {\n  return padToBitLength(input, 256);\n}\n\nexport function extractEncodedArguments(input: string) {\n  // Cutting off the first 4 bytes, which represent the function selector\n  if (input[0] !== \"0\" && input[1] !== \"x\") throw new Error(\"Invalid hex string\");\n  return \"0x\" + input.substring(10);\n}\n", "const RND_A = 134775813;\nconst RND_B = 1103515245;\nconst ACCURACY = 1000;\n\nexport function randomize(seed: number, x: number, y: number) {\n  return (((((x ^ y) * RND_A) ^ (seed + x)) * (((RND_B * x) << 16) ^ (RND_B * y - RND_A))) >>> 0) / 4294967295;\n}\n\nexport function tile(coordinate: number, period: number) {\n  if (coordinate < 0) while (coordinate < 0) coordinate += period;\n  return coordinate % period;\n}\n\nexport function interpolate(a: number, b: number, c: number, d: number, x: number, s: number, scale: number) {\n  const p = d - c - (a - b);\n  return (b * Math.pow(s, 3) + x * (c * Math.pow(s, 2) + a * s * (-s + x) + x * (-(b + p) * s + p * x))) * scale;\n\n  // return (x) * ((x ) * ((x ) * p + (a - b - p)) + (c - a)) + b;\n}\n\n/**\n * Config a cubic noise.\n * @param {Number} seed A seed in the range [0, 1].\n * @param {Number} [periodX] The number of units after which the x coordinate repeats.\n * @param {Number} [periodY] The number of units after which the y coordinate repeats.\n * @returns {Object} A configuration object used by noise functions.\n */\nexport function cubicNoiseConfig(\n  seed: number,\n  octave: number,\n  scale: number,\n  periodX = Number.MAX_SAFE_INTEGER,\n  periodY = Number.MAX_SAFE_INTEGER,\n) {\n  return {\n    seed: Math.floor(seed * Number.MAX_SAFE_INTEGER),\n    periodX: periodX,\n    periodY: periodY,\n    octave,\n    scale,\n  };\n}\n\n/**\n * Sample 1D cubic noise.\n * @param {Object} config A valid noise configuration.\n * @param {Number} x The X position to sample at.\n * @returns {Number} A noise value in the range [0, 1].\n */\nexport function cubicNoiseSample1(config: ReturnType<typeof cubicNoiseConfig>, x: number) {\n  const xi = Math.floor(x);\n  const lerp = x - xi;\n\n  return (\n    interpolate(\n      randomize(config.seed, tile(xi - 1, config.periodX), 0),\n      randomize(config.seed, tile(xi, config.periodX), 0),\n      randomize(config.seed, tile(xi + 1, config.periodX), 0),\n      randomize(config.seed, tile(xi + 2, config.periodX), 0),\n      lerp,\n      1,\n      1,\n    ) *\n      0.666666 +\n    0.166666\n  );\n}\n\n/**\n * Sample 2D cubic noise.\n * @param {Object} config A valid noise configuration.\n * @param {Number} x The X position to sample at.\n * @param {Number} y The Y position to sample at.\n * @returns {Number} A noise value in the range [0, 1].\n */\nexport function cubicNoiseSample2(\n  { octave, periodX, periodY, seed, scale }: ReturnType<typeof cubicNoiseConfig>,\n  x: number,\n  y: number,\n) {\n  const xi = Math.floor(x / octave);\n  const lerpX = Math.floor((x * ACCURACY) / octave) - xi * ACCURACY;\n  const yi = Math.floor(y / octave);\n  const lerpY = Math.floor((y * ACCURACY) / octave) - yi * ACCURACY;\n  const x0 = tile(xi - 1, periodX);\n  const x1 = tile(xi, periodX);\n  const x2 = tile(xi + 1, periodX);\n  const x3 = tile(xi + 2, periodX);\n\n  const xSamples = new Array(4);\n\n  for (let i = 0; i < 4; ++i) {\n    const y = tile(yi - 1 + i, periodY);\n\n    xSamples[i] = interpolate(\n      randomize(seed, x0, y),\n      randomize(seed, x1, y),\n      randomize(seed, x2, y),\n      randomize(seed, x3, y),\n      lerpX,\n      ACCURACY,\n      1,\n    );\n  }\n\n  return Math.floor(\n    interpolate(xSamples[0], xSamples[1], xSamples[2], xSamples[3], lerpY, ACCURACY, scale) / Math.pow(ACCURACY, 6),\n  );\n}\n", "const TOPICS_KEY = \"mud-logger-topics\";\n\nexport function enableLogger() {\n  const windowConsole = window.console;\n  let filtersActive = Boolean(localStorage.getItem(TOPICS_KEY));\n\n  const topicsString = localStorage.getItem(TOPICS_KEY);\n  let topics: string[] = topicsString ? JSON.parse(topicsString) : [];\n\n  function log(...logs: string[]) {\n    if (filtersActive) return;\n    windowConsole.log(...logs);\n  }\n\n  function logWithTopic(topic: string, ...logs: string[]) {\n    if (!filtersActive || topics.includes(topic)) {\n      windowConsole.log(`--- BETTER CONSOLE / TOPIC ${topic} ---`);\n      windowConsole.log(...logs);\n    }\n  }\n\n  function enableFilters() {\n    localStorage.setItem(TOPICS_KEY, JSON.stringify([]));\n    filtersActive = true;\n  }\n\n  function disableFilters() {\n    localStorage.removeItem(TOPICS_KEY);\n    filtersActive = false;\n  }\n\n  function addTopic(topic: string) {\n    topics.push(topic);\n    localStorage.setItem(TOPICS_KEY, JSON.stringify(topics));\n  }\n\n  function removeTopic(topic: string) {\n    topics = topics.filter((t) => t !== topic);\n    localStorage.setItem(TOPICS_KEY, JSON.stringify(topics));\n  }\n\n  function resetTopics() {\n    topics = [];\n    localStorage.setItem(TOPICS_KEY, JSON.stringify(topics));\n  }\n\n  const logger = {\n    ...windowConsole,\n    log,\n    logWithTopic,\n    enableFilters,\n    disableFilters,\n    addTopic,\n    removeTopic,\n    resetTopics,\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as any).logger = logger;\n  window.console = logger;\n  return logger;\n}\n", "/**\n * Compute the Euclidean distance between two points\n * https://en.wikipedia.org/wiki/Euclidean_distance\n * @param a\n * @param b\n * @returns Euclidian distance between a and b\n */\nexport function euclidean(a: number[], b: number[]): number {\n  if (a.length !== b.length) throw new Error(\"points must have same dimension\");\n  return Math.sqrt(a.reduce((acc, _, i) => acc + Math.pow(a[i] - b[i], 2), 0));\n}\n", "/**\n * For positive inputs: returns the greatest integer less than or equal to its numeric argument.\n * For negative inputs: returns the smallest integer greater than or equal to its numeric argument.\n *\n * @param x A numeric expression.\n * @returns Input rounded towards zero.\n */\nexport function roundTowardsZero(x: number) {\n  const sign = x < 0 ? -1 : 1;\n  return sign * Math.floor(Math.abs(x));\n}\n", "// TODO: migrate to viem's toHex()\nexport const arrayToHex = (array: Uint8Array | ArrayBuffer): `0x${string}` =>\n  `0x${[...new Uint8Array(array)].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\")}`;\n", "export const bytesToString = (bytes: Uint8Array): string => [...bytes].map((x) => String.fromCharCode(x)).join(\"\");\n", "// TODO: migrate to viem's isHex()\n// Note that this assumes hex pairs, but viem does not. We'll need to be careful migrating.\n// Padding an odd-length hex sounds scary (based on how Solidity left/right aligns numbers vs bytes/strings).\nexport function isHex(hex: string): boolean {\n  return /^(0x)?([\\da-f]{2})*$/i.test(hex);\n}\n", "import { isHex } from \"./isHex\";\n\n// TODO: migrate to viem's toBytes(hex)\nexport const hexToArray = (hex: string): Uint8Array => {\n  if (!isHex(hex)) {\n    console.error(\"Invalid hex string\", hex);\n    throw new Error(\"Invalid hex string\");\n  }\n  const bytes = hex.match(/[\\da-f]{2}/gi);\n  if (!bytes) return new Uint8Array([]);\n  return new Uint8Array(bytes.map((byte) => parseInt(byte, 16)));\n};\n", "export const stringToBytes16 = (str: string): Uint8Array => {\n  if (str.length > 16) throw new Error(\"string too long\");\n  return new Uint8Array(16).map((v, i) => str.charCodeAt(i));\n};\n\nexport const stringToBytes32 = (str: string): Uint8Array => {\n  if (str.length > 32) throw new Error(\"string too long\");\n  return new Uint8Array(32).map((v, i) => str.charCodeAt(i));\n};\n", "import { toEthAddress } from \"./eth\";\nimport { hexToArray } from \"./v2\";\n\nexport function formatHex(hex: string): string {\n  if (hex.substring(0, 2) == \"0x\") hex = hex.substring(2);\n  const prefix = hex.length % 2 !== 0 ? \"0x0\" : \"0x\";\n  return prefix + hex;\n}\n\nexport function hexStringToUint8Array(hexString: string): Uint8Array {\n  return hexToArray(hexString);\n}\n\nexport function Uint8ArrayToHexString(data: Uint8Array): string {\n  if (data.length === 0) return \"0x00\";\n  return formatHex(data.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\"));\n}\n\nexport function concatUint8Arrays(...arrays: Uint8Array[]): Uint8Array {\n  return Uint8Array.from(\n    arrays.reduce<number[]>((acc, curr) => {\n      return [...acc, ...curr];\n    }, []),\n  );\n}\n\nexport function splitUint8Arrays(data: Uint8Array, byteLengths: number[]): Uint8Array[] {\n  const arrays: Uint8Array[] = [];\n  let i = 0;\n  for (const length of byteLengths) {\n    const array = new Uint8Array(length);\n    arrays.push(array);\n    for (let j = 0; j < length; j++) {\n      array[j] = data[i];\n      i++;\n    }\n  }\n  return arrays;\n}\n\nexport function Int32ArrayToUint8Array(input: number[]): Uint8Array {\n  const buffer = new ArrayBuffer(input.length * 4);\n  const int32arr = new Int32Array(buffer);\n  for (let i = 0; i < input.length; i++) {\n    int32arr[i] = input[i];\n  }\n  return new Uint8Array(buffer);\n}\n\nexport function Uint8ArrayToInt32Array(input: Uint8Array): number[] {\n  return [...new Int32Array(input.buffer)];\n}\n\nexport function ethAddressToUint8Array(address: string): Uint8Array {\n  return hexStringToUint8Array(toEthAddress(address));\n}\n\n// https://stackoverflow.com/a/55330424\nexport function createToInt(size: number) {\n  if (size < 2) {\n    throw new Error(\"Minimum size is 2\");\n  } else if (size > 64) {\n    throw new Error(\"Maximum size is 64\");\n  }\n\n  // Determine value range\n  const maxValue = 2 ** (size - 1) - 1;\n  const minValue = -maxValue - 1;\n\n  return (value: number) => {\n    value = value << 0;\n    if (value > maxValue || value < minValue) {\n      console.log(\"value\", value, maxValue, minValue, value > maxValue, value < minValue);\n      throw new Error(`Int${size} overflow`);\n    }\n\n    if (value < 0) {\n      return 2 ** size + value;\n    } else {\n      return value;\n    }\n  };\n}\n\nexport const toInt32 = createToInt(32);\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n", "/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n", "/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n", "/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n", "import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n", "import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n", "type SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearTimeoutFunction = (handle: number) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const {delegate} = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle);\n  },\n  delegate: undefined,\n};\n", "import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n", "/* tslint:disable:no-empty */\nexport function noop() { }\n", "import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n", "import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n", "import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: observerOrNext ?? undefined,\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n", "/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n", "/**\n * This function takes one parameter and just returns it. Simply put,\n * this is like `<T>(x: T): T => x`.\n *\n * ## Examples\n *\n * This is useful in some cases when using things like `mergeMap`\n *\n * ```ts\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\n *\n * const source$ = interval(1000).pipe(take(5));\n *\n * const result$ = source$.pipe(\n *   map(i => range(i)),\n *   mergeMap(identity) // same as mergeMap(x => x)\n * );\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * Or when you want to selectively apply an operator\n *\n * ```ts\n * import { interval, take, identity } from 'rxjs';\n *\n * const shouldLimit = () => Math.random() < 0.5;\n *\n * const source$ = interval(1000);\n *\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * @param x Any value that is returned by this function\n * @returns The value passed as the first parameter to this function\n */\nexport function identity<T>(x: T): T {\n  return x;\n}\n", "import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\n/**\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\n * and uses it to return a value.\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\n * passes the result to the next one, passes that result to the next one, and so on.  \n */\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n", "import { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\n  subscribe(next: (value: T) => void): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Examples\n   *\n   * Subscribe with an {@link guide/observer Observer}\n   *\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\n   *\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Cancel a subscription\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // 'unsubscribed!' after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   * or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   * Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   * the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, take } from 'rxjs';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *   let total = 0;\n   *\n   *   await source$.forEach(value => {\n   *     total += value;\n   *     console.log('observable -> ' + value);\n   *   });\n   *\n   *   return total;\n   * }\n   *\n   * getTotal().then(\n   *   total => console.log('Total: ' + total)\n   * );\n   *\n   * // Expected:\n   * // 'observable -> 0'\n   * // 'observable -> 1'\n   * // 'observable -> 2'\n   * // 'observable -> 3'\n   * // 'Total: 6'\n   * ```\n   *\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      const subscriber = new SafeSubscriber<T>({\n        next: (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve,\n      });\n      this.subscribe(subscriber);\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, filter, map, scan } from 'rxjs';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n", "import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n", "import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n", "import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval, tap, publish, refCount } from 'rxjs';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap(num => console.log(`refCount ${ num }`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap(num => console.log(`publish ${ num }`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the `publish` operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @return A function that returns an Observable that automates the connection\n * to ConnectableObservable.\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n * @deprecated Replaced with the {@link share} operator. How `share` is used\n * will depend on the connectable observable you created just prior to the\n * `refCount` operator.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let connection: Subscription | null = null;\n\n    (source as any)._refCount++;\n\n    const refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\n        connection = null;\n        return;\n      }\n\n      ///\n      // Compare the local RefCountSubscriber's connection Subscription to the\n      // connection Subscription on the shared ConnectableObservable. In cases\n      // where the ConnectableObservable source synchronously emits values, and\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n      // execution continues to here before the RefCountOperator has a chance to\n      // supply the RefCountSubscriber with the shared connection Subscription.\n      // For example:\n      // ```\n      // range(0, 10).pipe(\n      //   publish(),\n      //   refCount(),\n      //   take(5),\n      // )\n      // .subscribe();\n      // ```\n      // In order to account for this case, RefCountSubscriber should only dispose\n      // the ConnectableObservable's shared connection Subscription if the\n      // connection Subscription exists, *and* either:\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\n      //      Subscription yet, or,\n      //   b. RefCountSubscriber's connection Subscription reference is identical\n      //      to the shared connection Subscription\n      ///\n\n      const sharedConnection = (source as any)._connection;\n      const conn = connection;\n      connection = null;\n\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n\n      subscriber.unsubscribe();\n    });\n\n    source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      connection = (source as ConnectableObservable<T>).connect();\n    }\n  });\n}\n", "import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          createOperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n", "import { TimestampProvider } from '../types';\n\ninterface PerformanceTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const performanceTimestampProvider: PerformanceTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (performanceTimestampProvider.delegate || performance).now();\n  },\n  delegate: undefined,\n};\n", "import { Subscription } from '../Subscription';\n\ninterface AnimationFrameProvider {\n  schedule(callback: FrameRequestCallback): Subscription;\n  requestAnimationFrame: typeof requestAnimationFrame;\n  cancelAnimationFrame: typeof cancelAnimationFrame;\n  delegate:\n    | {\n        requestAnimationFrame: typeof requestAnimationFrame;\n        cancelAnimationFrame: typeof cancelAnimationFrame;\n      }\n    | undefined;\n}\n\nexport const animationFrameProvider: AnimationFrameProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  schedule(callback) {\n    let request = requestAnimationFrame;\n    let cancel: typeof cancelAnimationFrame | undefined = cancelAnimationFrame;\n    const { delegate } = animationFrameProvider;\n    if (delegate) {\n      request = delegate.requestAnimationFrame;\n      cancel = delegate.cancelAnimationFrame;\n    }\n    const handle = request((timestamp) => {\n      // Clear the cancel function. The request has been fulfilled, so\n      // attempting to cancel the request upon unsubscription would be\n      // pointless.\n      cancel = undefined;\n      callback(timestamp);\n    });\n    return new Subscription(() => cancel?.(handle));\n  },\n  requestAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.requestAnimationFrame || requestAnimationFrame)(...args);\n  },\n  cancelAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.cancelAnimationFrame || cancelAnimationFrame)(...args);\n  },\n  delegate: undefined,\n};\n", "import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { TimestampProvider } from '../../types';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\n\n/**\n * An observable of animation frames\n *\n * Emits the amount of time elapsed since subscription and the timestamp on each animation frame.\n * Defaults to milliseconds provided to the requestAnimationFrame's callback. Does not end on its own.\n *\n * Every subscription will start a separate animation loop. Since animation frames are always scheduled\n * by the browser to occur directly before a repaint, scheduling more than one animation frame synchronously\n * should not be much different or have more overhead than looping over an array of events during\n * a single animation frame. However, if for some reason the developer would like to ensure the\n * execution of animation-related handlers are all executed during the same task by the engine,\n * the `share` operator can be used.\n *\n * This is useful for setting up animations with RxJS.\n *\n * ## Examples\n *\n * Tweening a div to move it on the screen\n *\n * ```ts\n * import { animationFrames, map, takeWhile, endWith } from 'rxjs';\n *\n * function tween(start: number, end: number, duration: number) {\n *   const diff = end - start;\n *   return animationFrames().pipe(\n *     // Figure out what percentage of time has passed\n *     map(({ elapsed }) => elapsed / duration),\n *     // Take the vector while less than 100%\n *     takeWhile(v => v < 1),\n *     // Finish with 100%\n *     endWith(1),\n *     // Calculate the distance traveled between start and end\n *     map(v => v * diff + start)\n *   );\n * }\n *\n * // Setup a div for us to move around\n * const div = document.createElement('div');\n * document.body.appendChild(div);\n * div.style.position = 'absolute';\n * div.style.width = '40px';\n * div.style.height = '40px';\n * div.style.backgroundColor = 'lime';\n * div.style.transform = 'translate3d(10px, 0, 0)';\n *\n * tween(10, 200, 4000).subscribe(x => {\n *   div.style.transform = `translate3d(${ x }px, 0, 0)`;\n * });\n * ```\n *\n * Providing a custom timestamp provider\n *\n * ```ts\n * import { animationFrames, TimestampProvider } from 'rxjs';\n *\n * // A custom timestamp provider\n * let now = 0;\n * const customTSProvider: TimestampProvider = {\n *   now() { return now++; }\n * };\n *\n * const source$ = animationFrames(customTSProvider);\n *\n * // Log increasing numbers 0...1...2... on every animation frame.\n * source$.subscribe(({ elapsed }) => console.log(elapsed));\n * ```\n *\n * @param timestampProvider An object with a `now` method that provides a numeric timestamp\n */\nexport function animationFrames(timestampProvider?: TimestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\n\n/**\n * Does the work of creating the observable for `animationFrames`.\n * @param timestampProvider The timestamp provider to use to create the observable\n */\nfunction animationFramesFactory(timestampProvider?: TimestampProvider) {\n  const { schedule } = animationFrameProvider;\n  return new Observable<{ timestamp: number; elapsed: number }>((subscriber) => {\n    const subscription = new Subscription();\n    // If no timestamp provider is specified, use performance.now() - as it\n    // will return timestamps 'compatible' with those passed to the run\n    // callback and won't be affected by NTP adjustments, etc.\n    const provider = timestampProvider || performanceTimestampProvider;\n    // Capture the start time upon subscription, as the run callback can remain\n    // queued for a considerable period of time and the elapsed time should\n    // represent the time elapsed since subscription - not the time since the\n    // first rendered animation frame.\n    const start = provider.now();\n    const run = (timestamp: DOMHighResTimeStamp | number) => {\n      // Use the provider's timestamp to calculate the elapsed time. Note that\n      // this means - if the caller hasn't passed a provider - that\n      // performance.now() will be used instead of the timestamp that was\n      // passed to the run callback. The reason for this is that the timestamp\n      // passed to the callback can be earlier than the start time, as it\n      // represents the time at which the browser decided it would render any\n      // queued frames - and that time can be earlier the captured start time.\n      const now = provider.now();\n      subscriber.next({\n        timestamp: timestampProvider ? now : timestamp,\n        elapsed: now - start,\n      });\n      if (!subscriber.closed) {\n        subscription.add(schedule(run));\n      }\n    };\n    subscription.add(schedule(run));\n    return subscription;\n  });\n}\n\n/**\n * In the common case, where the timestamp provided by the rAF API is used,\n * we use this shared observable to reduce overhead.\n */\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n", "import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n", "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n", "import { TimestampProvider } from '../types';\n\ninterface DateTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const dateTimestampProvider: DateTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined,\n};\n", "import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple fo exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param bufferSize The size of the buffer to replay on subscription\n   * @param windowTime The amount of time the buffered items will say buffered\n   * @param timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n", "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private _value: T | null = null;\n  private _hasValue = false;\n  private _isComplete = false;\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<T>) {\n    const { hasError, _hasValue, _value, thrownError, isStopped, _isComplete } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value!);\n      subscriber.complete();\n    }\n  }\n\n  next(value: T): void {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  }\n\n  complete(): void {\n    const { _hasValue, _value, _isComplete } = this;\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && super.next(_value!);\n      super.complete();\n    }\n  }\n}\n", "import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n", "type SetIntervalFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearIntervalFunction = (handle: number) => void;\n\ninterface IntervalProvider {\n  setInterval: SetIntervalFunction;\n  clearInterval: ClearIntervalFunction;\n  delegate:\n    | {\n        setInterval: SetIntervalFunction;\n        clearInterval: ClearIntervalFunction;\n      }\n    | undefined;\n}\n\nexport const intervalProvider: IntervalProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setInterval(handler: () => void, timeout?: number, ...args) {\n    const {delegate} = intervalProvider;\n    if (delegate?.setInterval) {\n      return delegate.setInterval(handler, timeout, ...args);\n    }\n    return setInterval(handler, timeout, ...args);\n  },\n  clearInterval(handle) {\n    const { delegate } = intervalProvider;\n    return (delegate?.clearInterval || clearInterval)(handle);\n  },\n  delegate: undefined,\n};\n", "import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\n\nexport class AsyncAction<T> extends Action<T> {\n  public id: any;\n  public state?: T;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, _id?: any, delay: number = 0): any {\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(_scheduler: AsyncScheduler, id: any, delay: number | null = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    intervalProvider.clearInterval(id);\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, _delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      // HACK: Since code elsewhere is relying on the \"truthiness\" of the\n      // return here, we can't have it return \"\" or 0 or false.\n      // TODO: Clean this up when we refactor schedulers mid-version-8 or so.\n      errorValue = e ? e : new Error('Scheduled action threw falsy error');\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      const { id, scheduler } = this;\n      const { actions } = scheduler;\n\n      this.work = this.state = this.scheduler = null!;\n      this.pending = false;\n\n      arrRemove(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null!;\n      super.unsubscribe();\n    }\n  }\n}\n", "let nextHandle = 1;\n// The promise needs to be created lazily otherwise it won't be patched by Zones\nlet resolved: Promise<any>;\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    if (!resolved) {\n      resolved = Promise.resolve();\n    }\n    resolved.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n", "import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\n\ntype SetImmediateFunction = (handler: () => void, ...args: any[]) => number;\ntype ClearImmediateFunction = (handle: number) => void;\n\ninterface ImmediateProvider {\n  setImmediate: SetImmediateFunction;\n  clearImmediate: ClearImmediateFunction;\n  delegate:\n    | {\n        setImmediate: SetImmediateFunction;\n        clearImmediate: ClearImmediateFunction;\n      }\n    | undefined;\n}\n\nexport const immediateProvider: ImmediateProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setImmediate(...args) {\n    const { delegate } = immediateProvider;\n    return (delegate?.setImmediate || setImmediate)(...args);\n  },\n  clearImmediate(handle) {\n    const { delegate } = immediateProvider;\n    return (delegate?.clearImmediate || clearImmediate)(handle);\n  },\n  delegate: undefined,\n};\n", "import { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\nimport { immediateProvider } from './immediateProvider';\n\nexport class AsapAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AsapScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested microtask and set the scheduled flag to undefined\n    // so the next AsapAction will request its own.\n    if (!scheduler.actions.some((action) => action.id === id)) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n", "import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}. Will be made internal in v8.\n */\nexport class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n\n  constructor(private schedulerActionCtor: typeof Action, now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);\n  }\n}\n", "import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```ts\n * import { asapScheduler, asyncScheduler } from 'rxjs';\n *\n * asyncScheduler.schedule(() => console.log('async')); // scheduling 'async' first...\n * asapScheduler.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n */\n\nexport const asapScheduler = new AsapScheduler(AsapAction);\n\n/**\n * @deprecated Renamed to {@link asapScheduler}. Will be removed in v8.\n */\nexport const asap = asapScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\n\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated Renamed to {@link asyncScheduler}. Will be removed in v8.\n */\nexport const async = asyncScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n", "import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n", "import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(() => {\n *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n */\n\nexport const queueScheduler = new QueueScheduler(QueueAction);\n\n/**\n * @deprecated Renamed to {@link queueScheduler}. Will be removed in v8.\n */\nexport const queue = queueScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\nimport { animationFrameProvider } from './animationFrameProvider';\n\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AnimationFrameScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested animation frame and set the scheduled flag to\n    // undefined so the next AnimationFrameAction will request its own.\n    if (!scheduler.actions.some((action) => action.id === id)) {\n      animationFrameProvider.cancelAnimationFrame(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```ts\n * // html: <div style=\"background: #0ff;\"></div>\n * import { animationFrameScheduler } from 'rxjs';\n *\n * const div = document.querySelector('div');\n *\n * animationFrameScheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see a div element growing in height\n * ```\n */\n\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\n\n/**\n * @deprecated Renamed to {@link animationFrameScheduler}. Will be removed in v8.\n */\nexport const animationFrame = animationFrameScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n  /** @deprecated Not used in VirtualTimeScheduler directly. Will be removed in v8. */\n  static frameTimeFactor = 10;\n\n  /**\n   * The current frame for the state of the virtual scheduler instance. The the difference\n   * between two \"frames\" is synonymous with the passage of \"virtual time units\". So if\n   * you record `scheduler.frame` to be `1`, then later, observe `scheduler.frame` to be at `11`,\n   * that means `10` virtual time units have passed.\n   */\n  public frame: number = 0;\n\n  /**\n   * Used internally to examine the current virtual action index being processed.\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  public index: number = -1;\n\n  /**\n   * This creates an instance of a `VirtualTimeScheduler`. Experts only. The signature of\n   * this constructor is likely to change in the long run.\n   *\n   * @param schedulerActionCtor The type of Action to initialize when initializing actions during scheduling.\n   * @param maxFrames The maximum number of frames to process before stopping. Used to prevent endless flush cycles.\n   */\n  constructor(schedulerActionCtor: typeof AsyncAction = VirtualAction as any, public maxFrames: number = Infinity) {\n    super(schedulerActionCtor, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n    const { actions, maxFrames } = this;\n    let error: any;\n    let action: AsyncAction<any> | undefined;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    }\n\n    if (error) {\n      while ((action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\nexport class VirtualAction<T> extends AsyncAction<T> {\n  protected active: boolean = true;\n\n  constructor(\n    protected scheduler: VirtualTimeScheduler,\n    protected work: (this: SchedulerAction<T>, state?: T) => void,\n    protected index: number = (scheduler.index += 1)\n  ) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (Number.isFinite(delay)) {\n      if (!this.id) {\n        return super.schedule(state, delay);\n      }\n      this.active = false;\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      const action = new VirtualAction(this.scheduler, this.work);\n      this.add(action);\n      return action.schedule(state, delay);\n    } else {\n      // If someone schedules something with Infinity, it'll never happen. So we\n      // don't even schedule it.\n      return Subscription.EMPTY;\n    }\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const { actions } = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  private static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * A simple Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * A simple Observable that only emits the complete notification. It can be used\n * for composing with other Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n *\n * Emit the number 7, then complete\n *\n * ```ts\n * import { EMPTY, startWith } from 'rxjs';\n *\n * const result = EMPTY.pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * Map and flatten only odd numbers to the sequence `'a'`, `'b'`, `'c'`\n *\n * ```ts\n * import { interval, mergeMap, of, EMPTY } from 'rxjs';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : EMPTY),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link NEVER}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n", "import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n", "import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n", "export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');", "import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n", "import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n", "import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n", "/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n", "export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n", "import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n", "import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n", "import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n", "import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n", "/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint\n *\n * ```ts\n * import { interval, observeOn, animationFrameScheduler } from 'rxjs';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);      // Intervals are scheduled\n *                                      // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\n * )                                    // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n", "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\n *\n * ```ts\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n", "import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n", "import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n", "import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from, take } from 'rxjs';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * With `asyncScheduler`\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // 'start'\n * // 'end'\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n", "import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n", "import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerLike } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates an observable that will create an error instance and push it to the consumer as an error\n * immediately upon subscription.\n *\n * <span class=\"informal\">Just errors and does nothing else</span>\n *\n * ![](throw.png)\n *\n * This creation function is useful for creating an observable that will create an error and error every\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\n * that up and notify the consumer of the error.\n *\n * ## Example\n *\n * Create a simple observable that will create a new error with a timestamp and log it\n * and the message every time you subscribe to it\n *\n * ```ts\n * import { throwError } from 'rxjs';\n *\n * let errorCount = 0;\n *\n * const errorWithTimestamp$ = throwError(() => {\n *   const error: any = new Error(`This is error number ${ ++errorCount }`);\n *   error.timestamp = Date.now();\n *   return error;\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * // Logs the timestamp and a new error message for each subscription\n * ```\n *\n * ### Unnecessary usage\n *\n * Using `throwError` inside of an operator or creation function\n * with a callback, is usually not necessary\n *\n * ```ts\n * import { of, concatMap, timer, throwError } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // This is probably overkill.\n *       return throwError(() => new Error(`Invalid time ${ ms }`));\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * You can just throw the error instead\n *\n * ```ts\n * import { of, concatMap, timer } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // Cleaner and easier to read for most folks.\n *       throw new Error(`Invalid time ${ ms }`);\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * @param errorFactory A factory function that will create the error instance that is pushed.\n */\nexport function throwError(errorFactory: () => any): Observable<never>;\n\n/**\n * Returns an observable that will error with the specified error immediately upon subscription.\n *\n * @param error The error instance to emit\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n */\nexport function throwError(error: any): Observable<never>;\n\n/**\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n *\n * @param errorOrErrorFactory An error instance or error factory\n * @param scheduler A scheduler to use to schedule the error notification\n * @deprecated The `scheduler` parameter will be removed in v8.\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\n * Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\n\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\n}\n", "import { PartialObserver, ObservableNotification, CompleteNotification, NextNotification, ErrorNotification } from './types';\nimport { Observable } from './Observable';\nimport { EMPTY } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { isFunction } from './util/isFunction';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated Use a string literal instead. `NotificationKind` will be replaced with a type alias in v8.\n * It will not be replaced with a const enum as those are not compatible with isolated modules.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n * @deprecated It is NOT recommended to create instances of `Notification` directly.\n * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n * Will be removed in v8.\n */\nexport class Notification<T> {\n  /**\n   * A value signifying that the notification will \"next\" if observed. In truth,\n   * This is really synonymous with just checking `kind === \"N\"`.\n   * @deprecated Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\n   */\n  readonly hasValue: boolean;\n\n  /**\n   * Creates a \"Next\" notification object.\n   * @param kind Always `'N'`\n   * @param value The value to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createNext createNext} instead.\n   */\n  constructor(kind: 'N', value?: T);\n  /**\n   * Creates an \"Error\" notification object.\n   * @param kind Always `'E'`\n   * @param value Always `undefined`\n   * @param error The error to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createError createError} instead.\n   */\n  constructor(kind: 'E', value: undefined, error: any);\n  /**\n   * Creates a \"completion\" notification object.\n   * @param kind Always `'C'`\n   * @deprecated Internal implementation detail. Use {@link Notification#createComplete createComplete} instead.\n   */\n  constructor(kind: 'C');\n  constructor(public readonly kind: 'N' | 'E' | 'C', public readonly value?: T, public readonly error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   */\n  observe(observer: PartialObserver<T>): void {\n    return observeNotification(this as ObservableNotification<T>, observer);\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void): void;\n  do(nextHandler: (value: T) => void, errorHandler?: (err: any) => void, completeHandler?: () => void): void {\n    const { kind, value, error } = this;\n    return kind === 'N' ? nextHandler?.(value!) : kind === 'E' ? errorHandler?.(error) : completeHandler?.();\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void): void;\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(observer: PartialObserver<T>): void;\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    return isFunction((nextOrObserver as any)?.next)\n      ? this.observe(nextOrObserver as PartialObserver<T>)\n      : this.do(nextOrObserver as (value: T) => void, error as any, complete as any);\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   *\n   * @deprecated Will be removed in v8. To convert a `Notification` to an {@link Observable},\n   * use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`.\n   */\n  toObservable(): Observable<T> {\n    const { kind, value, error } = this;\n    // Select the observable to return by `kind`\n    const result =\n      kind === 'N'\n        ? // Next kind. Return an observable of that value.\n          of(value!)\n        : //\n        kind === 'E'\n        ? // Error kind. Return an observable that emits the error.\n          throwError(() => error)\n        : //\n        kind === 'C'\n        ? // Completion kind. Kind is \"C\", return an observable that just completes.\n          EMPTY\n        : // Unknown kind, return falsy, so we error below.\n          0;\n    if (!result) {\n      // TODO: consider removing this check. The only way to cause this would be to\n      // use the Notification constructor directly in a way that is not type-safe.\n      // and direct use of the Notification constructor is deprecated.\n      throw new TypeError(`Unexpected notification kind ${kind}`);\n    }\n    return result;\n  }\n\n  private static completeNotification = new Notification('C') as Notification<never> & CompleteNotification;\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createNext<T>(value: T) {\n    return new Notification('N', value) as Notification<T> & NextNotification<T>;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createError(err?: any) {\n    return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createComplete(): Notification<never> & CompleteNotification {\n    return Notification.completeNotification;\n  }\n}\n\n/**\n * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n * If the handler is missing it will do nothing. Even if the notification is an error, if\n * there is no error handler on the observer, an error will not be thrown, it will noop.\n * @param notification The notification object to observe.\n * @param observer The observer to notify.\n */\nexport function observeNotification<T>(notification: ObservableNotification<T>, observer: PartialObserver<T>) {\n  const { kind, value, error } = notification as any;\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n  kind === 'N' ? observer.next?.(value!) : kind === 'E' ? observer.error?.(error) : observer.complete?.();\n}\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass((_super) => function EmptyErrorImpl(this: any) {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface ArgumentOutOfRangeError extends Error {}\n\nexport interface ArgumentOutOfRangeErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ArgumentOutOfRangeError;\n}\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor = createErrorClass(\n  (_super) =>\n    function ArgumentOutOfRangeErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ArgumentOutOfRangeError';\n      this.message = 'argument out of range';\n    }\n);\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface NotFoundError extends Error {}\n\nexport interface NotFoundErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (message: string): NotFoundError;\n}\n\n/**\n * An error thrown when a value or values are missing from an\n * observable sequence.\n *\n * @see {@link operators/single}\n *\n * @class NotFoundError\n */\nexport const NotFoundError: NotFoundErrorCtor = createErrorClass(\n  (_super) =>\n    function NotFoundErrorImpl(this: any, message: string) {\n      _super(this);\n      this.name = 'NotFoundError';\n      this.message = message;\n    }\n);\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface SequenceError extends Error {}\n\nexport interface SequenceErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (message: string): SequenceError;\n}\n\n/**\n * An error thrown when something is wrong with the sequence of\n * values arriving on the observable.\n *\n * @see {@link operators/single}\n *\n * @class SequenceError\n */\nexport const SequenceError: SequenceErrorCtor = createErrorClass(\n  (_super) =>\n    function SequenceErrorImpl(this: any, message: string) {\n      _super(this);\n      this.name = 'SequenceError';\n      this.message = message;\n    }\n);\n", "import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { isValidDate } from '../util/isDate';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport interface TimeoutConfig<T, O extends ObservableInput<unknown> = ObservableInput<T>, M = unknown> {\n  /**\n   * The time allowed between values from the source before timeout is triggered.\n   */\n  each?: number;\n\n  /**\n   * The relative time as a `number` in milliseconds, or a specific time as a `Date` object,\n   * by which the first value must arrive from the source before timeout is triggered.\n   */\n  first?: number | Date;\n\n  /**\n   * The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n   */\n  scheduler?: SchedulerLike;\n\n  /**\n   * A factory used to create observable to switch to when timeout occurs. Provides\n   * a {@link TimeoutInfo} about the source observable's emissions and what delay or\n   * exact time triggered the timeout.\n   */\n  with?: (info: TimeoutInfo<T, M>) => O;\n\n  /**\n   * Optional additional metadata you can provide to code that handles\n   * the timeout, will be provided through the {@link TimeoutError}.\n   * This can be used to help identify the source of a timeout or pass along\n   * other information related to the timeout.\n   */\n  meta?: M;\n}\n\nexport interface TimeoutInfo<T, M = unknown> {\n  /** Optional metadata that was provided to the timeout configuration. */\n  readonly meta: M;\n  /** The number of messages seen before the timeout */\n  readonly seen: number;\n  /** The last message seen */\n  readonly lastValue: T | null;\n}\n\n/**\n * An error emitted when a timeout occurs.\n */\nexport interface TimeoutError<T = unknown, M = unknown> extends Error {\n  /**\n   * The information provided to the error by the timeout\n   * operation that created the error. Will be `null` if\n   * used directly in non-RxJS code with an empty constructor.\n   * (Note that using this constructor directly is not recommended,\n   * you should create your own errors)\n   */\n  info: TimeoutInfo<T, M> | null;\n}\n\nexport interface TimeoutErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new <T = unknown, M = unknown>(info?: TimeoutInfo<T, M>): TimeoutError<T, M>;\n}\n\n/**\n * An error thrown by the {@link timeout} operator.\n *\n * Provided so users can use as a type and do quality comparisons.\n * We recommend you do not subclass this or create instances of this class directly.\n * If you have need of a error representing a timeout, you should\n * create your own error class and use that.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport const TimeoutError: TimeoutErrorCtor = createErrorClass(\n  (_super) =>\n    function TimeoutErrorImpl(this: any, info: TimeoutInfo<any> | null = null) {\n      _super(this);\n      this.message = 'Timeout has occurred';\n      this.name = 'TimeoutError';\n      this.info = info;\n    }\n);\n\n/**\n * If `with` is provided, this will return an observable that will switch to a different observable if the source\n * does not push values within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ## Examples\n *\n * Emit a custom error if there is too much time between values\n *\n * ```ts\n * import { interval, timeout, throwError } from 'rxjs';\n *\n * class CustomTimeoutError extends Error {\n *   constructor() {\n *     super('It was too slow');\n *     this.name = 'CustomTimeoutError';\n *   }\n * }\n *\n * const slow$ = interval(900);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => throwError(() => new CustomTimeoutError())\n *   })\n * )\n * .subscribe({\n *   error: console.error\n * });\n * ```\n *\n * Switch to a faster observable if your source is slow.\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * const slow$ = interval(900);\n * const fast$ = interval(500);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => fast$,\n *   })\n * )\n * .subscribe(console.log);\n * ```\n * @param config The configuration for the timeout.\n */\nexport function timeout<T, O extends ObservableInput<unknown>, M = unknown>(\n  config: TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n\n/**\n * Returns an observable that will error or switch to a different observable if the source does not push values\n * within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ### Handling TimeoutErrors\n *\n * If no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\n * The timeout error provides useful information you can examine when you're handling the error. The most common way to handle\n * the error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\n * directly, if your error handling is only a side effect (such as notifying the user, or logging).\n *\n * In this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\n * not from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\n *\n * ## Examples\n *\n * Emit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * // A random interval that lasts between 0 and 10 seconds per tick\n * const source$ = interval(Math.round(Math.random() * 10_000));\n *\n * source$.pipe(\n *   timeout({ first: 5_000 })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * Emit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\n * and subscription.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n *\n * Emit a {@link TimeoutError} if the source does not emit before 7 seconds, _or_ if the source waits longer than\n * 5 seconds between any two values after the first.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ first: 7_000, each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n */\nexport function timeout<T, M = unknown>(config: Omit<TimeoutConfig<T, any, M>, 'with'>): OperatorFunction<T, T>;\n\n/**\n * Returns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\n * This is functionally the same as `timeout({ first: someDate })`.\n *\n * <span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\n *\n * ![](timeout.png)\n *\n * @param first The date to at which the resulting observable will timeout if the source observable\n * does not emit at least one value.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(first: Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that will error if the source does not push a value within the specified time in milliseconds.\n * This is functionally the same as `timeout({ each: milliseconds })`.\n *\n * <span class=\"informal\">Errors if it waits too long between any value</span>\n *\n * ![](timeout.png)\n *\n * @param each The time allowed between each pushed value from the source before the resulting observable\n * will timeout.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(each: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * ![](timeout.png)\n *\n * @see {@link timeoutWith}\n *\n * @return A function that returns an Observable that mirrors behaviour of the\n * source Observable, unless timeout happens when it throws an error.\n */\nexport function timeout<T, O extends ObservableInput<any>, M>(\n  config: number | Date | TimeoutConfig<T, O, M>,\n  schedulerArg?: SchedulerLike\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  // Intentionally terse code.\n  // If the first argument is a valid `Date`, then we use it as the `first` config.\n  // Otherwise, if the first argument is a `number`, then we use it as the `each` config.\n  // Otherwise, it can be assumed the first argument is the configuration object itself, and\n  // we destructure that into what we're going to use, setting important defaults as we do.\n  // NOTE: The default for `scheduler` will be the `scheduler` argument if it exists, or\n  // it will default to the `asyncScheduler`.\n  const {\n    first,\n    each,\n    with: _with = timeoutErrorFactory,\n    scheduler = schedulerArg ?? asyncScheduler,\n    meta = null!,\n  } = (isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config) as TimeoutConfig<T, O, M>;\n\n  if (first == null && each == null) {\n    // Ensure timeout was provided at runtime.\n    throw new TypeError('No timeout provided.');\n  }\n\n  return operate((source, subscriber) => {\n    // This subscription encapsulates our subscription to the\n    // source for this operator. We're capturing it separately,\n    // because if there is a `with` observable to fail over to,\n    // we want to unsubscribe from our original subscription, and\n    // hand of the subscription to that one.\n    let originalSourceSubscription: Subscription;\n    // The subscription for our timeout timer. This changes\n    // every time get get a new value.\n    let timerSubscription: Subscription;\n    // A bit of state we pass to our with and error factories to\n    // tell what the last value we saw was.\n    let lastValue: T | null = null;\n    // A bit of state we pass to the with and error factories to\n    // tell how many values we have seen so far.\n    let seen = 0;\n    const startTimer = (delay: number) => {\n      timerSubscription = executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          try {\n            originalSourceSubscription.unsubscribe();\n            innerFrom(\n              _with!({\n                meta,\n                lastValue,\n                seen,\n              })\n            ).subscribe(subscriber);\n          } catch (err) {\n            subscriber.error(err);\n          }\n        },\n        delay\n      );\n    };\n\n    originalSourceSubscription = source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // clear the timer so we can emit and start another one.\n          timerSubscription?.unsubscribe();\n          seen++;\n          // Emit\n          subscriber.next((lastValue = value));\n          // null | undefined are both < 0. Thanks, JavaScript.\n          each! > 0 && startTimer(each!);\n        },\n        undefined,\n        undefined,\n        () => {\n          if (!timerSubscription?.closed) {\n            timerSubscription?.unsubscribe();\n          }\n          // Be sure not to hold the last value in memory after unsubscription\n          // it could be quite large.\n          lastValue = null;\n        }\n      )\n    );\n\n    // Intentionally terse code.\n    // If we've `seen` a value, that means the \"first\" clause was met already, if it existed.\n    //   it also means that a timer was already started for \"each\" (in the next handler above).\n    // If `first` was provided, and it's a number, then use it.\n    // If `first` was provided and it's not a number, it's a Date, and we get the difference between it and \"now\".\n    // If `first` was not provided at all, then our first timer will be the value from `each`.\n    !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler!.now()) : each!);\n  });\n}\n\n/**\n * The default function to use to emit an error when timeout occurs and a `with` function\n * is not specified.\n * @param info The information about the timeout to pass along to the error\n */\nfunction timeoutErrorFactory(info: TimeoutInfo<any>): Observable<never> {\n  throw new TimeoutError(info);\n}\n", "import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n *\n * Map every click to the `clientX` position of that click\n *\n * ```ts\n * import { fromEvent, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n *\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n", "import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}", "const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n", "import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n", "import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n", "import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n", "import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(4)))\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n *\n * Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n *\n * ```ts\n * import { interval, take, range, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * Concatenate 3 Observables\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * Concatenate the same Observable to repeat it\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n *   .subscribe({\n *     next: value => console.log(value),\n *     complete: () => console.log('...and it is done!')\n *   });\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // '...and it is done!' also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param args Input Observables to concatenate.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Merge together two Observables: 1s interval and clicks\n *\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * Merge together 3 Observables, but run only 2 concurrently\n *\n * ```ts\n * import { interval, take, merge } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(from(sources, scheduler));\n}\n", "import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n *\n * Emit the number 7, then never emit anything else (not even complete)\n *\n * ```ts\n * import { NEVER, startWith } from 'rxjs';\n *\n * const info = () => console.log('Will not be called');\n *\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe({\n *   next: x => console.log(x),\n *   error: info,\n *   complete: info\n * });\n * ```\n *\n * @see {@link Observable}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Replaced with the {@link NEVER} constant. Will be removed in v8.\n */\nexport function never() {\n  return NEVER;\n}\n", "const { isArray } = Array;\n\n/**\n * Used in operators and functions that accept either a list of arguments, or an array of arguments\n * as a single argument.\n */\nexport function argsOrArgArray<T>(args: (T | T[])[]): T[] {\n  return args.length === 1 && isArray(args[0]) ? args[0] : (args as T[]);\n}\n", "import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n *\n * Emit only click events whose target was a DIV element\n *\n * ```ts\n * import { fromEvent, filter } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n", "import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, concatMap, interval, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * values from each projected inner Observable sequentially.\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n", "import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n *\n * Take the first 5 seconds of an infinite 1-second interval Observable\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n", "import { Observable } from '../Observable';\nimport { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubjectLike } from '../types';\nimport { operate } from '../util/lift';\n\nexport interface ShareConfig<T> {\n  /**\n   * The factory used to create the subject that will connect the source observable to\n   * multicast consumers.\n   */\n  connector?: () => SubjectLike<T>;\n  /**\n   * If true, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"retried\" in the event of an error.\n   * If false, when an error comes from the source it will push the error into the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\n   * or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n   * {@link ReplaySubject} will also push its buffered values before pushing the error.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnError?: boolean | ((error: any) => Observable<any>);\n  /**\n   * If true, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"repeated\" after it is done.\n   * If false, when the source completes, it will push the completion through the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\n   * or resubscriptions will resubscribe to that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnComplete?: boolean | (() => Observable<any>);\n  /**\n   * If true, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\n   * internal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\n   * time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\n   * again.\n   * If false, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\n   * will remain connected to the source, and new subscriptions to the result will be connected through that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnRefCountZero?: boolean | (() => Observable<any>);\n}\n\nexport function share<T>(): MonoTypeOperatorFunction<T>;\n\nexport function share<T>(options: ShareConfig<T>): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\n * if the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\n * possible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\n * note that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\n * of the source because the error or complete will be forwarded to all subscribers and their subscription will be\n * closed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\n * source. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\n *\n * ![](share.png)\n *\n * ## Example\n *\n * Generate new multicast Observable from the `source` Observable value\n *\n * ```ts\n * import { interval, tap, map, take, share } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   tap(x => console.log('Processing: ', x)),\n *   map(x => x * x),\n *   take(6),\n *   share()\n * );\n *\n * source.subscribe(x => console.log('subscription 1: ', x));\n * source.subscribe(x => console.log('subscription 2: ', x));\n *\n * // Logs:\n * // Processing: 0\n * // subscription 1: 0\n * // subscription 2: 0\n * // Processing: 1\n * // subscription 1: 1\n * // subscription 2: 1\n * // Processing: 2\n * // subscription 1: 4\n * // subscription 2: 4\n * // Processing: 3\n * // subscription 1: 9\n * // subscription 2: 9\n * // Processing: 4\n * // subscription 1: 16\n * // subscription 2: 16\n * // Processing: 5\n * // subscription 1: 25\n * // subscription 2: 25\n * ```\n *\n * ## Example with notifier factory: Delayed reset\n *\n * ```ts\n * import { interval, take, share, timer } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   take(3),\n *   share({\n *     resetOnRefCountZero: () => timer(1000)\n *   })\n * );\n *\n * const subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\n * setTimeout(() => subscriptionOne.unsubscribe(), 1300);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n *\n * // Logs:\n * // subscription 1:  0\n * // (subscription 1 unsubscribes here)\n * // (subscription 2 subscribes here ~400ms later, source was not reset)\n * // subscription 2:  1\n * // subscription 2:  2\n * // (subscription 2 unsubscribes here)\n * // (subscription 3 subscribes here ~2000ms later, source did reset before)\n * // subscription 3:  0\n * // subscription 3:  1\n * // subscription 3:  2\n * ```\n *\n * @see {@link shareReplay}\n *\n * @return A function that returns an Observable that mirrors the source.\n */\nexport function share<T>(options: ShareConfig<T> = {}): MonoTypeOperatorFunction<T> {\n  const { connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n  // It's necessary to use a wrapper here, as the _operator_ must be\n  // referentially transparent. Otherwise, it cannot be used in calls to the\n  // static `pipe` function - to create a partial pipeline.\n  //\n  // The _operator function_ - the function returned by the _operator_ - will\n  // not be referentially transparent - as it shares its source - but the\n  // _operator function_ is called when the complete pipeline is composed via a\n  // call to a source observable's `pipe` method - not when the static `pipe`\n  // function is called.\n  return (wrapperSource) => {\n    let connection: SafeSubscriber<T> | null = null;\n    let resetConnection: Subscription | null = null;\n    let subject: SubjectLike<T> | null = null;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection?.unsubscribe();\n      resetConnection = null;\n    };\n    // Used to reset the internal state to a \"cold\"\n    // state, as though it had never been subscribed to.\n    const reset = () => {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      // We need to capture the connection before\n      // we reset (if we need to reset).\n      const conn = connection;\n      reset();\n      conn?.unsubscribe();\n    };\n\n    return operate<T, T>((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      // Create the subject if we don't have one yet. Grab a local reference to\n      // it as well, which avoids non-null assertations when using it and, if we\n      // connect to it now, then error/complete need a reference after it was\n      // reset.\n      const dest = (subject = subject ?? connector());\n\n      // Add the finalization directly to the subscriber - instead of returning it -\n      // so that the handling of the subscriber's unsubscription will be wired\n      // up _before_ the subscription to the source occurs. This is done so that\n      // the assignment to the source connection's `closed` property will be seen\n      // by synchronous firehose sources.\n      subscriber.add(() => {\n        refCount--;\n\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\n        // configuration.\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n\n      // The following line adds the subscription to the subscriber passed.\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        // We need to create a subscriber here - rather than pass an observer and\n        // assign the returned subscription to connection - because it's possible\n        // for reentrant subscriptions to the shared observable to occur and in\n        // those situations we want connection to be already-assigned so that we\n        // don't create another connection to the source.\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset<T extends unknown[] = never[]>(\n  reset: () => void,\n  on: boolean | ((...args: T) => Observable<any>),\n  ...args: T\n): Subscription | null {\n  if (on === true) {\n    reset();\n\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  return on(...args)\n    .pipe(take(1))\n    .subscribe(() => reset());\n}\n", "/**\n * Type enum is used to specify value types in {@link ComponentSchema} to be able\n * to access type values in JavaScript in addition to TypeScript type checks.\n */\nexport enum Type {\n  Boolean,\n  Number,\n  OptionalNumber,\n  BigInt,\n  OptionalBigInt,\n  String,\n  OptionalString,\n  NumberArray,\n  OptionalNumberArray,\n  BigIntArray,\n  OptionalBigIntArray,\n  StringArray,\n  OptionalStringArray,\n  Entity,\n  OptionalEntity,\n  EntityArray,\n  OptionalEntityArray,\n  T,\n  OptionalT,\n  Schema,\n}\n\n/**\n * Used to specify type of {@link ComponentUpdate}.\n * - Enter: Update added a value to an entity that did not have a value before\n * - Exit: Update removed a value from an entity that had a value before\n * - Update: Update changed a value of an entity that already had a value before. Note: the value doesn't need to be different from the previous value.\n * - Noop: Update did nothing (removed a value from an entity that did not have a value)\n */\nexport enum UpdateType {\n  Enter,\n  Exit,\n  Update,\n  Noop,\n}\n\n/**\n * Helper constant with all optional {@link Type}s.\n */\nexport const OptionalTypes = [\n  Type.OptionalEntity,\n  Type.OptionalEntityArray,\n  Type.OptionalNumber,\n  Type.OptionalNumberArray,\n  Type.OptionalBigInt,\n  Type.OptionalBigIntArray,\n  Type.OptionalString,\n  Type.OptionalStringArray,\n  Type.OptionalT,\n];\n", "import { transformIterator, uuid } from \"@latticexyz/utils\";\nimport { mapObject } from \"@latticexyz/utils\";\nimport { filter, map, Subject } from \"rxjs\";\nimport { OptionalTypes, Type } from \"./constants\";\nimport { createIndexer } from \"./Indexer\";\nimport {\n  Component,\n  ComponentValue,\n  Entity,\n  EntitySymbol,\n  Indexer,\n  Metadata,\n  OverridableComponent,\n  Override,\n  Schema,\n  World,\n} from \"./types\";\nimport { isFullComponentValue, isIndexer } from \"./utils\";\nimport { getEntityString, getEntitySymbol } from \"./Entity\";\n\nexport type ComponentMutationOptions = {\n  /** Skip publishing this mutation to the component's update stream. Mostly used internally during initial hydration. */\n  skipUpdateStream?: boolean;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getComponentName(component: Component<any, any, any>) {\n  return (\n    component.metadata?.componentName ??\n    component.metadata?.tableName ??\n    component.metadata?.tableId ??\n    component.metadata?.contractId ??\n    component.id\n  );\n}\n\n/**\n * Components contain state indexed by entities and are one of the fundamental building blocks in ECS.\n * Besides containing the state, components expose an rxjs update$ stream, that emits an event any time the value\n * of an entity in this component is updated.\n *\n * @param world {@link World} object this component should be registered onto.\n * @param schema {@link Schema} of component values. Uses Type enum as bridge between typescript types and javascript accessible values.\n * @param options Optional: {\n *    id: descriptive id for this component (otherwise an autogenerated id is used),\n *    metadata: arbitrary metadata,\n *    indexed: if this flag is set, an indexer is applied to this component (see {@link createIndexer})\n * }\n * @returns Component object linked to the provided World\n *\n * @example\n * ```\n * const Position = defineComponent(world, { x: Type.Number, y: Type.Number }, { id: \"Position\" });\n * ```\n */\nexport function defineComponent<S extends Schema, M extends Metadata, T = unknown>(\n  world: World,\n  schema: S,\n  options?: { id?: string; metadata?: M; indexed?: boolean },\n) {\n  if (Object.keys(schema).length === 0) throw new Error(\"Component schema must have at least one key\");\n  const id = options?.id ?? uuid();\n  const values = mapObject(schema, () => new Map());\n  const update$ = new Subject();\n  const metadata = options?.metadata;\n  const entities = () =>\n    transformIterator((Object.values(values)[0] as Map<EntitySymbol, unknown>).keys(), getEntityString);\n  let component = { values, schema, id, update$, metadata, entities, world } as Component<S, M, T>;\n  if (options?.indexed) component = createIndexer(component);\n  world.registerComponent(component as Component);\n  return component;\n}\n\n/**\n * Set the value for a given entity in a given component.\n *\n * @param component {@link defineComponent Component} to be updated.\n * @param entity {@link Entity} whose value in the given component should be set.\n * @param value Value to set, schema must match the component schema.\n *\n * @example\n * ```\n * setComponent(Position, entity, { x: 1, y: 2 });\n * ```\n */\nexport function setComponent<S extends Schema, T = unknown>(\n  component: Component<S, Metadata, T>,\n  entity: Entity,\n  value: ComponentValue<S, T>,\n  options: ComponentMutationOptions = {},\n) {\n  const entitySymbol = getEntitySymbol(entity);\n  const prevValue = getComponentValue(component, entity);\n  for (const [key, val] of Object.entries(value)) {\n    if (component.values[key]) {\n      component.values[key].set(entitySymbol, val);\n    } else {\n      const isTableFieldIndex = component.metadata?.tableId && /^\\d+$/.test(key);\n      if (!isTableFieldIndex) {\n        // If this key looks like a field index from `defineStoreComponents`,\n        // we can ignore this value without logging anything.\n        //\n        // Otherwise, we should let the user know we found undefined data.\n        console.warn(\n          \"Component definition for\",\n          getComponentName(component),\n          \"is missing key\",\n          key,\n          \", ignoring value\",\n          val,\n          \"for entity\",\n          entity,\n          \". Existing keys: \",\n          Object.keys(component.values),\n        );\n      }\n    }\n  }\n  if (!options.skipUpdateStream) {\n    component.update$.next({ entity, value: [value, prevValue], component });\n  }\n}\n\n/**\n * Update the value for a given entity in a given component while keeping the old value of keys not included in the update.\n *\n * @param component {@link defineComponent Component} to be updated.\n * @param entity {@link Entity} whose value in the given component should be updated.\n * @param value Partial value to be set, remaining keys will be taken from the existing component value.\n *\n * @remarks\n * This function fails silently during runtime if a partial value is set for an entity that\n * does not have a component value yet, since then a partial value will be set in the component for this entity.\n *\n * @example\n * ```\n * updateComponent(Position, entity, { x: 1 });\n * ```\n */\nexport function updateComponent<S extends Schema, T = unknown>(\n  component: Component<S, Metadata, T>,\n  entity: Entity,\n  value: Partial<ComponentValue<S, T>>,\n  initialValue?: ComponentValue<S, T>,\n  options: ComponentMutationOptions = {},\n) {\n  const currentValue = getComponentValue(component, entity);\n  if (currentValue === undefined) {\n    if (initialValue === undefined) {\n      throw new Error(`Can't update component ${getComponentName(component)} without a current value or initial value`);\n    }\n    setComponent(component, entity, { ...initialValue, ...value }, options);\n  } else {\n    setComponent(component, entity, { ...currentValue, ...value }, options);\n  }\n}\n\n/**\n * Remove a given entity from a given component.\n *\n * @param component {@link defineComponent Component} to be updated.\n * @param entity {@link Entity} whose value should be removed from this component.\n */\nexport function removeComponent<S extends Schema, M extends Metadata, T = unknown>(\n  component: Component<S, M, T>,\n  entity: Entity,\n  options: ComponentMutationOptions = {},\n) {\n  const entitySymbol = getEntitySymbol(entity);\n  const prevValue = getComponentValue(component, entity);\n  for (const key of Object.keys(component.values)) {\n    component.values[key].delete(entitySymbol);\n  }\n  if (!options.skipUpdateStream) {\n    component.update$.next({ entity, value: [undefined, prevValue], component });\n  }\n}\n\n/**\n * Check whether a component contains a value for a given entity.\n *\n * @param component {@link defineComponent Component} to check whether it has a value for the given entity.\n * @param entity {@link Entity} to check whether it has a value in the given component.\n * @returns true if the component contains a value for the given entity, else false.\n */\nexport function hasComponent<S extends Schema, T = unknown>(\n  component: Component<S, Metadata, T>,\n  entity: Entity,\n): boolean {\n  const entitySymbol = getEntitySymbol(entity);\n  const map = Object.values(component.values)[0];\n  return map.has(entitySymbol);\n}\n\n/**\n * Get the value of a given entity in the given component.\n * Returns undefined if no value or only a partial value is found.\n *\n * @param component {@link defineComponent Component} to get the value from for the given entity.\n * @param entity {@link Entity} to get the value for from the given component.\n * @returns Value of the given entity in the given component or undefined if no value exists.\n */\nexport function getComponentValue<S extends Schema, T = unknown>(\n  component: Component<S, Metadata, T>,\n  entity: Entity,\n): ComponentValue<S, T> | undefined {\n  const value: Record<string, unknown> = {};\n  const entitySymbol = getEntitySymbol(entity);\n\n  // Get the value of each schema key\n  const schemaKeys = Object.keys(component.schema);\n  for (const key of schemaKeys) {\n    const val = component.values[key].get(entitySymbol);\n    if (val === undefined && !OptionalTypes.includes(component.schema[key] as Type)) return undefined;\n    value[key] = val;\n  }\n\n  return value as ComponentValue<S, T>;\n}\n\n/**\n * Get the value of a given entity in the given component.\n * Throws an error if no value exists for the given entity in the given component.\n *\n * @param component {@link defineComponent Component} to get the value from for the given entity.\n * @param entity {@link Entity} of the entity to get the value for from the given component.\n * @returns Value of the given entity in the given component.\n *\n * @remarks\n * Throws an error if no value exists in the component for the given entity.\n */\nexport function getComponentValueStrict<S extends Schema, T = unknown>(\n  component: Component<S, Metadata, T>,\n  entity: Entity,\n): ComponentValue<S, T> {\n  const value = getComponentValue(component, entity);\n  if (!value) throw new Error(`No value for component ${getComponentName(component)} on entity ${entity}`);\n  return value;\n}\n\n/**\n * Compare two {@link ComponentValue}s.\n * `a` can be a partial component value, in which case only the keys present in `a` are compared to the corresponding keys in `b`.\n *\n * @param a Partial {@link ComponentValue} to compare to `b`\n * @param b Component value to compare `a` to.\n * @returns True if `a` equals `b` in the keys present in a or neither `a` nor `b` are defined, else false.\n *\n * @example\n * ```\n * componentValueEquals({ x: 1, y: 2 }, { x: 1, y: 3 }) // returns false because value of y doesn't match\n * componentValueEquals({ x: 1 }, { x: 1, y: 3 }) // returns true because x is equal and y is not present in a\n * ```\n */\nexport function componentValueEquals<S extends Schema, T = unknown>(\n  a?: Partial<ComponentValue<S, T>>,\n  b?: ComponentValue<S, T>,\n): boolean {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n\n  let equals = true;\n  for (const key of Object.keys(a)) {\n    equals = a[key] === b[key];\n    if (!equals) return false;\n  }\n  return equals;\n}\n\n/**\n * Util to create a tuple of a component and value with matching schema.\n * (Used to enforce Typescript type safety.)\n *\n * @param component {@link defineComponent Component} with {@link ComponentSchema} `S`\n * @param value {@link ComponentValue} with {@link ComponentSchema} `S`\n * @returns Tuple `[component, value]`\n */\nexport function withValue<S extends Schema, T = unknown>(\n  component: Component<S, Metadata, T>,\n  value: ComponentValue<S, T>,\n): [Component<S, Metadata, T>, ComponentValue<S, T>] {\n  return [component, value];\n}\n\n/**\n * Get a set of entities that have the given component value in the given component.\n *\n * @param component {@link defineComponent Component} to get entities with the given value from.\n * @param value look for entities with this {@link ComponentValue}.\n * @returns Set with {@link Entity Entities} with the given component value.\n */\nexport function getEntitiesWithValue<S extends Schema>(\n  component: Component<S> | Indexer<S>,\n  value: Partial<ComponentValue<S>>,\n): Set<Entity> {\n  // Shortcut for indexers\n  if (isIndexer(component) && isFullComponentValue(component, value)) {\n    return component.getEntitiesWithValue(value);\n  }\n\n  // Trivial implementation for regular components\n  const entities = new Set<Entity>();\n  for (const entity of getComponentEntities(component)) {\n    const val = getComponentValue(component, entity);\n    if (componentValueEquals(value, val)) {\n      entities.add(entity);\n    }\n  }\n  return entities;\n}\n\n/**\n * Get a set of all entities of the given component.\n *\n * @param component {@link defineComponent Component} to get all entities from\n * @returns Set of all entities in the given component.\n */\nexport function getComponentEntities<S extends Schema, T = unknown>(\n  component: Component<S, Metadata, T>,\n): IterableIterator<Entity> {\n  return component.entities();\n}\n\n/**\n * An overridable component is a mirror of the source component, with functions to lazily override specific entity values.\n * Lazily override means the values are not actually set to the source component, but the override is only returned if the value is read.\n *\n * - When an override for an entity is added to the component, the override is propagated via the component's `update$` stream.\n * - While an override is set for a specific entity, no updates to the source component for this entity will be propagated to the `update$` stream.\n * - When an override is removed for a specific entity and there are more overrides targeting this entity,\n * the override with the highest nonce will be propagated to the `update$` stream.\n * - When an override is removed for a specific entity and there are no more overrides targeting this entity,\n * the non-overridden underlying component value of this entity will be propagated to the `update$` stream.\n *\n * @param component {@link defineComponent Component} to use as underlying source for the overridable component\n * @returns overridable component\n */\nexport function overridableComponent<S extends Schema, M extends Metadata, T = unknown>(\n  component: Component<S, M, T>,\n): OverridableComponent<S, M, T> {\n  let nonce = 0;\n\n  // Map from OverrideId to Override (to be able to add multiple overrides to the same Entity)\n  const overrides = new Map<string, { update: Override<S, T>; nonce: number }>();\n\n  // Map from EntitySymbol to current overridden component value\n  const overriddenEntityValues = new Map<EntitySymbol, Partial<ComponentValue<S, T>> | null>();\n\n  // Update event stream that takes into account overridden entity values\n  const update$ = new Subject<{\n    entity: Entity;\n    value: [ComponentValue<S, T> | undefined, ComponentValue<S, T> | undefined];\n    component: Component<S, Metadata, T>;\n  }>();\n\n  // Add a new override to some entity\n  function addOverride(id: string, update: Override<S, T>) {\n    overrides.set(id, { update, nonce: nonce++ });\n    setOverriddenComponentValue(update.entity, update.value);\n  }\n\n  // Remove an override from an entity\n  function removeOverride(id: string) {\n    const affectedEntity = overrides.get(id)?.update.entity;\n    overrides.delete(id);\n\n    if (affectedEntity == null) return;\n\n    // If there are more overries affecting this entity,\n    // set the overriddenEntityValue to the last override\n    const relevantOverrides = [...overrides.values()]\n      .filter((o) => o.update.entity === affectedEntity)\n      .sort((a, b) => (a.nonce < b.nonce ? -1 : 1));\n\n    if (relevantOverrides.length > 0) {\n      const lastOverride = relevantOverrides[relevantOverrides.length - 1];\n      setOverriddenComponentValue(affectedEntity, lastOverride.update.value);\n    } else {\n      setOverriddenComponentValue(affectedEntity, undefined);\n    }\n  }\n\n  // Internal function to get the current overridden value or value of the source component\n  function getOverriddenComponentValue(entity: Entity): ComponentValue<S, T> | undefined {\n    const originalValue = getComponentValue(component, entity);\n    const entitySymbol = getEntitySymbol(entity);\n    const overriddenValue = overriddenEntityValues.get(entitySymbol);\n    return (originalValue || overriddenValue) && overriddenValue !== null // null is a valid override, in this case return undefined\n      ? ({ ...originalValue, ...overriddenValue } as ComponentValue<S, T>)\n      : undefined;\n  }\n\n  const valueProxyHandler: (key: keyof S) => ProxyHandler<(typeof component.values)[typeof key]> = (key: keyof S) => ({\n    get(target, prop) {\n      // Intercept calls to component.value[key].get(entity)\n      if (prop === \"get\") {\n        return (entity: EntitySymbol) => {\n          const originalValue = target.get(entity);\n          const overriddenValue = overriddenEntityValues.get(entity);\n          return overriddenValue && overriddenValue[key] != null ? overriddenValue[key] : originalValue;\n        };\n      }\n\n      // Intercept calls to component.value[key].has(entity)\n      if (prop === \"has\") {\n        return (entity: EntitySymbol) => {\n          return target.has(entity) || overriddenEntityValues.has(entity);\n        };\n      }\n\n      // Intercept calls to component.value[key].keys()\n      if (prop === \"keys\") {\n        return () => new Set([...target.keys(), ...overriddenEntityValues.keys()]).values();\n      }\n\n      return Reflect.get(target, prop, target);\n    },\n  });\n\n  const partialValues: Partial<Component<S, M, T>[\"values\"]> = {};\n  for (const key of Object.keys(component.values) as (keyof S)[]) {\n    partialValues[key] = new Proxy(component.values[key], valueProxyHandler(key));\n  }\n  const valuesProxy = partialValues as Component<S, M, T>[\"values\"];\n\n  const overriddenComponent = new Proxy(component, {\n    get(target, prop) {\n      if (prop === \"addOverride\") return addOverride;\n      if (prop === \"removeOverride\") return removeOverride;\n      if (prop === \"values\") return valuesProxy;\n      if (prop === \"update$\") return update$;\n      if (prop === \"entities\")\n        return () =>\n          new Set([\n            ...transformIterator(overriddenEntityValues.keys(), getEntityString),\n            ...target.entities(),\n          ]).values();\n\n      return Reflect.get(target, prop);\n    },\n    has(target, prop) {\n      if (prop === \"addOverride\" || prop === \"removeOverride\") return true;\n      return prop in target;\n    },\n  }) as OverridableComponent<S, M, T>;\n\n  // Internal function to set the current overridden component value and emit the update event\n  function setOverriddenComponentValue(entity: Entity, value?: Partial<ComponentValue<S, T>> | null) {\n    const entitySymbol = getEntitySymbol(entity);\n    // Check specifically for undefined - null is a valid override\n    const prevValue = getOverriddenComponentValue(entity);\n    if (value !== undefined) overriddenEntityValues.set(entitySymbol, value);\n    else overriddenEntityValues.delete(entitySymbol);\n    update$.next({ entity, value: [getOverriddenComponentValue(entity), prevValue], component: overriddenComponent });\n  }\n\n  // Channel through update events from the original component if there are no overrides\n  component.update$\n    .pipe(\n      filter((e) => !overriddenEntityValues.get(getEntitySymbol(e.entity))),\n      map((update) => ({ ...update, component: overriddenComponent })),\n    )\n    .subscribe(update$);\n\n  return overriddenComponent;\n}\n\nfunction getLocalCacheId(component: Component, uniqueWorldIdentifier?: string): string {\n  return `localcache-${uniqueWorldIdentifier}-${component.id}`;\n}\n\nexport function clearLocalCache(component: Component, uniqueWorldIdentifier?: string): void {\n  localStorage.removeItem(getLocalCacheId(component, uniqueWorldIdentifier));\n}\n\n// Note: Only proof of concept for now - use this only for component that do not update frequently\nexport function createLocalCache<S extends Schema, M extends Metadata, T = unknown>(\n  component: Component<S, M, T>,\n  uniqueWorldIdentifier?: string,\n): Component<S, M, T> {\n  const { world, update$, values } = component;\n  const cacheId = getLocalCacheId(component as Component, uniqueWorldIdentifier);\n  let numUpdates = 0;\n  const creation = Date.now();\n\n  // On creation, check if this component has locally cached values\n  const encodedCache = localStorage.getItem(cacheId);\n  if (encodedCache) {\n    const cache = JSON.parse(encodedCache) as [string, [Entity, unknown][]][];\n    const state: { [entity: Entity]: { [key: string]: unknown } } = {};\n\n    for (const [key, values] of cache) {\n      for (const [entity, value] of values) {\n        state[entity] = state[entity] || {};\n        state[entity][key] = value;\n      }\n    }\n\n    for (const [entityId, value] of Object.entries(state)) {\n      const entity = world.registerEntity({ id: entityId });\n      setComponent(component, entity, value as ComponentValue<S, T>);\n    }\n\n    console.info(\"Loading component\", getComponentName(component), \"from local cache.\");\n  }\n\n  // Flush the entire component to the local cache every time it updates.\n  // Note: this is highly unperformant and should only be used for components that\n  // don't update often and don't have many values\n  const updateSub = update$.subscribe(() => {\n    numUpdates++;\n    const encoded = JSON.stringify(\n      Object.entries(mapObject(values, (m) => [...m.entries()].map((e) => [getEntityString(e[0]), e[1]]))),\n    );\n    localStorage.setItem(cacheId, encoded);\n    if (numUpdates > 200) {\n      console.warn(\n        \"Component\",\n        getComponentName(component),\n        \"was locally cached\",\n        numUpdates,\n        \"times since\",\n        new Date(creation).toLocaleTimeString(),\n        \"- the local cache is in an alpha state and should not be used with components that update frequently yet\",\n      );\n    }\n  });\n  component.world.registerDisposer(() => updateSub?.unsubscribe());\n\n  return component;\n}\n", "import { getComponentEntities, getComponentValue } from \"./Component\";\nimport { getEntityString, getEntitySymbol } from \"./Entity\";\nimport { Component, ComponentValue, Entity, EntitySymbol, Indexer, Metadata, Schema } from \"./types\";\n\n/**\n * Create an indexed component from a given component.\n *\n * @remarks\n * An indexed component keeps a \"reverse mapping\" from {@link ComponentValue} to the Set of {@link createEntity Entities} with this value.\n * This adds a performance overhead to modifying component values and a memory overhead since in the worst case there is one\n * Set per entity (if every entity has a different component value).\n * In return the performance for querying for entities with a given component value is close to O(1) (instead of O(#entities) in a regular non-indexed component).\n * As a rule of thumb only components that are added to many entities and are queried with {@link HasValue} a lot should be indexed (eg. the Position component).\n *\n * @dev This could be made more (memory) efficient by using a hash of the component value as key, but would require handling hash collisions.\n *\n * @param component {@link defineComponent Component} to index.\n * @returns Indexed version of the component.\n */\nexport function createIndexer<S extends Schema, M extends Metadata, T = unknown>(\n  component: Component<S, M, T>,\n): Indexer<S, M, T> {\n  const valueToEntities = new Map<string, Set<EntitySymbol>>();\n\n  function getEntitiesWithValue(value: ComponentValue<S, T>) {\n    const entities = valueToEntities.get(getValueKey(value));\n    return entities ? new Set([...entities].map(getEntityString)) : new Set<Entity>();\n  }\n\n  function getValueKey(value: ComponentValue<S, T>): string {\n    return Object.values(value).join(\"/\");\n  }\n\n  function add(entity: EntitySymbol, value: ComponentValue<S, T> | undefined) {\n    if (!value) return;\n    const valueKey = getValueKey(value);\n    let entitiesWithValue = valueToEntities.get(valueKey);\n    if (!entitiesWithValue) {\n      entitiesWithValue = new Set<EntitySymbol>();\n      valueToEntities.set(valueKey, entitiesWithValue);\n    }\n    entitiesWithValue.add(entity);\n  }\n\n  function remove(entity: EntitySymbol, value: ComponentValue<S, T> | undefined) {\n    if (!value) return;\n    const valueKey = getValueKey(value);\n    const entitiesWithValue = valueToEntities.get(valueKey);\n    if (!entitiesWithValue) return;\n    entitiesWithValue.delete(entity);\n  }\n\n  // Initial indexing\n  for (const entity of getComponentEntities(component)) {\n    const value = getComponentValue(component, entity);\n    add(getEntitySymbol(entity), value);\n  }\n\n  // Keeping index up to date\n  const subscription = component.update$.subscribe(({ entity, value }) => {\n    // Remove from previous location\n    remove(getEntitySymbol(entity), value[1]);\n\n    // Add to new location\n    add(getEntitySymbol(entity), value[0]);\n  });\n\n  component.world.registerDisposer(() => subscription?.unsubscribe());\n\n  return { ...component, getEntitiesWithValue };\n}\n", "import { map, pipe } from \"rxjs\";\nimport { getComponentValue } from \"./Component\";\nimport { UpdateType } from \"./constants\";\nimport { Component, ComponentUpdate, ComponentValue, Entity, Indexer, Schema } from \"./types\";\n\n/**\n * Type guard to infer the TypeScript type of a given component update\n *\n * @param update Component update to infer the type of.\n * @param component {@link defineComponent Component} to check whether the given update corresponds to it.\n * @returns True (+ infered type for `update`) if `update` belongs to `component`. Else false.\n */\nexport function isComponentUpdate<S extends Schema>(\n  update: ComponentUpdate,\n  component: Component<S>,\n): update is ComponentUpdate<S> {\n  return update.component === component;\n}\n\n/**\n * Helper function to create a component update for the current component value of a given entity.\n *\n * @param entity Entity to create the component update for.\n * @param component Component to create the component update for.\n * @returns Component update corresponding to the given entity, the given component and the entity's current component value.\n */\nexport function toUpdate<S extends Schema>(entity: Entity, component: Component<S>) {\n  const value = getComponentValue(component, entity);\n  return {\n    entity,\n    component,\n    value: [value, undefined],\n    type: value == null ? UpdateType.Noop : UpdateType.Enter,\n  } as ComponentUpdate<S> & {\n    type: UpdateType;\n  };\n}\n\n/**\n * Helper function to turn a stream of {@link Entity Entities} into a stream of component updates of the given component.\n * @param component Component to create update stream for.\n * @returns Unary function to be used with RxJS that turns stream of {@link Entity Entities} into stream of component updates.\n */\nexport function toUpdateStream<S extends Schema>(component: Component<S>) {\n  return pipe(map((entity: Entity) => toUpdate(entity, component)));\n}\n\n/**\n * Helper function to check whether a given component is indexed.\n * @param c\n * @returns\n */\nexport function isIndexer<S extends Schema>(c: Component<S> | Indexer<S>): c is Indexer<S> {\n  return \"getEntitiesWithValue\" in c;\n}\n\n/**\n * Helper function to check whether a given component value is partial or full.\n * @param component\n * @param value\n * @returns\n */\nexport function isFullComponentValue<S extends Schema>(\n  component: Component<S>,\n  value: Partial<ComponentValue<S>>,\n): value is ComponentValue<S> {\n  return Object.keys(component.schema).every((key) => key in value);\n}\n", "import { setComponent } from \"./Component\";\nimport { Component, ComponentValue, Entity, EntitySymbol, World } from \"./types\";\n\n/**\n * Register a new entity in the given {@link World} and initialize it with the given {@link ComponentValue}s.\n *\n * @param world World object this entity should be registered in.\n * @param components Array of [{@link defineComponent Component}, {@link ComponentValue}] tuples to be added to this entity.\n * (Use {@link withValue} to generate these tuples with type safety.)\n * @param options Optional: {\n *   id: {@link Entity} for this entity. Use this for entities that were created outside of recs.\n *   idSuffix: string to be appended to the auto-generated id. Use this for improved readability. Do not use this if the `id` option is provided.\n * }\n * @returns index of this entity in the {@link World}. This {@link Entity} is used to refer to this entity in other recs methods (eg {@link setComponent}).\n * (This is to avoid having to store strings in every component.)\n */\nexport function createEntity(\n  world: World,\n  components?: [Component, ComponentValue][],\n  options?: { id?: string } | { idSuffix?: string },\n): Entity {\n  const entity = world.registerEntity(options ?? {});\n\n  if (components) {\n    for (const [component, value] of components) {\n      setComponent(component, entity, value);\n    }\n  }\n\n  return entity;\n}\n\n/*\n * Get the symbol corresponding to an entity's string ID.\n * Entities are represented as symbols internally for memory efficiency.\n */\nexport function getEntitySymbol(entityString: string): EntitySymbol {\n  return Symbol.for(entityString) as EntitySymbol;\n}\n\n/**\n * Get the underlying entity string of an entity symbol.\n */\nexport function getEntityString(entity: EntitySymbol): Entity {\n  return Symbol.keyFor(entity) as Entity;\n}\n", "import { concat, EMPTY, from, Observable } from \"rxjs\";\nimport { getComponentEntities, removeComponent, setComponent } from \"./Component\";\nimport { UpdateType } from \"./constants\";\nimport { defineEnterQuery, defineExitQuery, defineQuery, defineUpdateQuery } from \"./Query\";\nimport { Component, ComponentUpdate, ComponentValue, Entity, QueryFragment, Schema, World } from \"./types\";\nimport { toUpdateStream } from \"./utils\";\n\n/**\n * Create a system that is called on every update of the given observable.\n *\n * @remarks\n * Advantage of using this function over directly subscribing to the RxJS observable is that the system is registered in the `world` and\n * disposed when the `world` is disposed (eg. during a hot reload in development).\n *\n * @param world {@link World} object this system should be registered in.\n * @param observable$ Observable to react to.\n * @param system System function to run on updates of the `observable$`. System function gets passed the update events from the `observable$`.\n */\nexport function defineRxSystem<T>(world: World, observable$: Observable<T>, system: (event: T) => void) {\n  const subscription = observable$.subscribe(system);\n  world.registerDisposer(() => subscription?.unsubscribe());\n}\n\n/**\n * Create a system that is called on every event of the given {@link defineUpdateQuery update query}.\n *\n * @param world {@link World} object this system should be registered in.\n * @param query Update query to react to.\n * @param system System function to run when the result of the given update query changes.\n * @param options Optional: {\n * runOnInit: if true, run this system for all entities matching the query when the system is created.\n * Else only run on updates after the system is created. Default true.\n * }\n */\nexport function defineUpdateSystem(\n  world: World,\n  query: QueryFragment[],\n  system: (update: ComponentUpdate) => void,\n  options: { runOnInit?: boolean } = { runOnInit: true },\n) {\n  defineRxSystem(world, defineUpdateQuery(query, options), system);\n}\n\n/**\n * Create a system that is called on every event of the given {@link defineEnterQuery enter query}.\n *\n * @param world {@link World} object this system should be registered in.\n * @param query Enter query to react to.\n * @param system System function to run when the result of the given enter query changes.\n * @param options Optional: {\n * runOnInit: if true, run this system for all entities matching the query when the system is created.\n * Else only run on updates after the system is created. Default true.\n * }\n */\nexport function defineEnterSystem(\n  world: World,\n  query: QueryFragment[],\n  system: (update: ComponentUpdate) => void,\n  options: { runOnInit?: boolean } = { runOnInit: true },\n) {\n  defineRxSystem(world, defineEnterQuery(query, options), system);\n}\n\n/**\n * Create a system that is called on every event of the given {@link defineExitQuery exit query}.\n *\n * @param world {@link World} object this system should be registered in.\n * @param query Exit query to react to.\n * @param system System function to run when the result of the given exit query changes.\n * @param options Optional: {\n * runOnInit: if true, run this system for all entities matching the query when the system is created.\n * Else only run on updates after the system is created. Default true.\n * }\n */\nexport function defineExitSystem(\n  world: World,\n  query: QueryFragment[],\n  system: (update: ComponentUpdate) => void,\n  options: { runOnInit?: boolean } = { runOnInit: true },\n) {\n  defineRxSystem(world, defineExitQuery(query, options), system);\n}\n\n/**\n * Create a system that is called on every event of the given {@link defineQuery query}.\n *\n * @param world {@link World} object this system should be registered in.\n * @param query Query to react to.\n * @param system System function to run when the result of the given query changes.\n * @param options Optional: {\n * runOnInit: if true, run this system for all entities matching the query when the system is created.\n * Else only run on updates after the system is created. Default true.\n * }\n */\nexport function defineSystem(\n  world: World,\n  query: QueryFragment[],\n  system: (update: ComponentUpdate & { type: UpdateType }) => void,\n  options: { runOnInit?: boolean } = { runOnInit: true },\n) {\n  defineRxSystem(world, defineQuery(query, options).update$, system);\n}\n\n/**\n * Create a system that is called every time the given component is updated.\n *\n * @param world {@link World} object this system should be registered in.\n * @param component Component to whose updates to react.\n * @param system System function to run when the given component is updated.\n * @param options Optional: {\n * runOnInit: if true, run this system for all entities in the component when the system is created.\n * Else only run on updates after the system is created. Default true.\n * }\n */\nexport function defineComponentSystem<S extends Schema>(\n  world: World,\n  component: Component<S>,\n  system: (update: ComponentUpdate<S>) => void,\n  options: { runOnInit?: boolean } = { runOnInit: true },\n) {\n  const initial$ = options?.runOnInit ? from(getComponentEntities(component)).pipe(toUpdateStream(component)) : EMPTY;\n  defineRxSystem(world, concat(initial$, component.update$), system);\n}\n\n/**\n * Create a system to synchronize updates to one component with another component.\n *\n * @param world {@link World} object this system should be registered in.\n * @param query Result of `component` is added to all entites matching this query.\n * @param component Function returning the component to be added to all entities matching the given query.\n * @param value Function returning the component value to be added to all entities matching the given query.\n */\nexport function defineSyncSystem<T extends Schema>(\n  world: World,\n  query: QueryFragment[],\n  component: (entity: Entity) => Component<T>,\n  value: (entity: Entity) => ComponentValue<T>,\n  options: { update?: boolean; runOnInit?: boolean } = { update: false, runOnInit: true },\n) {\n  defineSystem(\n    world,\n    query,\n    ({ entity, type }) => {\n      if (type === UpdateType.Enter) setComponent(component(entity), entity, value(entity));\n      if (type === UpdateType.Exit) removeComponent(component(entity), entity);\n      if (options?.update && type === UpdateType.Update) setComponent(component(entity), entity, value(entity));\n    },\n    options,\n  );\n}\n", "import { filterNullish } from \"@latticexyz/utils\";\nimport { observable, ObservableSet } from \"mobx\";\nimport { concat, concatMap, filter, from, map, merge, Observable, of, share } from \"rxjs\";\nimport {\n  componentValueEquals,\n  getComponentEntities,\n  getComponentValue,\n  getEntitiesWithValue,\n  hasComponent,\n} from \"./Component\";\nimport { UpdateType, Type } from \"./constants\";\nimport {\n  Component,\n  ComponentUpdate,\n  ComponentValue,\n  Entity,\n  EntityQueryFragment,\n  HasQueryFragment,\n  HasValueQueryFragment,\n  NotQueryFragment,\n  NotValueQueryFragment,\n  ProxyExpandQueryFragment,\n  ProxyReadQueryFragment,\n  QueryFragment,\n  QueryFragmentType,\n  Schema,\n  SettingQueryFragment,\n} from \"./types\";\nimport { toUpdateStream } from \"./utils\";\n\n/**\n * Create a {@link HasQueryFragment}.\n *\n * @remarks\n * The {@link HasQueryFragment} filters for entities that have the given component,\n * independent from the component value.\n *\n * @example\n * Query for all entities with a `Position`.\n * ```\n * runQuery([Has(Position)]);\n * ```\n *\n * @param component Component this query fragment refers to.\n * @returns query fragment to be used in {@link runQuery} or {@link defineQuery}.\n */\nexport function Has<T extends Schema>(component: Component<T>): HasQueryFragment<T> {\n  return { type: QueryFragmentType.Has, component };\n}\n\n/**\n * Create a {@link NotQueryFragment}.\n *\n * @remarks\n * The {@link NotQueryFragment} filters for entities that don't have the given component,\n * independent from the component value.\n *\n * @example\n * Query for all entities with a `Position` that are not `Movable`.\n * ```\n * runQuery([Has(Position), Not(Movable)]);\n * ```\n *\n * @param component Component this query fragment refers to.\n * @returns query fragment to be used in {@link runQuery} or {@link defineQuery}.\n */\nexport function Not<T extends Schema>(component: Component<T>): NotQueryFragment<T> {\n  return { type: QueryFragmentType.Not, component };\n}\n\n/**\n * Create a {@link HasValueQueryFragment}.\n *\n * @remarks\n * The {@link HasValueQueryFragment} filters for entities that have the given component\n * with the given component value.\n *\n * @example\n * Query for all entities at Position (0,0).\n * ```\n * runQuery([HasValue(Position, { x: 0, y: 0 })]);\n * ```\n *\n * @param component Component this query fragment refers to.\n * @param value Only include entities with this (partial) component value from the result.\n * @returns query fragment to be used in {@link runQuery} or {@link defineQuery}.\n */\nexport function HasValue<T extends Schema>(\n  component: Component<T>,\n  value: Partial<ComponentValue<T>>,\n): HasValueQueryFragment<T> {\n  return { type: QueryFragmentType.HasValue, component, value };\n}\n\n/**\n * Create a {@link NotValueQueryFragment}.\n *\n * @remarks\n * The {@link NotValueQueryFragment} filters for entities that don't have the given component\n * with the given component value.\n *\n * @example\n * Query for all entities that have a `Position`, except for those at `Position` (0,0).\n * ```\n * runQuery([Has(Position), NotValue(Position, { x: 0, y: 0 })]);\n * ```\n *\n * @param component Component this query fragment refers to.\n * @param value Exclude entities with this (partial) component value from the result.\n * @returns query fragment to be used in {@link runQuery} or {@link defineQuery}.\n */\nexport function NotValue<T extends Schema>(\n  component: Component<T>,\n  value: Partial<ComponentValue<T>>,\n): NotValueQueryFragment<T> {\n  return { type: QueryFragmentType.NotValue, component, value };\n}\n\n/**\n * Create a {@link ProxyReadQueryFragment}.\n *\n * @remarks\n * The {@link ProxyReadQueryFragment} activates the \"proxy read mode\" for the rest of the query.\n * This means that for all remaining fragments in the query not only the entities themselves are checked, but also\n * their \"ancestors\" up to the given `depth` on the relationship chain defined by the given `component`.\n *\n * @example\n * Query for all entities that have a `Position` and are (directly or indirectly) owned by an entity with `Name` \"Alice\".\n * ```\n * runQuery([Has(Position), ProxyRead(OwnedByEntity, Number.MAX_SAFE_INTEGER), HasValue(Name, { name: \"Alice\" })]);\n * ```\n *\n * @param component Component this query fragment refers to.\n * @param depth Max depth in the relationship chain to traverse.\n * @returns query fragment to be used in {@link runQuery} or {@link defineQuery}.\n */\nexport function ProxyRead(component: Component<{ value: Type.Entity }>, depth: number): ProxyReadQueryFragment {\n  return { type: QueryFragmentType.ProxyRead, component, depth };\n}\n\n/**\n * Create a {@link ProxyExpandQueryFragment}.\n *\n * @remarks\n * The {@link ProxyExpandQueryFragment} activates the \"proxy expand mode\" for the rest of the query.\n * This means that for all remaining fragments in the query not only the matching entities themselves are included in the intermediate set,\n * but also all their \"children\" down to the given `depth` on the relationship chain defined by the given `component`.\n *\n * @example\n * Query for all entities (directly or indirectly) owned by an entity with `Name` \"Alice\".\n * ```\n * runQuery([ProxyExpand(OwnedByEntity, Number.MAX_SAFE_INTEGER), HasValue(Name, { name: \"Alice\" })]);\n * ```\n *\n * @param component Component to apply this query fragment to.\n * @param depth Max depth in the relationship chain to traverse.\n * @returns query fragment to be used in {@link runQuery} or {@link defineQuery}.\n */\nexport function ProxyExpand(component: Component<{ value: Type.Entity }>, depth: number): ProxyExpandQueryFragment {\n  return { type: QueryFragmentType.ProxyExpand, component, depth };\n}\n\n/**\n * Helper function to check whether a given entity passes a given query fragment.\n *\n * @param entity Entity to check.\n * @param fragment Query fragment to check.\n * @returns True if the entity passes the query fragment, else false.\n */\nfunction passesQueryFragment<T extends Schema>(entity: Entity, fragment: EntityQueryFragment<T>): boolean {\n  if (fragment.type === QueryFragmentType.Has) {\n    // Entity must have the given component\n    return hasComponent(fragment.component, entity);\n  }\n\n  if (fragment.type === QueryFragmentType.HasValue) {\n    // Entity must have the given component value\n    return componentValueEquals(fragment.value, getComponentValue(fragment.component, entity));\n  }\n\n  if (fragment.type === QueryFragmentType.Not) {\n    // Entity must not have the given component\n    return !hasComponent(fragment.component, entity);\n  }\n\n  if (fragment.type === QueryFragmentType.NotValue) {\n    // Entity must not have the given component value\n    return !componentValueEquals(fragment.value, getComponentValue(fragment.component, entity));\n  }\n\n  throw new Error(\"Unknown query fragment\");\n}\n\n/**\n * Helper function to check whether a query fragment is \"positive\" (ie `Has` or `HasValue`)\n *\n * @param fragment Query fragment to check.\n * @returns True if the query fragment is positive, else false.\n */\nfunction isPositiveFragment<T extends Schema>(\n  fragment: QueryFragment<T>,\n): fragment is HasQueryFragment<T> | HasValueQueryFragment<T> {\n  return fragment.type === QueryFragmentType.Has || fragment.type == QueryFragmentType.HasValue;\n}\n\n/**\n * Helper function to check whether a query fragment is \"negative\" (ie `Not` or `NotValue`)\n *\n * @param fragment Query fragment to check.\n * @returns True if the query fragment is negative, else false.\n */\nfunction isNegativeFragment<T extends Schema>(\n  fragment: QueryFragment<T>,\n): fragment is NotQueryFragment<T> | NotValueQueryFragment<T> {\n  return fragment.type === QueryFragmentType.Not || fragment.type == QueryFragmentType.NotValue;\n}\n\n/**\n * Helper function to check whether a query fragment is a setting fragment (ie `ProxyExpand` or `ProxyRead`)\n *\n * @param fragment Query fragment to check.\n * @returns True if the query fragment is a setting fragment, else false.\n */\nfunction isSettingFragment<T extends Schema>(fragment: QueryFragment<T>): fragment is SettingQueryFragment {\n  return fragment.type === QueryFragmentType.ProxyExpand || fragment.type == QueryFragmentType.ProxyRead;\n}\n\n/**\n * Helper function to check whether the result of a query pass check is a breaking state.\n *\n * @remarks\n * For positive fragments (Has/HasValue) we need to find any passing entity up the proxy chain\n * so as soon as passes is true, we can early return. For negative fragments (Not/NotValue) every entity\n * up the proxy chain must pass, so we can early return if we find one that doesn't pass.\n *\n * @param passes Boolean result of previous query pass check.\n * @param fragment Fragment that was used in the query pass check.\n * @returns True if the result is breaking pass state, else false.\n */\nfunction isBreakingPassState(passes: boolean, fragment: EntityQueryFragment<Schema>) {\n  return (passes && isPositiveFragment(fragment)) || (!passes && isNegativeFragment(fragment));\n}\n\n/**\n * Helper function to check whether an entity passes a query fragment when taking into account a {@link ProxyReadQueryFragment}.\n *\n * @param entity {@link Entity} of the entity to check.\n * @param fragment Query fragment to check.\n * @param proxyRead {@link ProxyReadQueryFragment} to take into account.\n * @returns True if the entity passes the query fragment, else false.\n */\nfunction passesQueryFragmentProxy<T extends Schema>(\n  entity: Entity,\n  fragment: EntityQueryFragment<T>,\n  proxyRead: ProxyReadQueryFragment,\n): boolean | null {\n  let proxyEntity = entity;\n  let passes = false;\n  for (let i = 0; i < proxyRead.depth; i++) {\n    const value = getComponentValue(proxyRead.component, proxyEntity);\n    // If the current entity does not have the proxy component, abort\n    if (!value) return null;\n\n    const entity = value.value;\n    if (!entity) return null;\n\n    // Move up the proxy chain\n    proxyEntity = entity;\n    passes = passesQueryFragment(proxyEntity, fragment);\n\n    if (isBreakingPassState(passes, fragment)) {\n      return passes;\n    }\n  }\n  return passes;\n}\n\n/**\n * Recursively compute all direct and indirect child entities up to the specified depth\n * down the relationship chain defined by the given component.\n *\n * @param entity Entity to get all child entities for up to the specified depth\n * @param component Component to use for the relationship chain.\n * @param depth Depth up to which the recursion should be applied.\n * @returns Set of entities that are child entities of the given entity via the given component.\n */\nexport function getChildEntities(\n  entity: Entity,\n  component: Component<{ value: Type.Entity }>,\n  depth: number,\n): Set<Entity> {\n  if (depth === 0) return new Set();\n\n  const directChildEntities = getEntitiesWithValue(component, { value: entity });\n  if (depth === 1) return directChildEntities;\n\n  const indirectChildEntities = [...directChildEntities]\n    .map((childEntity) => [...getChildEntities(childEntity, component, depth - 1)])\n    .flat();\n\n  return new Set([...directChildEntities, ...indirectChildEntities]);\n}\n\n/**\n * Execute a list of query fragments to receive a Set of matching entities.\n *\n * @remarks\n * The query fragments are executed from left to right and are concatenated with a logical `AND`.\n * For performance reasons, the most restrictive query fragment should be first in the list of query fragments,\n * in order to reduce the number of entities the next query fragment needs to be checked for.\n * If no proxy fragments are used, every entity in the resulting set passes every query fragment.\n * If setting fragments are used, the order of the query fragments influences the result, since settings only apply to\n * fragments after the setting fragment.\n *\n * @param fragments Query fragments to execute.\n * @param initialSet Optional: provide a Set of entities to execute the query on. If none is given, all existing entities are used for the query.\n * @returns Set of entities matching the query fragments.\n */\nexport function runQuery(fragments: QueryFragment[], initialSet?: Set<Entity>): Set<Entity> {\n  let entities: Set<Entity> | undefined = initialSet ? new Set([...initialSet]) : undefined; // Copy to a fresh set because it will be modified in place\n  let proxyRead: ProxyReadQueryFragment | undefined = undefined;\n  let proxyExpand: ProxyExpandQueryFragment | undefined = undefined;\n\n  // Process fragments\n  for (let i = 0; i < fragments.length; i++) {\n    const fragment = fragments[i];\n    if (isSettingFragment(fragment)) {\n      // Store setting fragments for subsequent query fragments\n      if (fragment.type === QueryFragmentType.ProxyRead) proxyRead = fragment;\n      if (fragment.type === QueryFragmentType.ProxyExpand) proxyExpand = fragment;\n    } else if (!entities) {\n      // Handle entity query fragments\n      // First regular fragment must be Has or HasValue\n      if (isNegativeFragment(fragment)) {\n        throw new Error(\"First EntityQueryFragment must be Has or HasValue\");\n      }\n\n      // Create the first interim result\n      entities =\n        fragment.type === QueryFragmentType.Has\n          ? new Set([...getComponentEntities(fragment.component)])\n          : getEntitiesWithValue(fragment.component, fragment.value);\n\n      // Add entity's children up to the specified depth if proxy expand is active\n      if (proxyExpand && proxyExpand.depth > 0) {\n        for (const entity of [...entities]) {\n          for (const childEntity of getChildEntities(entity, proxyExpand.component, proxyExpand.depth)) {\n            entities.add(childEntity);\n          }\n        }\n      }\n    } else {\n      // There already is an interim result, apply the current fragment\n      for (const entity of [...entities]) {\n        // Branch 1: Simple / check if the current entity passes the query fragment\n        let passes = passesQueryFragment(entity, fragment);\n\n        // Branch 2: Proxy upwards / check if proxy entity passes the query\n        if (proxyRead && proxyRead.depth > 0 && !isBreakingPassState(passes, fragment)) {\n          passes = passesQueryFragmentProxy(entity, fragment, proxyRead) ?? passes;\n        }\n\n        // If the entity didn't pass the query fragment, remove it from the interim set\n        if (!passes) entities.delete(entity);\n\n        // Branch 3: Proxy downwards / run the query fragments on child entities if proxy expand is active\n        if (proxyExpand && proxyExpand.depth > 0) {\n          const childEntities = getChildEntities(entity, proxyExpand.component, proxyExpand.depth);\n          for (const childEntity of childEntities) {\n            // Add the child entity if it passes the direct check\n            // or if a proxy read is active and it passes the proxy read check\n            if (\n              passesQueryFragment(childEntity, fragment) ||\n              (proxyRead && proxyRead.depth > 0 && passesQueryFragmentProxy(childEntity, fragment, proxyRead))\n            )\n              entities.add(childEntity);\n          }\n        }\n      }\n    }\n  }\n\n  return entities ?? new Set<Entity>();\n}\n\n/**\n * Create a query object including an update$ stream and a Set of entities currently matching the query.\n *\n * @remarks\n * `update$` stream needs to be subscribed to in order for the logic inside the stream to be executed and therefore\n * in order for the `matching` set to be updated.\n *\n * `defineQuery` should be strongly preferred over `runQuery` if the query is used for systems or other\n * use cases that repeatedly require the query result or updates to the query result. `defineQuery` does not\n * reevaluate the entire query if an accessed component changes, but only performs the minimal set of checks\n * on the updated entity to evaluate wether the entity still matches the query, resulting in significant performance\n * advantages over `runQuery`.\n *\n * The query fragments are executed from left to right and are concatenated with a logical `AND`.\n * For performance reasons, the most restrictive query fragment should be first in the list of query fragments,\n * in order to reduce the number of entities the next query fragment needs to be checked for.\n * If no proxy fragments are used, every entity in the resulting set passes every query fragment.\n * If setting fragments are used, the order of the query fragments influences the result, since settings only apply to\n * fragments after the setting fragment.\n *\n * @param fragments Query fragments to execute.\n * @param options Optional: {\n *   runOnInit: if true, the query is executed once with `runQuery` to build an iniital Set of matching entities. If false only updates after the query was created are considered.\n *   initialSet: if given, this set is passed to `runOnInit` when building the initial Set of matching entities.\n * }\n * @returns Query object: {\n *  update$: RxJS stream of updates to the query result. The update contains the component update that caused the query update, as well as the {@link UpdateType update type}.\n *  matching: Mobx observable set of entities currently matching the query.\n * }.\n */\nexport function defineQuery(\n  fragments: QueryFragment[],\n  options?: { runOnInit?: boolean; initialSet?: Set<Entity> },\n): {\n  update$: Observable<ComponentUpdate & { type: UpdateType }>;\n  matching: ObservableSet<Entity>;\n} {\n  const initialSet =\n    options?.runOnInit || options?.initialSet ? runQuery(fragments, options.initialSet) : new Set<Entity>();\n\n  const matching = observable(initialSet);\n  const initial$ = from(matching).pipe(toUpdateStream(fragments[0].component));\n\n  const containsProxy =\n    fragments.findIndex((v) => [QueryFragmentType.ProxyExpand, QueryFragmentType.ProxyRead].includes(v.type)) !== -1;\n\n  const internal$ = merge(...fragments.map((f) => f.component.update$)) // Combine all component update streams accessed accessed in this query\n    .pipe(\n      containsProxy // Query contains proxies\n        ? concatMap((update) => {\n            // If the query contains proxy read or expand fragments, entities up or down the proxy chain might match due to this update.\n            // We have to run the entire query again and compare the result.\n            // TODO: We might be able to make this more efficient by first computing the set of entities that are potentially touched by this update\n            // and then only rerun the query on this set.\n            const newMatchingSet = runQuery(fragments, options?.initialSet);\n            const updates: (ComponentUpdate & { type: UpdateType })[] = [];\n\n            for (const previouslyMatchingEntity of matching) {\n              // Entity matched before but doesn't match now\n              if (!newMatchingSet.has(previouslyMatchingEntity)) {\n                matching.delete(previouslyMatchingEntity);\n                updates.push({\n                  entity: previouslyMatchingEntity,\n                  type: UpdateType.Exit,\n                  component: update.component,\n                  value: [undefined, undefined],\n                });\n              }\n            }\n\n            for (const matchingEntity of newMatchingSet) {\n              if (matching.has(matchingEntity)) {\n                // Entity matched before and still matches\n                updates.push({\n                  entity: matchingEntity,\n                  type: UpdateType.Update,\n                  component: update.component,\n                  value: [getComponentValue(update.component, matchingEntity), undefined],\n                });\n              } else {\n                // Entity didn't match before but matches now\n                matching.add(matchingEntity);\n                updates.push({\n                  entity: matchingEntity,\n                  type: UpdateType.Enter,\n                  component: update.component,\n                  value: [getComponentValue(update.component, matchingEntity), undefined],\n                });\n              }\n            }\n\n            return of(...updates);\n          })\n        : // Query does not contain proxies\n          map((update) => {\n            if (matching.has(update.entity)) {\n              // If this entity matched the query before, check if it still matches it\n              // Find fragments accessign this component (linear search is fine since the number fragments is likely small)\n              const relevantFragments = fragments.filter((f) => f.component.id === update.component.id);\n              const pass = relevantFragments.every((f) => passesQueryFragment(update.entity, f as EntityQueryFragment)); // We early return if the query contains proxies\n\n              if (pass) {\n                // Entity passed before and still passes, forward update\n                return { ...update, type: UpdateType.Update };\n              } else {\n                // Entity passed before but not anymore, forward update and exit\n                matching.delete(update.entity);\n                return { ...update, type: UpdateType.Exit };\n              }\n            }\n\n            // This entity didn't match before, check all fragments\n            const pass = fragments.every((f) => passesQueryFragment(update.entity, f as EntityQueryFragment)); // We early return if the query contains proxies\n            if (pass) {\n              // Entity didn't pass before but passes now, forward update end enter\n              matching.add(update.entity);\n              return { ...update, type: UpdateType.Enter };\n            }\n          }),\n      filterNullish(),\n    );\n\n  return {\n    matching,\n    update$: concat(initial$, internal$).pipe(share()),\n  };\n}\n\n/**\n * Define a query object that only passes update events of type {@link UpdateType}.Update to the `update$` stream.\n * See {@link defineQuery} for details.\n *\n * @param fragments Query fragments\n * @returns Stream of component updates of entities that had already matched the query\n */\nexport function defineUpdateQuery(\n  fragments: QueryFragment[],\n  options?: { runOnInit?: boolean },\n): Observable<ComponentUpdate & { type: UpdateType }> {\n  return defineQuery(fragments, options).update$.pipe(filter((e) => e.type === UpdateType.Update));\n}\n\n/**\n * Define a query object that only passes update events of type {@link UpdateType}.Enter to the `update$` stream.\n * See {@link defineQuery} for details.\n *\n * @param fragments Query fragments\n * @returns Stream of component updates of entities matching the query for the first time\n */\nexport function defineEnterQuery(\n  fragments: QueryFragment[],\n  options?: { runOnInit?: boolean },\n): Observable<ComponentUpdate> {\n  return defineQuery(fragments, options).update$.pipe(filter((e) => e.type === UpdateType.Enter));\n}\n\n/**\n * Define a query object that only passes update events of type {@link UpdateType}.Exit to the `update$` stream.\n * See {@link defineQuery} for details.\n *\n * @param fragments Query fragments\n * @returns Stream of component updates of entities not matching the query anymore for the first time\n */\nexport function defineExitQuery(\n  fragments: QueryFragment[],\n  options?: { runOnInit?: boolean },\n): Observable<ComponentUpdate> {\n  return defineQuery(fragments, options).update$.pipe(filter((e) => e.type === UpdateType.Exit));\n}\n", "import { Subject } from \"rxjs\";\nimport { Type } from \"./constants\";\nimport { Opaque } from \"type-fest\";\n\n/**\n * Entities are represented as symbols internally for memory efficiency.\n * To get the entity's string representation, use `getEntityString(entitySymbol)`\n */\nexport type EntitySymbol = Opaque<symbol, \"EntitySymbol\">;\n\nexport type Entity = Opaque<string, \"Entity\">;\n\n/**\n * Used to define the schema of a {@link Component}.\n * Uses {@link Type} enum to be able to access the component type in JavaScript as well as have TypeScript type checks.\n */\nexport type Schema = {\n  [key: string]: Type | Schema;\n};\n\n/**\n * Used to add arbitrary metadata to components.\n */\nexport type Metadata =\n  | {\n      [key: string]: unknown;\n    }\n  | undefined;\n\n/**\n * Mapping between JavaScript {@link Type} enum and corresponding TypeScript type.\n */\nexport type ValueType<T = unknown> = {\n  [Type.Boolean]: boolean;\n  [Type.Number]: number;\n  [Type.BigInt]: bigint;\n  [Type.String]: string;\n  [Type.NumberArray]: number[];\n  [Type.BigIntArray]: bigint[];\n  [Type.StringArray]: string[];\n  [Type.Entity]: Entity;\n  [Type.EntityArray]: Entity[];\n  [Type.OptionalNumber]: number | undefined;\n  [Type.OptionalBigInt]: bigint | undefined;\n  [Type.OptionalBigIntArray]: bigint[] | undefined;\n  [Type.OptionalString]: string | undefined;\n  [Type.OptionalNumberArray]: number[] | undefined;\n  [Type.OptionalStringArray]: string[] | undefined;\n  [Type.OptionalEntity]: Entity | undefined;\n  [Type.OptionalEntityArray]: Entity[] | undefined;\n  [Type.T]: T;\n  [Type.OptionalT]: T | undefined;\n};\n\n/**\n * Used to infer the TypeScript type of a component value corresponding to a given {@link Schema}.\n */\nexport type ComponentValue<S extends Schema = Schema, T = unknown> = {\n  [key in keyof S]: S[key] extends Schema\n    ? ComponentValue<S[key], T>\n    : ValueType<T>[S[key] extends keyof ValueType<T> ? S[key] : any];\n};\n\n/**\n * Type of a component update corresponding to a given {@link Schema}.\n */\nexport type ComponentUpdate<S extends Schema = Schema, T = unknown> = {\n  entity: Entity;\n  value: [ComponentValue<S, T> | undefined, ComponentValue<S, T> | undefined];\n  component: Component<S, Metadata, T>;\n};\n\n/**\n * Type of component returned by {@link defineComponent}.\n */\nexport interface Component<S extends Schema = Schema, M extends Metadata = Metadata, T = unknown> {\n  id: string;\n  values: {\n    [key in keyof S]: Map<\n      EntitySymbol,\n      S[key] extends Schema ? ComponentValue<S[key], T> : ValueType<T>[S[key] extends keyof ValueType<T> ? S[key] : any]\n    >;\n  };\n  schema: S;\n  metadata: M;\n  entities: () => IterableIterator<Entity>;\n  world: World;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  update$: Subject<ComponentUpdate<S, T>> & { observers: any };\n}\n\n/**\n * Type of indexer returned by {@link createIndexer}.\n */\nexport type Indexer<S extends Schema, M extends Metadata = Metadata, T = unknown> = Component<S, M, T> & {\n  getEntitiesWithValue: (value: ComponentValue<S, T>) => Set<Entity>;\n};\n\nexport type Components = {\n  [key: string]: Component;\n};\n\nexport interface ComponentWithStream<S extends Schema, T = unknown> extends Component<S, Metadata, T> {\n  stream$: Subject<{ entity: Entity; value: ComponentValue<S, T> | undefined }>;\n}\n\nexport type AnyComponentValue = ComponentValue<Schema>;\n\nexport type AnyComponent = Component<Schema>;\n\n/**\n * Type of World returned by {@link createWorld}.\n */\nexport type World = {\n  registerEntity: (options?: { id?: string; idSuffix?: string }) => Entity;\n  registerComponent: (component: Component) => void;\n  components: Component[];\n  getEntities: () => IterableIterator<Entity>;\n  dispose: () => void;\n  registerDisposer: (disposer: () => void) => void;\n  hasEntity: (entity: Entity) => boolean;\n  deleteEntity: (entity: Entity) => void;\n  entitySymbols: Set<EntitySymbol>;\n};\n\nexport enum QueryFragmentType {\n  Has,\n  HasValue,\n  Not,\n  NotValue,\n  ProxyRead,\n  ProxyExpand,\n}\n\nexport type HasQueryFragment<T extends Schema> = {\n  type: QueryFragmentType.Has;\n  component: Component<T>;\n};\n\nexport type HasValueQueryFragment<T extends Schema> = {\n  type: QueryFragmentType.HasValue;\n  component: Component<T>;\n  value: Partial<ComponentValue<T>>;\n};\n\nexport type NotQueryFragment<T extends Schema> = {\n  type: QueryFragmentType.Not;\n  component: Component<T>;\n};\n\nexport type NotValueQueryFragment<T extends Schema> = {\n  type: QueryFragmentType.NotValue;\n  component: Component<T>;\n  value: Partial<ComponentValue<T>>;\n};\n\nexport type ProxyReadQueryFragment = {\n  type: QueryFragmentType.ProxyRead;\n  component: Component<{ value: Type.Entity }>;\n  depth: number;\n};\n\nexport type ProxyExpandQueryFragment = {\n  type: QueryFragmentType.ProxyExpand;\n  component: Component<{ value: Type.Entity }>;\n  depth: number;\n};\n\nexport type QueryFragment<T extends Schema = Schema> =\n  | HasQueryFragment<T>\n  | HasValueQueryFragment<T>\n  | NotQueryFragment<T>\n  | NotValueQueryFragment<T>\n  | ProxyReadQueryFragment\n  | ProxyExpandQueryFragment;\n\nexport type EntityQueryFragment<T extends Schema = Schema> =\n  | HasQueryFragment<T>\n  | HasValueQueryFragment<T>\n  | NotQueryFragment<T>\n  | NotValueQueryFragment<T>;\n\nexport type SettingQueryFragment = ProxyReadQueryFragment | ProxyExpandQueryFragment;\n\nexport type QueryFragments = QueryFragment<Schema>[];\n\nexport type SchemaOf<C extends Component<Schema>> = C extends Component<infer S> ? S : never;\n\nexport type Override<S extends Schema, T = unknown> = {\n  entity: Entity;\n  value: Partial<ComponentValue<S, T>> | null;\n};\n\n/**\n * Type of overridable component returned by {@link overridableComponent}.\n */\nexport type OverridableComponent<S extends Schema = Schema, M extends Metadata = Metadata, T = unknown> = Component<\n  S,\n  M,\n  T\n> & {\n  addOverride: (overrideId: string, update: Override<S, T>) => void;\n  removeOverride: (overrideId: string) => void;\n};\n\nexport type OptionalType =\n  | Type.OptionalNumber\n  | Type.OptionalBigInt\n  | Type.OptionalString\n  | Type.OptionalEntity\n  | Type.OptionalNumberArray\n  | Type.OptionalBigIntArray\n  | Type.OptionalStringArray\n  | Type.OptionalEntityArray;\n\nexport function isOptionalType(t: Type): t is OptionalType {\n  return [\n    Type.OptionalNumber,\n    Type.OptionalBigInt,\n    Type.OptionalString,\n    Type.OptionalEntity,\n    Type.OptionalEntityArray,\n    Type.OptionalNumberArray,\n    Type.OptionalBigIntArray,\n    Type.OptionalStringArray,\n  ].includes(t);\n}\n\nexport type ArrayType =\n  | Type.NumberArray\n  | Type.OptionalNumberArray\n  | Type.BigIntArray\n  | Type.OptionalBigIntArray\n  | Type.StringArray\n  | Type.OptionalStringArray\n  | Type.EntityArray\n  | Type.OptionalEntityArray;\n\nexport function isArrayType(t: Type): t is ArrayType {\n  return [\n    Type.NumberArray,\n    Type.OptionalNumberArray,\n    Type.BigIntArray,\n    Type.OptionalBigIntArray,\n    Type.StringArray,\n    Type.OptionalStringArray,\n    Type.EntityArray,\n    Type.OptionalEntityArray,\n  ].includes(t);\n}\n\nexport type NumberType = Type.Number | Type.OptionalNumber;\nexport function isNumberType(t: Type): t is NumberType {\n  return [Type.Number, Type.OptionalNumber].includes(t);\n}\n\nexport type EntityType = Type.Entity | Type.OptionalEntity;\nexport function isEntityType(t: Type): t is EntityType {\n  return [Type.Entity, Type.OptionalEntity].includes(t);\n}\n\nexport type Layer = {\n  world: World;\n  components: Record<string, Component<Schema>>;\n};\n\nexport type Layers = Record<string, Layer>;\n", "import { transformIterator } from \"@latticexyz/utils\";\nimport { hasComponent, removeComponent } from \"./Component\";\nimport { getEntityString, getEntitySymbol } from \"./Entity\";\nimport { Component, Entity, EntitySymbol, World } from \"./types\";\n\n/**\n * Create a new World.\n *\n * @remarks\n * A World is the central object of an ECS application, where all {@link defineComponent Components},\n * {@link registerEntity Entities} and {@link defineSystem Systems} are registerd.\n *\n * @returns A new World\n */\nexport function createWorld() {\n  const entitySymbols = new Set<EntitySymbol>();\n  const components: Component[] = [];\n  let disposers: [string, () => void][] = [];\n\n  function registerEntity({ id, idSuffix }: { id?: string; idSuffix?: string } = {}) {\n    const entity = (id || entitySymbols.size + (idSuffix ? \"-\" + idSuffix : \"\")) as Entity;\n    const entitySymbol = getEntitySymbol(entity);\n\n    // Register entity\n    entitySymbols.add(entitySymbol);\n\n    return entity;\n  }\n\n  function getEntities() {\n    return transformIterator(entitySymbols.values(), getEntityString);\n  }\n\n  function registerComponent(component: Component) {\n    components.push(component);\n  }\n\n  function dispose(namespace?: string) {\n    for (const [, disposer] of disposers.filter((d) => !namespace || d[0] === namespace)) {\n      disposer();\n    }\n    disposers = disposers.filter((d) => namespace && d[0] !== namespace);\n  }\n\n  function registerDisposer(disposer: () => void, namespace = \"\") {\n    disposers.push([namespace, disposer]);\n  }\n\n  function hasEntity(entity: Entity): boolean {\n    const entitySymbol = getEntitySymbol(entity);\n    return entitySymbols.has(entitySymbol);\n  }\n\n  function deleteEntity(entity: Entity) {\n    for (const component of components) {\n      if (hasComponent(component, entity)) removeComponent(component, entity);\n    }\n    entitySymbols.delete(getEntitySymbol(entity));\n  }\n\n  return {\n    registerEntity,\n    components,\n    registerComponent,\n    dispose,\n    registerDisposer,\n    hasEntity,\n    getEntities,\n    entitySymbols,\n    deleteEntity,\n  } satisfies World;\n}\n\n/**\n * Create a new namespace from an existing World.\n * The `dispose` method of a namespaced World only calls disposers registered on this namespace.\n *\n * @param world World to create a new namespace for.\n * @param namespace String descriptor of the new namespace.\n * @returns World with a new namespace.\n */\nexport function namespaceWorld(world: ReturnType<typeof createWorld>, namespace: string) {\n  return {\n    ...world,\n    registerDisposer: (disposer: () => void) => world.registerDisposer(disposer, namespace),\n    dispose: () => world.dispose(namespace),\n  };\n}\n\n/**\n * Get all components that have a value for the given entity.\n *\n * @dev Design decision: don't store a list of components for each entity but compute it dynamically when needed\n * because there are less components than entities and maintaining a list of components per entity is a large overhead.\n *\n * @param world World object the given entity is registered on.\n * @param entity {@link Entity} to get the list of components for.\n * @returns Array of components that have a value for the given entity.\n */\nexport function getEntityComponents(world: World, entity: Entity): Component[] {\n  return world.components.filter((component) => hasComponent(component, entity));\n}\n"],
  "mappings": "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",
  "names": ["push", "path", "context", "niceErrors", "_", "annotationType", "key", "toString", "index", "length", "other", "constructor", "name", "dataStructure", "thing", "property", "derivation", "method", "errors", "process", "die", "error", "args", "Array", "_len", "_key", "arguments", "e", "apply", "Error", "map", "String", "join", "mockGlobal", "getGlobal", "globalThis", "window", "global", "self", "assign", "Object", "getDescriptor", "getOwnPropertyDescriptor", "defineProperty", "objectPrototype", "prototype", "EMPTY_ARRAY", "freeze", "EMPTY_OBJECT", "hasProxy", "Proxy", "plainObjectString", "assertProxies", "warnAboutProxyRequirement", "msg", "globalState", "verifyProxies", "getNextId", "mobxGuid", "once", "func", "invoked", "noop", "isFunction", "fn", "isStringish", "value", "t", "isObject", "isPlainObject", "proto", "getPrototypeOf", "protoConstructor", "hasOwnProperty", "call", "isGenerator", "obj", "displayName", "addHiddenProp", "object", "propName", "enumerable", "writable", "configurable", "addHiddenFinalProp", "createInstanceofPredicate", "theClass", "x", "isES6Map", "isPlainES6Map", "mapProto", "objectProto", "nullProto", "isES6Set", "hasGetOwnPropertySymbols", "getOwnPropertySymbols", "getPlainObjectKeys", "keys", "symbols", "concat", "filter", "s", "propertyIsEnumerable", "ownKeys", "Reflect", "getOwnPropertyNames", "stringifyKey", "toPrimitive", "hasProp", "target", "prop", "getOwnPropertyDescriptors", "res", "forEach", "getFlag", "flags", "mask", "setFlag", "newValue", "storedAnnotationsSymbol", "Symbol", "createDecoratorAnnotation", "annotation", "decorator", "is20223Decorator", "decorate_20223_", "storeAnnotation", "_extends", "isOverride", "fieldName", "assertNotDecorated", "currentAnnotationType", "annotationType_", "requestedAnnotationType", "is20223Decorator", "context", "assert20223DecoratorType", "types", "includes", "kind", "die", "String", "name", "$mobx", "Symbol", "Atom", "name_", "process", "getNextId", "flags_", "observers_", "Set", "lastAccessedBy_", "lowestObserverState_", "IDerivationState_", "NOT_TRACKING_", "onBOL", "onBUOL", "_proto", "prototype", "onBO", "forEach", "listener", "onBUO", "reportObserved", "reportChanged", "startBatch", "propagateChanged", "endBatch", "toString", "_createClass", "key", "get", "getFlag", "isBeingObservedMask_", "set", "newValue", "setFlag", "isPendingUnobservationMask_", "diffValueMask_", "isAtom", "createInstanceofPredicate", "createAtom", "onBecomeObservedHandler", "onBecomeUnobservedHandler", "noop", "atom", "onBecomeObserved", "onBecomeUnobserved", "identityComparer", "a", "b", "structuralComparer", "deepEqual", "shallowComparer", "defaultComparer", "Object", "is", "comparer", "identity", "structural", "shallow", "deepEnhancer", "v", "_", "isObservable", "Array", "isArray", "observable", "array", "isPlainObject", "object", "undefined", "isES6Map", "map", "isES6Set", "isAction", "isFlow", "isGenerator", "flow", "autoAction", "shallowEnhancer", "isObservableObject", "isObservableArray", "isObservableMap", "isObservableSet", "deep", "referenceEnhancer", "refStructEnhancer", "oldValue", "OVERRIDE", "override", "createDecoratorAnnotation", "annotationType_", "make_", "extend_", "decorate_20223_", "isOverride", "annotation", "adm", "isPlainObject_", "hasProp", "appliedAnnotations_", "descriptor", "proxyTrap", "desc", "console", "warn", "createActionAnnotation", "options", "options_", "source", "_this$options_", "bound", "target_", "value", "actionDescriptor", "createActionDescriptor", "defineProperty", "defineProperty_", "mthd", "addInitializer", "ann", "_createAction", "m", "_ann$options_$name", "_ann$options_", "_ann$options_$autoAct", "_ann$options_2", "createAction", "storeAnnotation", "_this$options_2", "self", "bind", "isMobxAction", "assertActionDescriptor", "_ref", "_ref2", "isFunction", "safeDescriptors", "globalState", "_annotation$options_", "_adm$proxy_", "proxy_", "_annotation$options_$", "_annotation$options_2", "_annotation$options_$2", "_annotation$options_3", "_annotation$options_4", "_adm$proxy_2", "configurable", "enumerable", "writable", "createFlowAnnotation", "flowDescriptor", "createFlowDescriptor", "_this$options_3", "isMobXFlow", "assertFlowDescriptor", "createComputedAnnotation", "assertComputedDescriptor", "defineComputedProperty_", "_extends", "asObservableObject", "values_", "ComputedValue", "getObservablePropValue_", "createObservableAnnotation", "assertObservableDescriptor", "defineObservableProperty_", "_this$options_$enhanc", "enhancer", "initializedObjects", "WeakSet", "initializeObservable", "target", "ObservableValue", "_ann$options_$enhance", "add", "has", "call", "setObservablePropValue_", "init", "AUTO", "autoAnnotation", "createAutoAnnotation", "computed", "flowAnnotation", "autoBind", "actionAnnotation", "observableAnnotation", "ref", "_this$options_4", "_this$options_5", "_this$options_6", "OBSERVABLE", "OBSERVABLE_REF", "OBSERVABLE_SHALLOW", "OBSERVABLE_STRUCT", "defaultCreateObservableOptions", "defaultDecorator", "proxy", "freeze", "asCreateObservableOptions", "thing", "observableRefAnnotation", "observableShallowAnnotation", "observableStructAnnotation", "observableDecoratorAnnotation", "getEnhancerFromOptions", "getEnhancerFromAnnotation", "getAnnotationFromOptions", "_options$defaultDecor", "createObservable", "arg2", "arg3", "isStringish", "box", "assign", "observableFactories", "o", "equals", "initialValues", "useProxies", "createLegacyArray", "createObservableArray", "ObservableMap", "ObservableSet", "props", "decorators", "initObservable", "extendObservable", "asDynamicObservableObject", "struct", "COMPUTED", "COMPUTED_STRUCT", "computedAnnotation", "computedStructAnnotation", "arg1", "opts", "currentActionId", "nextActionId", "isFunctionNameConfigurable", "_getDescriptor$config", "_getDescriptor", "getDescriptor", "tmpNameDescriptor", "actionName", "fn", "res", "executeAction", "arguments", "canRunAsDerivation", "scope", "args", "runInfo", "_startAction", "apply", "err", "error_", "_endAction", "notifySpy_", "isSpyEnabled", "startTime_", "Date", "now", "flattenedArgs", "from", "EMPTY_ARRAY", "spyReportStart", "type", "ACTION", "prevDerivation_", "trackingDerivation", "runAsAction", "prevAllowStateChanges_", "allowStateChanges", "untrackedStart", "allowStateChangesStart", "prevAllowStateReads_", "allowStateReadsStart", "runAsAction_", "actionId_", "parentActionId_", "suppressReactionErrors", "allowStateChangesEnd", "allowStateReadsEnd", "untrackedEnd", "spyReportEnd", "time", "allowStateChangesStart", "allowStateChanges", "prev", "globalState", "allowStateChangesEnd", "CREATE", "ObservableValue", "_Atom", "value", "enhancer", "name_", "notifySpy", "equals", "process", "getNextId", "comparer", "_this", "call", "hasUnreportedChange_", "interceptors_", "changeListeners_", "value_", "dehancer", "undefined", "isSpyEnabled", "spyReport", "type", "object", "observableKind", "debugObjectName", "newValue", "_inheritsLoose", "_proto", "prototype", "dehanceValue", "set", "oldValue", "prepareNewValue_", "UNCHANGED", "spyReportStart", "UPDATE", "setNewValue_", "spyReportEnd", "checkIfStateModificationsAreAllowed", "hasInterceptors", "change", "interceptChange", "reportChanged", "hasListeners", "notifyListeners", "get", "reportObserved", "intercept_", "handler", "registerInterceptor", "observe_", "listener", "fireImmediately", "registerListener", "raw", "toJSON", "toString", "valueOf", "toPrimitive", "Symbol", "Atom", "isObservableValue", "createInstanceofPredicate", "ComputedValue", "options", "dependenciesState_", "IDerivationState_", "NOT_TRACKING_", "observing_", "newObserving_", "observers_", "Set", "runId_", "lastAccessedBy_", "lowestObserverState_", "UP_TO_DATE_", "unboundDepsCount_", "CaughtException", "triggeredBy_", "flags_", "derivation", "setter_", "isTracing_", "TraceMode", "NONE", "scope_", "equals_", "requiresReaction_", "keepAlive_", "onBOL", "onBUOL", "die", "name", "createAction", "compareStructural", "struct", "structural", "context", "requiresReaction", "keepAlive", "onBecomeStale_", "propagateMaybeChanged", "onBO", "forEach", "onBUO", "isComputing", "inBatch", "size", "shouldCompute", "warnAboutUntrackedRead_", "startBatch", "computeValue_", "endBatch", "prevTrackingContext", "trackingContext", "trackAndCompute", "propagateChangeConfirmed", "result", "isCaughtException", "cause", "isRunningSetter", "wasSuspended", "changed", "track", "res", "trackDerivedFunction", "disableErrorBoundaries", "e", "suspend_", "clearObserving", "console", "log", "firstTime", "prevValue", "autorun", "prevU", "untrackedStart", "untrackedEnd", "computedRequiresReaction", "warn", "_createClass", "key", "getFlag", "isComputingMask_", "setFlag", "isRunningSetterMask_", "isBeingObservedMask_", "isPendingUnobservationMask_", "diffValueMask_", "isComputedValue", "STALE_", "POSSIBLY_STALE_", "prevAllowStateReads", "allowStateReadsStart", "prevUntracked", "obs", "l", "length", "i", "obj", "allowStateReadsEnd", "changeDependenciesStateTo0", "checkIfStateModificationsAreAllowed", "atom", "hasObservers", "observers_", "size", "globalState", "allowStateChanges", "enforceActions", "console", "warn", "name_", "checkIfStateReadsAreAllowed", "observable", "allowStateReads", "observableRequiresReaction", "trackDerivedFunction", "derivation", "f", "context", "prevAllowStateReads", "allowStateReadsStart", "changeDependenciesStateTo0", "newObserving_", "Array", "runId_", "observing_", "length", "unboundDepsCount_", "runId", "prevTracking", "trackingDerivation", "inBatch", "result", "disableErrorBoundaries", "call", "e", "CaughtException", "bindDependencies", "warnAboutDerivationWithoutDependencies", "allowStateReadsEnd", "requiresObservable_", "reactionRequiresObservable", "prevObserving", "observing", "lowestNewObservingDerivationState", "IDerivationState_", "UP_TO_DATE_", "i0", "l", "i", "dep", "diffValue", "dependenciesState_", "removeObserver", "addObserver", "onBecomeStale_", "clearObserving", "obs", "NOT_TRACKING_", "untracked", "action", "prev", "untrackedStart", "untrackedEnd", "lowestObserverState_", "MobXGlobals", "version", "UNCHANGED", "trackingDerivation", "trackingContext", "runId", "mobxGuid", "inBatch", "pendingUnobservations", "pendingReactions", "isRunningReactions", "allowStateChanges", "allowStateReads", "enforceActions", "spyListeners", "globalReactionErrorHandlers", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "suppressReactionErrors", "useProxies", "verifyProxies", "safeDescriptors", "canMergeGlobalState", "isolateCalled", "globalState", "global", "getGlobal", "__mobxInstanceCount", "__mobxGlobals", "setTimeout", "die", "addObserver", "observable", "node", "observers_", "add", "lowestObserverState_", "dependenciesState_", "removeObserver", "size", "queueForUnobservation", "isPendingUnobservation", "globalState", "pendingUnobservations", "push", "startBatch", "inBatch", "endBatch", "runReactions", "list", "i", "length", "isBeingObserved", "onBUO", "ComputedValue", "suspend_", "reportObserved", "checkIfStateReadsAreAllowed", "derivation", "trackingDerivation", "runId_", "lastAccessedBy_", "newObserving_", "unboundDepsCount_", "trackingContext", "onBO", "propagateChanged", "IDerivationState_", "STALE_", "forEach", "d", "UP_TO_DATE_", "isTracing_", "TraceMode", "NONE", "logTraceInfo", "onBecomeStale_", "propagateChangeConfirmed", "POSSIBLY_STALE_", "propagateMaybeChanged", "console", "log", "name_", "BREAK", "lines", "printDepTree", "getDependencyTree", "Function", "toString", "replace", "join", "tree", "depth", "repeat", "name", "dependencies", "child", "Reaction", "onInvalidate_", "errorHandler_", "requiresObservable_", "process", "getNextId", "observing_", "NOT_TRACKING_", "flags_", "_proto", "prototype", "schedule_", "isScheduled", "pendingReactions", "runReaction_", "isDisposed", "prev", "shouldCompute", "isTrackPending", "isSpyEnabled", "spyReport", "type", "e", "reportExceptionInDerivation_", "track", "fn", "notify", "startTime", "Date", "now", "spyReportStart", "isRunning", "prevReaction", "result", "trackDerivedFunction", "undefined", "clearObserving", "isCaughtException", "cause", "spyReportEnd", "time", "error", "disableErrorBoundaries", "message", "suppressReactionErrors", "warn", "globalReactionErrorHandlers", "f", "_this", "dispose", "getDisposer_", "abortSignal", "_this2", "removeEventListener", "addEventListener", "$mobx", "trace", "enterBreakPoint", "_createClass", "key", "get", "getFlag", "isDisposedMask_", "set", "newValue", "setFlag", "isScheduledMask_", "isTrackPendingMask_", "isRunningMask_", "diffValueMask_", "MAX_REACTION_ITERATIONS", "reactionScheduler", "f", "runReactions", "globalState", "inBatch", "isRunningReactions", "runReactionsHelper", "allReactions", "pendingReactions", "iterations", "length", "console", "error", "process", "splice", "remainingReactions", "i", "l", "runReaction_", "isReaction", "createInstanceofPredicate", "Reaction", "isSpyEnabled", "globalState", "spyListeners", "length", "spyReport", "event", "listeners", "i", "l", "spyReportStart", "change", "_extends", "END_EVENT", "type", "spyReportEnd", "spy", "listener", "console", "warn", "push", "once", "filter", "ACTION", "ACTION_BOUND", "AUTOACTION", "AUTOACTION_BOUND", "DEFAULT_ACTION_NAME", "actionAnnotation", "createActionAnnotation", "actionBoundAnnotation", "bound", "autoActionAnnotation", "autoAction", "autoActionBoundAnnotation", "createActionFactory", "res", "action", "arg1", "arg2", "isFunction", "createAction", "name", "is20223Decorator", "decorate_20223_", "isStringish", "storeAnnotation", "createDecoratorAnnotation", "process", "die", "Object", "assign", "isAction", "thing", "isFunction", "isMobxAction", "autorun", "view", "opts", "EMPTY_OBJECT", "process", "die", "name", "_opts$name", "_opts", "getNextId", "runSync", "scheduler", "delay", "reaction", "Reaction", "track", "reactionRunner", "onError", "requiresObservable", "createSchedulerFromOptions", "isScheduled", "isDisposed", "_opts2", "signal", "aborted", "schedule_", "getDisposer_", "_opts3", "run", "f", "setTimeout", "ON_BECOME_OBSERVED", "ON_BECOME_UNOBSERVED", "onBecomeObserved", "thing", "arg2", "arg3", "interceptHook", "onBecomeUnobserved", "hook", "atom", "getAtom", "cb", "isFunction", "listenersKey", "add", "Set", "hookListeners", "size", "extendObservable", "target", "properties", "annotations", "options", "process", "arguments", "length", "die", "isObservableMap", "isPlainObject", "isObservable", "descriptors", "getOwnPropertyDescriptors", "initObservable", "adm", "asObservableObject", "$mobx", "ownKeys", "forEach", "key", "extend_", "getDependencyTree", "thing", "property", "nodeToDependencyTree", "getAtom", "node", "result", "name", "name_", "observing_", "dependencies", "unique", "map", "unique", "list", "Array", "from", "Set", "generatorId", "FlowCancellationError", "message", "prototype", "Object", "create", "Error", "flowAnnotation", "createFlowAnnotation", "flowBoundAnnotation", "bound", "flow", "Object", "assign", "arg1", "arg2", "is20223Decorator", "decorate_20223_", "isStringish", "storeAnnotation", "arguments", "length", "die", "generator", "name", "res", "ctx", "args", "runId", "generatorId", "gen", "action", "apply", "rejector", "pendingPromise", "undefined", "promise", "Promise", "resolve", "reject", "stepId", "onFulfilled", "ret", "next", "call", "e", "onRejected", "err", "isFunction", "then", "done", "value", "cancel", "cancelPromise", "yieldedPromise", "noop", "FlowCancellationError", "isMobXFlow", "createDecoratorAnnotation", "isFlow", "fn", "isMobXFlow", "_isObservable", "value", "property", "undefined", "isObservableMap", "isObservableArray", "die", "isObservableObject", "$mobx", "values_", "has", "isAtom", "isReaction", "isComputedValue", "isObservable", "arguments", "length", "trace", "enterBreakPoint", "_len", "arguments", "length", "args", "Array", "_key", "pop", "derivation", "getAtomFromArgs", "die", "isTracing_", "TraceMode", "NONE", "console", "log", "name_", "BREAK", "LOG", "globalState", "trackingDerivation", "getAtom", "transaction", "action", "thisArg", "undefined", "startBatch", "apply", "endBatch", "getAdm", "target", "$mobx", "objectProxyTraps", "has", "name", "globalState", "trackingDerivation", "warnAboutProxyRequirement", "has_", "get", "get_", "set", "value", "isStringish", "values_", "_getAdm$set_", "set_", "deleteProperty", "process", "_getAdm$delete_", "delete_", "defineProperty", "descriptor", "_getAdm$definePropert", "defineProperty_", "ownKeys", "ownKeys_", "preventExtensions", "die", "asDynamicObservableObject", "options", "assertProxies", "asObservableObject", "_target$$mobx$proxy_", "_target$$mobx", "proxy_", "Proxy", "hasInterceptors", "interceptable", "interceptors_", "undefined", "length", "registerInterceptor", "handler", "interceptors", "push", "once", "idx", "indexOf", "splice", "interceptChange", "change", "prevU", "untrackedStart", "concat", "i", "l", "type", "untrackedEnd", "hasListeners", "listenable", "changeListeners_", "registerListener", "listeners", "notifyListeners", "slice", "keysSymbol", "Symbol", "SPLICE", "UPDATE", "MAX_SPLICE_SIZE", "arrayTraps", "get", "target", "name", "adm", "$mobx", "getArrayLength_", "isNaN", "get_", "parseInt", "hasProp", "arrayExtensions", "set", "value", "setArrayLength_", "set_", "preventExtensions", "die", "ObservableArrayAdministration", "enhancer", "owned_", "legacyMode_", "process", "getNextId", "atom_", "values_", "interceptors_", "changeListeners_", "enhancer_", "dehancer", "proxy_", "lastKnownLength_", "Atom", "newV", "oldV", "_proto", "prototype", "dehanceValue_", "undefined", "dehanceValues_", "values", "length", "map", "intercept_", "handler", "registerInterceptor", "observe_", "listener", "fireImmediately", "observableKind", "object", "debugObjectName", "name_", "type", "index", "added", "slice", "addedCount", "removed", "removedCount", "registerListener", "reportObserved", "newLength", "currentLength", "newItems", "Array", "i", "spliceWithArray_", "updateArrayLength_", "oldLength", "delta", "reserveArrayBuffer", "deleteCount", "checkIfStateModificationsAreAllowed", "Math", "max", "arguments", "min", "EMPTY_ARRAY", "hasInterceptors", "change", "interceptChange", "v", "_this", "lengthDelta", "res", "spliceItemsIntoValues_", "notifyArraySplice_", "_this$values_", "splice", "apply", "concat", "oldItems", "notifyArrayChildUpdate_", "newValue", "oldValue", "notifySpy", "isSpyEnabled", "notify", "hasListeners", "spyReportStart", "reportChanged", "notifyListeners", "spyReportEnd", "console", "warn", "changed", "createObservableArray", "initialValues", "owned", "assertProxies", "initObservable", "addHiddenFinalProp", "proxy", "Proxy", "clear", "replace", "toJSON", "_len", "_key", "spliceWithArray", "push", "_len2", "items", "_key2", "pop", "shift", "unshift", "_len3", "_key3", "reverse", "globalState", "trackingDerivation", "sort", "copy", "remove", "idx", "indexOf", "addArrayExtension", "simpleFunc", "mapLikeFunc", "reduceLikeFunc", "funcName", "funcFactory", "dehancedValues", "callback", "thisArg", "element", "call", "_this2", "accumulator", "currentValue", "_this3", "isObservableArrayAdministration", "createInstanceofPredicate", "isObservableArray", "thing", "isObject", "ObservableMapMarker", "ADD", "DELETE", "ObservableMap", "initialData", "deepEnhancer", "data_", "hasMap_", "keysAtom_", "isFunction", "Map", "createAtom", "merge", "has_", "key", "has", "entry", "newEntry", "ObservableValue", "referenceEnhancer", "stringifyKey", "onBecomeUnobserved", "hasKey", "updateValue_", "addValue_", "_delete", "value_", "transaction", "_this3$hasMap_$get", "setNewValue_", "observable", "prepareNewValue_", "UNCHANGED", "_this4", "_this4$hasMap_$get", "keys", "self", "makeIterable", "next", "_keys$next", "done", "entries", "_keys$next2", "Symbol", "iterator", "forEach", "_iterator", "_createForOfIteratorHelperLoose", "_step", "_step$value", "other", "isObservableMap", "isPlainObject", "getPlainObjectKeys", "_this5", "isArray", "_ref", "isES6Map", "isPlainES6Map", "untracked", "_iterator2", "_this6", "_step2", "replacementMap", "convertToMap", "orderedData", "keysReportChangedCalled", "_iterator3", "_this7", "_step3", "deleted", "_iterator4", "_step4", "_step4$value", "keyExisted", "size", "iter1", "iter2", "next1", "next2", "toString", "from", "_createClass", "toStringTag", "dataStructure", "ObservableSetMarker", "ObservableSet", "Set", "callbackFn", "add", "nextIndex", "observableValues", "intersection", "otherSet", "isES6Set", "dehancedSet", "union", "difference", "symmetricDifference", "isSubsetOf", "isSupersetOf", "isDisjointFrom", "isObservableSet", "descriptorCache", "Object", "create", "REMOVE", "ObservableObjectAdministration", "target_", "defaultAnnotation_", "autoAnnotation", "isPlainObject_", "appliedAnnotations_", "pendingKeys_", "isAnnotation", "getObservablePropValue_", "setObservablePropValue_", "ComputedValue", "proxyTrap", "Reflect", "extend_", "enumerable", "writable", "configurable", "make_", "annotation", "assertAnnotable", "_this$target_$storedA", "storedAnnotationsSymbol", "annotationType_", "source", "objectPrototype", "descriptor", "getDescriptor", "outcome", "getPrototypeOf", "recordAnnotationApplied", "defineProperty_", "startBatch", "deleteOutcome", "delete_", "_extends", "defineProperty", "notifyPropertyAddition_", "endBatch", "defineObservableProperty_", "cachedDescriptor", "getCachedObservablePropDescriptor", "safeDescriptors", "defineComputedProperty_", "options", "context", "_this$pendingKeys_", "_getDescriptor", "deleteProperty", "propagateChanged", "_this$pendingKeys_2", "ownKeys_", "ownKeys", "keys_", "asObservableObject", "isObservableObject", "getAdministration", "getDebugName", "isExtensible", "_options$name", "constructor", "String", "getAnnotationFromOptions", "addHiddenProp", "isObservableObjectAdministration", "_adm$target_$storedAn", "isOverride", "fieldName", "currentAnnotationType", "requestedAnnotationType", "ENTRY_0", "createArrayEntryDescriptor", "safariPrototypeSetterInheritanceBug", "p", "OBSERVABLE_ARRAY_BUFFER_SIZE", "StubArray", "inherit", "ctor", "proto", "setPrototypeOf", "__proto__", "LegacyObservableArray", "_StubArray", "_inheritsLoose", "arrays", "a", "prop", "fn", "createArrayBufferItem", "createLegacyArray", "getAtom", "property", "isAtom", "isComputedValue", "isReaction", "named", "isAction", "cb", "derivation", "untrackedStart", "allowStateChanges", "allowStateChangesStart", "allowStateChangesEnd", "untrackedEnd", "deepEqual", "b", "depth", "eq", "aStack", "bStack", "className", "valueOf", "unwrap", "areArrays", "aCtor", "bCtor", "getSelf", "m", "g", "getGlobal", "__MOBX_DEVTOOLS_GLOBAL_HOOK__", "injectMobx", "spy", "extras", "b", "d", "p", "P", "_", "f", "y", "g", "v", "from", "v", "g", "q", "f", "b", "v", "isFunction", "errors", "Subscription", "errors", "isFunction", "empty", "isFunction", "timeout", "noop", "Subscriber", "ConsumerObserver", "SafeSubscriber", "isFunction", "noop", "observable", "x", "Observable", "observable", "x", "isFunction", "isFunction", "OperatorSubscriber", "err", "ConnectableObservable", "timestamp", "run", "timestamp", "Subject", "observable", "AnonymousSubject", "BehaviorSubject", "ReplaySubject", "last", "AsyncSubject", "Action", "delay", "timeout", "AsyncAction", "delay", "AsapAction", "delay", "action", "Scheduler", "delay", "AsyncScheduler", "action", "AsapScheduler", "action", "QueueAction", "delay", "QueueScheduler", "AnimationFrameAction", "delay", "action", "AnimationFrameScheduler", "action", "VirtualTimeScheduler", "action", "VirtualAction", "delay", "action", "b", "isFunction", "x", "isFunction", "isFunction", "observable", "isFunction", "isFunction", "isFunction", "observable", "isFunction", "array", "process", "delay", "repeat", "delay", "delay", "iterator", "isFunction", "iterator", "isFunction", "NotificationKind", "Notification", "isFunction", "map", "isArray", "expand", "buffer", "isFunction", "map", "b", "noop", "isArray", "isFunction", "count", "refCount", "mapObject", "source", "valueMap", "target", "key", "filterNullish", "pipe", "filter", "x", "uuid", "rand", "_getRandomInt", "hex", "_hexAligner", "x", "n", "num", "length", "str", "i", "z", "makeIterable", "iterator", "transformIterator", "iterator", "transform", "makeIterable", "done", "value", "LOWER_HALF_MASK", "MAX_SUPPORTED", "createToInt", "size", "maxValue", "minValue", "value", "toInt32", "Type", "UpdateType", "OptionalTypes", "createIndexer", "component", "valueToEntities", "getEntitiesWithValue", "value", "entities", "getValueKey", "getEntityString", "add", "entity", "valueKey", "entitiesWithValue", "remove", "getComponentEntities", "getComponentValue", "getEntitySymbol", "subscription", "isComponentUpdate", "update", "toUpdate", "toUpdateStream", "pipe", "map", "isIndexer", "c", "isFullComponentValue", "key", "getComponentName", "defineComponent", "world", "schema", "options", "id", "uuid", "values", "mapObject", "update$", "Subject", "metadata", "transformIterator", "setComponent", "entitySymbol", "prevValue", "val", "updateComponent", "initialValue", "currentValue", "removeComponent", "hasComponent", "schemaKeys", "getComponentValueStrict", "componentValueEquals", "a", "b", "equals", "withValue", "overridableComponent", "nonce", "overrides", "overriddenEntityValues", "addOverride", "setOverriddenComponentValue", "removeOverride", "affectedEntity", "relevantOverrides", "o", "lastOverride", "getOverriddenComponentValue", "originalValue", "overriddenValue", "valueProxyHandler", "target", "prop", "partialValues", "valuesProxy", "overriddenComponent", "filter", "e", "getLocalCacheId", "uniqueWorldIdentifier", "clearLocalCache", "createLocalCache", "cacheId", "numUpdates", "creation", "encodedCache", "cache", "state", "entityId", "updateSub", "encoded", "m", "createEntity", "components", "entityString", "QueryFragmentType", "isOptionalType", "t", "isArrayType", "isNumberType", "isEntityType", "Has", "component", "Not", "HasValue", "value", "NotValue", "ProxyRead", "depth", "ProxyExpand", "passesQueryFragment", "entity", "fragment", "hasComponent", "componentValueEquals", "getComponentValue", "isPositiveFragment", "isNegativeFragment", "isSettingFragment", "isBreakingPassState", "passes", "passesQueryFragmentProxy", "proxyRead", "proxyEntity", "i", "getChildEntities", "directChildEntities", "getEntitiesWithValue", "indirectChildEntities", "childEntity", "runQuery", "fragments", "initialSet", "entities", "proxyExpand", "childEntities", "getComponentEntities", "defineQuery", "options", "matching", "observable", "initial$", "from", "toUpdateStream", "containsProxy", "v", "internal$", "merge", "f", "concatMap", "update", "newMatchingSet", "updates", "previouslyMatchingEntity", "matchingEntity", "of", "map", "filterNullish", "concat", "share", "defineUpdateQuery", "filter", "e", "defineEnterQuery", "defineExitQuery", "defineRxSystem", "world", "observable$", "system", "subscription", "defineUpdateSystem", "query", "defineEnterSystem", "defineExitSystem", "defineSystem", "defineComponentSystem", "EMPTY", "defineSyncSystem", "type", "setComponent", "removeComponent", "createWorld", "entitySymbols", "components", "disposers", "registerEntity", "id", "idSuffix", "entitySymbol", "getEntitySymbol", "getEntities", "transformIterator", "getEntityString", "registerComponent", "dispose", "namespace", "disposer", "d", "registerDisposer", "hasEntity", "deleteEntity", "namespaceWorld", "getEntityComponents"]
}
